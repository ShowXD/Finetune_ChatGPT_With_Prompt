{"prompt": "在1-0-1的00:13的重點是什麼 \n\n###\n\n", "completion": " - 介紹Python程式簡介\n- 分為4個單元\n- 包含資料科學、Python程式設計、執行環境安裝、Anaconda/Spyder開發環境的安裝與介紹 END"}
{"prompt": "在1-0-1的00:30的重點是什麼 \n\n###\n\n", "completion": " - 資料科學現在非常的重要\n- 當今的資料科學主要包含三個領域：IT的Programming、數學、統計\n- 還有這個Domain knowledge END"}
{"prompt": "在1-0-1的00:44的重點是什麼 \n\n###\n\n", "completion": " - 介紹資料科學\n- 資料科學的應用\n- 介紹課程 END"}
{"prompt": "在1-0-1的00:54的重點是什麼 \n\n###\n\n", "completion": " - Programming跟資料科學的主要關係\n- 第二個單元是Python的程式設計\n- 介紹程式的基本概念，包括原始程式和機器碼 END"}
{"prompt": "在1-0-1的01:09的重點是什麼 \n\n###\n\n", "completion": " - 編譯器的定義\n- Python語言的特性\n- 手把手教學的第三部分 END"}
{"prompt": "在1-0-1的01:21的重點是什麼 \n\n###\n\n", "completion": " - 下載 Python 系統\n- 安裝 Python 系統\n- 寫出第一個程式並執行\n- 介紹 Anaconda/Spyder 開發環境的安裝與使用 END"}
{"prompt": "在1-0-1的01:39的重點是什麼 \n\n###\n\n", "completion": " - 開發環境和執行環境不同。\n- 執行環境只需讓程式可以執行即可。\n- 一般使用者只需要執行環境。\n- 但是... END"}
{"prompt": "在1-0-1的01:51的重點是什麼 \n\n###\n\n", "completion": " - 修習課程，目標是成為一個Programmer。\n- 需要一個開發環境。\n- 開發環境能讓你寫程式。\n- 程式需要編譯成執行碼。 END"}
{"prompt": "在1-0-1的02:01的重點是什麼 \n\n###\n\n", "completion": " - 讓程式可以執行\n- 介紹 Spyder 專業的開發環境\n- 提供許多方便的功能 END"}
{"prompt": "在1-0-1的02:12的重點是什麼 \n\n###\n\n", "completion": " - 學習完這章後可以了解資料科學和程式之間的關係。\n- 可以開始完成第一支程式碼。 END"}
{"prompt": "在1-1-1的00:13的重點是什麼 \n\n###\n\n", "completion": " - 資料科學是當紅炸子雞的工作\n- 資料科學是跨領域的學科\n- 資料科學需要結合程式能力和統計能力\n- 資料科學是現今各個公司所需要的人才之一 END"}
{"prompt": "在1-1-1的01:07的重點是什麼 \n\n###\n\n", "completion": " - 模型善於從字幕中獲取程式相關重點\n- 使用科學的方法\n- 演算法、系統去萃取出一些知識\n- 資料的內涵從結構性跟非結構性的資料中獲取\n- 範圍廣泛，包括各個設備所收集到的非結構性資料\n- 萃取有意義的資料出來\n- 使用科學的方法去證明現象的確是這個樣子的 END"}
{"prompt": "在1-1-1的02:00的重點是什麼 \n\n###\n\n", "completion": " - 資料科學需要用科學的方法和演算法來驗證資料的正確性。\n- 資料科學是一種觀念，統合了統計、資料分析、Machine Learning等方法，透過資料分析來了解和分析真實現象。\n- 資料科學需要多個學科的知識，包括統計、資料分析等。 END"}
{"prompt": "在1-1-1的03:06的重點是什麼 \n\n###\n\n", "completion": " - Machine Learning 是資料科學、資料處理方面的一小部分\n- Machine Learning 的效率和精準度比其他方法高\n- 資料科學包含 Machine Learning、人工智慧相關的技術\n- Youbike 的借還車資料被儲存下來 END"}
{"prompt": "在1-1-1的04:19的重點是什麼 \n\n###\n\n", "completion": " - 可以從租借紀錄中分析熱門車站和路徑，以及時段方面的資訊\n- 資料分析可以幫助做交通規劃和決策\n- 資料分析需要程式、統計和領域知識\n- 資料科學是指從資料中提取知識和洞見的過程 END"}
{"prompt": "在1-1-1的05:46的重點是什麼 \n\n###\n\n", "completion": " - Programming、統計、Domain knowledge 是三個重要的知識學門\n- 線上學習的資料可以被儲存在資料庫中進行分析\n- 可以分析學習者的平均學習時間、學習困難點、觀看影片的速度等\n- 影片分析可以提供錄製教學影片的方針 END"}
{"prompt": "在1-1-1的07:09的重點是什麼 \n\n###\n\n", "completion": " - 可以透過 AI 建立模型來做預測\n- Machine Learning 是機器學習的部分\n- 訓練資料大概是八成，驗證資料大概是兩成\n- Machine Learning 的 behavior 包含登入次數、看影片次數、跳著看等等 END"}
{"prompt": "在1-1-1的08:36的重點是什麼 \n\n###\n\n", "completion": " - 模型可以從字幕中獲取程式相關重點\n- 資料科學中的 Machine Learning 可以透過訓練 Model 來預測結果\n- Model 可以用來做預估或預測\n- 當 Model 的精準度高到一定程度時，他就是可用的\n- 資料科學的流程包括資料收集、資料清理、資料分析、Model 訓練、驗證、預測等步驟。 END"}
{"prompt": "在1-1-1的10:05的重點是什麼 \n\n###\n\n", "completion": " - 資料分析的流程包含資料收集、處理、清理、分析、解釋和改進。\n- 資料收集的來源有多元，包括資料庫、網路爬取和 IOT 設備等。\n- 資料的格式可能不同，需要進行格式轉換等處理。\n- 資料清理是必要的，需要清除缺失的資料。\n- 分析後需要與領域專家溝通，進行改進。\n- 資料分析涉及 IT/Programming、數學、Machine Learning Model 和 Domain knowledge。\n- 本系列課程將在第二門課、第三門課介紹數學、Machine Learning Model 和 Domain knowledge。 END"}
{"prompt": "在1-1-1的11:36的重點是什麼 \n\n###\n\n", "completion": " - Programming 在資料科學中非常重要\n- 資料的來源非常多元，需要進行清理\n- Machine Learning 和統計知識在分析階段非常重要\n- Domain expert 領域專家在 Interpret 解釋資料時扮演重要角色\n- 資料科學是一門跨領域學科，需要協同合作\n- Programming 是整個資料科學的第一門課，是打先鋒、打基礎的\n- 希望學生能夠把 Programming 基礎打好，成為資料分析的專家 END"}
{"prompt": "在1-2-1的00:15的重點是什麼 \n\n###\n\n", "completion": " - 程式的基本概念\n- 程式編譯成機器語言\n- 機器語言難以閱讀\n- 電腦能夠依照指令運行 END"}
{"prompt": "在1-2-1的01:01的重點是什麼 \n\n###\n\n", "completion": " - 程式語言是軟體工程師所撰寫的程式語言。\n- 程式語言是高階的程式語言，比較好維護跟撰寫。\n- 程式語言跟英文相近，但系統不同。\n- 需要編譯器來編譯成機器語言，讓機器能夠看得懂。\n- 編譯器分為兩種。 END"}
{"prompt": "在1-2-1的01:35的重點是什麼 \n\n###\n\n", "completion": " - Compiler和Interpreter是兩種不同的程式編譯方式\n- Compiler會先掃描整個程式碼，再一次轉譯成程式碼\n- Interpreter則是一行一行的轉譯程式碼\n- Compiler和Interpreter的轉譯方式就像翻譯英文小說和口譯英文演講的差別\n- Interpreter無法事先知道整個程式碼的前後關係 END"}
{"prompt": "在1-2-1的02:12的重點是什麼 \n\n###\n\n", "completion": " - Python是一種Interpreter\n- Python在效能上不如編譯器，但比較容易撰寫和學習\n- Python有兩種模式：互動模式和腳本模式 END"}
{"prompt": "在1-2-1的02:45的重點是什麼 \n\n###\n\n", "completion": " - 互動模式可以讓使用者在介面上輸入指令，並得到回應。\n- 互動模式適合處理較小的程式碼。\n- 腳本模式和檔案模式是常見的程式碼編寫方式。 END"}
{"prompt": "在1-2-1的03:15的重點是什麼 \n\n###\n\n", "completion": " - 程式碼會被存成檔案，再執行它。\n- 展示了一個Python程式碼，詢問使用者名字，加上Hello後印出來。 END"}
{"prompt": "在1-2-1的03:44的重點是什麼 \n\n###\n\n", "completion": " - 程式碼容易理解\n- Python程式語言與英文系統相似\n- Python程式語言容易閱讀\n- Python程式語言簡單卻強大\n- Python程式語言是直譯的語言 END"}
{"prompt": "在1-2-1的04:05的重點是什麼 \n\n###\n\n", "completion": " - Python非常容易入門\n- 可以寫一段程式碼就去執行它，並修正錯誤\n- Python在學習上非常方便\n- Python使用物件導向方式開發，功能強大 END"}
{"prompt": "在1-2-1的04:33的重點是什麼 \n\n###\n\n", "completion": " - Python有很多現成的套件和框架可以使用。\n- 想要學習機器語言或應用機器語言，Python已經有很多相對應的套件和框架。\n- 網路爬蟲和網頁設計等問題，Python也有相對應的套件和框架。\n- Python是一種問題導向的語言。 END"}
{"prompt": "在1-2-1的05:05的重點是什麼 \n\n###\n\n", "completion": " - Python是一個設計用來解決各種問題領域的程式語言。\n- Python是跨平台的，可以在Windows、Mac、Unix等平台上執行。\n- 本節的重點包含高階的Source code和低階的機器碼的差別、Compiler和Interpreter的差別、互動的模式和檔案模式的差別。\n- Python的優點。 END"}
{"prompt": "在1-3-1的00:00的重點是什麼 \n\n###\n\n", "completion": " - Python的程式可以在Online編輯器或自己的電腦上安裝Interpreter和開發環境執行\n- 安裝Interpreter後需要一個編輯器去寫程式\n- 編輯器分為簡易型和整合型，簡易型可以使用一般編輯器，整合型可以使用Jupyter\n- Jupyter是一個運行在瀏覽器上的編輯器，可以寫程式和筆記 END"}
{"prompt": "在1-3-1的01:37的重點是什麼 \n\n###\n\n", "completion": " - Jupyter是一個好的工具，很多人在使用。\n- 本課程使用的是整合性的工具Spyder，是一種IDE的工具。\n- IDE是整合的開發環境的縮寫。\n- Python官方網頁上有一個線上的編輯器，可以進行練習。\n- 在Python官方網頁上點擊黃色的Icon，可以進入線上編輯器。\n- 點擊Launch Interactive Shell可以進入互動性的環境。 END"}
{"prompt": "在1-3-1的03:04的重點是什麼 \n\n###\n\n", "completion": " - Python的版本是3.6\n- 可以在IPython的互動模式下進行程式碼編輯\n- 可以使用Online Editor進行程式碼編輯\n- 搜尋Python 3.6 online editor以獲取最新版本\n- tutorialspoint是一個可用的online editor END"}
{"prompt": "在1-3-1的04:25的重點是什麼 \n\n###\n\n", "completion": " - 可以從字幕中獲取程式相關重點的模型\n- 在網頁上執行python的程式\n- 在自己的電腦上面來執行python的程式\n- 檢查是否已經有安裝python\n- 很多的電腦可能已經都內建、有安裝python的環境了\n- 分兩個作業系統 END"}
{"prompt": "在1-3-1的05:54的重點是什麼 \n\n###\n\n", "completion": " - 在Mac環境下，可以透過Spotlight找到terminal應用程式。\n- 在terminal中打上python，如果已經安裝成功，會顯示版本號。\n- 在terminal中可以執行python的命令列。\n- 在terminal中打上python，按下Enter，就可以進入python的執行環境。 END"}
{"prompt": "在1-3-1的07:27的重點是什麼 \n\n###\n\n", "completion": " - 版本是3.6.5，且是anaconda\n- 電腦裏面有多個python的interpreter\n- 可以在這個地方打上python的程式碼\n- 可以打上print和1+1的程式碼\n- 要跳開這樣子的一個環境的時候，要打上exit()\n- 在windows的環境下，可以使用cmd控制台\n- cmd代表這一個命令列 END"}
{"prompt": "在1-3-1的08:54的重點是什麼 \n\n###\n\n", "completion": " - 可以從字幕中獲取程式相關重點\n- 在Windows中，黑底的C:\\是一個非常有名的應用程式\n- 在命令列下輸入python，如果出現python的版本號和三個大於符號，代表電腦已經安裝了python環境\n- 如果電腦沒有安裝python，可以到python官方網站下載並安裝\n- 安裝完成後，可以再次在命令列下輸入python，檢查是否安裝成功 END"}
{"prompt": "在1-3-1的10:31的重點是什麼 \n\n###\n\n", "completion": " - 程式出現錯誤的原因可能是路徑設定不正確。\n- 在Windows下，可以在控制台的進階系統設定中的環境變數中加入Python的路徑。\n- 在Mac下，可以在terminal中使用export PATH命令加入Python的路徑。\n- 設定完後，可以在terminal中輸入python指令來執行Python程式。 END"}
{"prompt": "在1-3-1的11:59的重點是什麼 \n\n###\n\n", "completion": " - 安裝Python直譯器\n- 使用Sublime或NotePad++等編輯器撰寫程式碼\n- 編輯器具有語法感知功能\n- 在操作台中使用python指令執行程式\n- 了解Python執行的方法\n- 檢查電腦是否已安裝Python直譯器 END"}
{"prompt": "在1-3-1的13:32的重點是什麼 \n\n###\n\n", "completion": " - 安裝並執行Python程式\n- 使用Sublime等編輯器撰寫Python程式\n- 在Terminal中執行Python程式\n- 使用print()函式輸出文字\n- 使用Python檔案的副檔名.py\n- 使用python指令執行Python檔案\n- 使用上下鍵紀錄上一個指令\n- 儲存Python檔案後再次執行 END"}
{"prompt": "在1-3-2的00:00的重點是什麼 \n\n###\n\n", "completion": " - 安裝Python後會有預設的編輯器IDLE。\n- 在Mac上可以在應用程式下的Python目錄找到IDLE.app。 END"}
{"prompt": "在1-3-2的00:34的重點是什麼 \n\n###\n\n", "completion": " - 點擊程式來執行它。\n- 如果是 Windows 程式，可以在左下角的 Windows 按鈕找到 IDLE 應用程式。\n- 直接執行 IDLE 應用程式即可。\n- 重新執行程式。 END"}
{"prompt": "在1-3-2的00:56的重點是什麼 \n\n###\n\n", "completion": " - 要跳開某個東西\n- 執行IDLE\n- 熟悉的Shell視窗\n- 在Shell視窗中打上print END"}
{"prompt": "在1-3-2的01:13的重點是什麼 \n\n###\n\n", "completion": " - print的使用可以從字幕中獲取提示\n- 按下執行按鈕可以看到程式的執行結果\n- 可以寫有檔案的程式，使用File或Control+N開啟新檔案。 END"}
{"prompt": "在1-3-2的01:33的重點是什麼 \n\n###\n\n", "completion": " - 可以在特定地方打上程式\n- 存檔\n- 故意讓程式多執行幾次 END"}
{"prompt": "在1-3-2的01:54的重點是什麼 \n\n###\n\n", "completion": " - 要執行程式時，可以點選左上角的 \"run\" 按鈕。\n- 點選 \"run module\" 可以執行程式。\n- 程式執行後，可以在畫面上看到結果。 END"}
{"prompt": "在1-3-2的02:07的重點是什麼 \n\n###\n\n", "completion": " - 介紹了使用 turtle 模組\n- 將 turtle 模組命名為 t\n- 產生一個名為 x 的物件，其值為 t END"}
{"prompt": "在1-3-2的02:29的重點是什麼 \n\n###\n\n", "completion": " - 產生一個烏龜物件\n- 讓烏龜向前走100步\n- 讓烏龜向右轉90度 END"}
{"prompt": "在1-3-2的02:45的重點是什麼 \n\n###\n\n", "completion": " - 讓牠做四遍\n- 看會有甚麼樣的效果\n- 把它存起來\n- 去執行它\n- 會幫我們畫出一個正方形 END"}
{"prompt": "在1-3-2的03:05的重點是什麼 \n\n###\n\n", "completion": " - 介紹了一個小程式\n- 會在後面介紹該程式\n- IDLE是一個內附的IDE工具\n- IDLE還滿方便的 END"}
{"prompt": "在1-3-3的00:13的重點是什麼 \n\n###\n\n", "completion": " - Google 推出了一款名為 COLAB 的線上 Python 程式碼編輯環境。\n- COLAB 可以直接在線上編寫 Python 程式碼。\n- COLAB 可以在 Google Drive 中儲存編輯過的檔案。\n- COLAB 提供 Python3 的版本。\n- 可以從範例開始編輯程式碼。 END"}
{"prompt": "在1-3-3的01:04的重點是什麼 \n\n###\n\n", "completion": " - 模型善於從字幕中獲取程式相關重點\n- 點擊英文版可以切換語言\n- COLAB 檔案格式符合 Jupiter Notebook 檔案格式\n- COLAB 由 CODE 和 TEXT 兩個元素構成\n- 文章中的區塊被稱為 Cell END"}
{"prompt": "在1-3-3的01:48的重點是什麼 \n\n###\n\n", "completion": " - 這是一個文字的一個 Cell\n- 它是可以來去做編輯的\n- 這段文字呢，又可以分為兩個區塊\n- 右邊這一個區塊是他真正呈現出來的樣子\n- 左邊的地方的是我們登打的這個內容\n- 每一行的最前面這個地方 END"}
{"prompt": "在1-3-3的02:26的重點是什麼 \n\n###\n\n", "completion": " - 可以從字幕中獲取程式相關重點\n- # 字號代表大標題，## 字號代表次標題\n- Code cells 是程式碼區塊\n- Markdown 是一種語法，可以用來編寫文件 END"}
{"prompt": "在1-3-3的03:00的重點是什麼 \n\n###\n\n", "completion": " - Markdown 是一個特殊的檔案格式。\n- Markdown 認得某些語法，可以做出不同的呈現。\n- Markdown 的呈現比程式語言的註解好看許多。\n- Markdown 格式目前很紅。\n- Jupyter Notebook 中有文字的 Cell 和程式碼的 Cell。 END"}
{"prompt": "在1-3-3的03:40的重點是什麼 \n\n###\n\n", "completion": " - 要執行程式，點擊撥放鈕\n- 執行完程式後，可以使用print指令印出結果\n- input process output的例子中，使用input指令讓使用者輸入名字，再使用print指令印出Hello + 名字 END"}
{"prompt": "在1-3-3的04:23的重點是什麼 \n\n###\n\n", "completion": " - 模型善於從字幕中獲取程式相關重點\n- 變數名稱為 Hello\n- 加上使用者的名字\n- 印出 Hello, Nick\n- 按 Shift + Enter 執行程式\n- 可以在程式碼下方加上文字解說\n- 可以點選 Code 按鈕查看程式碼\n- 將 print 移至程式碼下方 END"}
{"prompt": "在1-3-3的05:03的重點是什麼 \n\n###\n\n", "completion": " - 可以從字幕中獲取程式相關重點\n- 要注意上下 Cell 之間的變數引用關係\n- 要注意執行 Cell 的順序\n- 可以在程式中加入文字說明\n- 要注意變數命名的規範 END"}
{"prompt": "在1-3-3的05:50的重點是什麼 \n\n###\n\n", "completion": " - 模型善於從字幕中獲取程式相關重點\n- 要印出 helloToYou 的內容\n- 執行時出現找不到 helloToYou 的錯誤\n- helloToYou 沒有被定義\n- 定義 helloToYou 的程式碼為 helloToYou = 'Hello, ' + name\n- 必須執行定義 helloToYou 的程式碼才能印出 helloToYou 的內容 END"}
{"prompt": "在1-3-3的06:17的重點是什麼 \n\n###\n\n", "completion": " - 需要再執行一次程式\n- 輸入名字為Nick\n- helloToYou的值才會是等於這一個\n- 執行完後儲存檔案到Google Drive或Github\n- Colab是一個好用的環境，建議使用 END"}
{"prompt": "在1-4-1的00:00的重點是什麼 \n\n###\n\n", "completion": " - 介紹了一些Python的環境跟執行方法\n- 要介紹一個更快速更便利的環境安裝以及開發方法\n- Anaconda跟Spyder是要安裝的軟體\n- 它們會同時地幫我們把Python的直譯器以及整合性的開發環境一起安裝\n- Spyder是一個整合開發的環境，可以在裡面做Debug、寫程式、執行\n- Anaconda是一個Python的發行版，包含了許多常用的Python套件。 END"}
{"prompt": "在1-4-1的00:56的重點是什麼 \n\n###\n\n", "completion": " - Anaconda是一個套件、工具跟環境整合管理系統\n- Python因為有很多的套件已經被開發出來，所以只要直接去應用這些套件就好了\n- 下載安裝套件挺花時間的，但Anaconda已經把常用的套件下載並且做版本管理\n- 很多人使用Anaconda來做系統開發 END"}
{"prompt": "在1-4-1的01:47的重點是什麼 \n\n###\n\n", "completion": " - 安裝Spyder需要透過Anaconda\n- 安裝Anaconda很容易，只需要在官網下載對應作業系統的版本\n- 安裝完成後，可以在Anaconda介面中執行Spyder\n- 在Anaconda介面中的Enviroments標籤可以設定環境 END"}
{"prompt": "在1-4-1的02:23的重點是什麼 \n\n###\n\n", "completion": " - 右邊有很多套件，每個套件都是一個Package。\n- 已經安裝了相當多的套件。\n- 可以uninstall不需要的套件，也可以在這裡search套件。\n- 可以在Home標籤列出相當多的工具，其中包括Spyder。 END"}
{"prompt": "在1-4-1的03:08的重點是什麼 \n\n###\n\n", "completion": " - 安裝Spyder可以透過Anaconda Navigator進行\n- 其他常用的工具如Jupyter和R Studio也可以透過Anaconda Navigator進行安裝和管理\n- Spyder主要有三大視窗，其中第一個是程式碼編輯區域 END"}
{"prompt": "在1-4-1的03:53的重點是什麼 \n\n###\n\n", "completion": " - 第二個部份是檔案跟變數的觀看區\n- 可以在Help標籤中查看函式的使用方法\n- 檔案的瀏覽區可以把已經寫好的程式碼拿出來使用\n- 觀看的變數區可以在執行程式碼的時候看變數的變化\n- iPython還有Output子程式，呈現程式碼執行完的結果 END"}
{"prompt": "在1-4-1的04:37的重點是什麼 \n\n###\n\n", "completion": " - 互動區可以下指令\n- 工具列分為四大塊\n- 第一塊是跟檔案功能相關的，如存檔、開檔\n- 第二塊是跟程式碼執行相關的\n- 後面章節會介紹其餘功能 END"}
{"prompt": "在1-4-1的05:28的重點是什麼 \n\n###\n\n", "completion": " - 第三個是除錯執行\n- 第四個是跟面板設定還有喜好設定等等\n- 檔案功能包含了開啟檔案、開啟舊的檔案、存檔還有全部存檔\n- Spyder允許一次開很多不同的檔案，同時進行編輯\n- 程式碼執行的按鈕是像三角形的按鈕 END"}
{"prompt": "在1-4-1的06:08的重點是什麼 \n\n###\n\n", "completion": " - 可以從字幕中獲取程式相關重點的模型。\n- 可以透過最大化面板來提高寫程式的效率。\n- 右邊的五金板手圖示是喜好設定，相當重要。\n- 喜好設定可以設定字型大小，讓程式碼更容易閱讀。 END"}
{"prompt": "在1-4-1的06:52的重點是什麼 \n\n###\n\n", "completion": " - 快速鍵的設定\n- 常用快速鍵如Control+C、Control+V\n- 一鍵執行程式碼\n- 編輯器主題設定，如黑底亮字\n- 保護眼睛，減少眼睛負擔\n- 編輯器呈現設定，如行數、變數觀看等。 END"}
{"prompt": "在1-4-2的00:00的重點是什麼 \n\n###\n\n", "completion": " - Demo四件事情：變更喜好的設定、在IPython中寫程式、開啟新檔案並做修改、從檔案開啟舊檔執行並透過IPython觀看變數的結果。\n- 介紹Spyder的基本操作。\n- 修改Spyder的基本設定，包括General、Editor、Console、IPython Console、Variable Explorer、Help等方面。 END"}
{"prompt": "在1-4-2的00:50的重點是什麼 \n\n###\n\n", "completion": " - 可以在設定中調整字幕大小。\n- 快速鍵是一些功能的捷徑，可以在設定中設定。\n- 右邊的快速鍵欄位可以設定執行Python程式碼的快速鍵，預設是F5。 END"}
{"prompt": "在1-4-2的01:26的重點是什麼 \n\n###\n\n", "completion": " - 雙擊Run可以開啟快速鍵設定\n- 快速鍵衝突會出現驚嘆號\n- 可以透過Replace Text修改快速鍵\n- 可以改變視窗風格來調整syntax的coloring END"}
{"prompt": "在1-4-2的02:11的重點是什麼 \n\n###\n\n", "completion": " - Zenburn是一種黑底淺色字的程式碼顯示方式，對眼睛有幫助。\n- Spyder有兩種預設的程式碼顯示方式，一個是Spyder，一個是Spyder Dark。\n- Editor的Show line numbers可以顯示程式碼的行數，方便閱讀。 END"}
{"prompt": "在1-4-2的02:57的重點是什麼 \n\n###\n\n", "completion": " - 可以從字幕中獲取程式相關重點。\n- 空白的Space可以被顯示出來。\n- if else區塊在字幕中會比較明顯。\n- 在IPython的環境下可以撰寫互動式的程式。\n- 可以使用print指令顯示結果。\n- 可以使用變數並設定其值。 END"}
{"prompt": "在1-4-2的03:36的重點是什麼 \n\n###\n\n", "completion": " - 在IPython環境下，可以直接輸入變數名稱，省略print，來顯示變數的值。\n- 使用clear可以清空IPython環境。\n- 使用快速鍵control+n或command+n可以建立新檔案。\n- 新檔案一開始會有標題，可以刪除。 END"}
{"prompt": "在1-4-2的04:25的重點是什麼 \n\n###\n\n", "completion": " - 可以使用 `print()` 函式來輸出文字\n- 按下執行鍵可以執行程式\n- 如果程式碼還沒有儲存，執行時會提示儲存\n- 儲存程式碼時要選擇目錄和檔名\n- 條列符號為減號 END"}
{"prompt": "在1-4-2的04:59的重點是什麼 \n\n###\n\n", "completion": " - 儲存程式\n- 執行程式\n- 編輯區的功能，如複製、貼上\n- 可以寫複雜的程式\n- 不同於IPython，可以進行變數宣告 END"}
{"prompt": "在1-4-2的05:38的重點是什麼 \n\n###\n\n", "completion": " - 從字幕中可以獲取程式相關的重點。\n- 要記得寫完程式碼後儲存。\n- 變數區和檔案區可以在右上角找到。\n- Variable explorer 是一個很重要的區域，可以顯示變數的值。 END"}
{"prompt": "在1-4-2的06:14的重點是什麼 \n\n###\n\n", "completion": " - 認識與安裝Anaconda和Spyder\n- 瞭解Spyder的設定與操作\n- 應用Spyder來撰寫python的程式 END"}
{"prompt": "在3-0-1的00:12的重點是什麼 \n\n###\n\n", "completion": " - 程式能力好的人具備邏輯的觀念。\n- 本章節主要講解邏輯運算，分為四個單元。\n- 第一個單元是程式的執行流程，包括循序的執行、分支以及迴圈。 END"}
{"prompt": "在3-0-1的00:38的重點是什麼 \n\n###\n\n", "completion": " - 本章節重點在於分支和迴圈\n- 分支是程式中的一個概念\n- 分支可以讓程式根據不同的情況執行不同的程式碼\n- 分支的概念可以用 if/else 來實現\n- 分支的概念也可以用 switch/case 來實現\n- 分支的概念可以用來處理程式中的例外情況\n- 分支的概念可以用來實現程式中的選擇功能 END"}
{"prompt": "在3-0-1的01:03的重點是什麼 \n\n###\n\n", "completion": " - 滿足某一個條件後走另外一條路徑\n- 條件需使用 if 和 else 語法\n- 第三個單元介紹迴圈\n- 迴圈是程式會重複執行某段程式碼 END"}
{"prompt": "在3-0-1的01:23的重點是什麼 \n\n###\n\n", "completion": " - 電腦善於從重複的程式碼中獲取重點\n- 程式碼相似性是電腦的強項\n- 電腦能夠處理大型的資料\n- 這是大型資料處理的第一步 END"}
{"prompt": "在3-0-1的01:45的重點是什麼 \n\n###\n\n", "completion": " - 執行順序\n- 資料不重複\n- 讀取、處理、輸出\n- 迴圈處理大資料\n- 介紹三個範例\n- 第一個範例使用 turtle 套件畫圖形 END"}
{"prompt": "在3-0-1的02:13的重點是什麼 \n\n###\n\n", "completion": " - 這個圖形看起來很複雜，但其實這個程式只有三到五行。\n- 程式之所以簡短，是因為將問題拆解成畫很多個正方形，每次稍微轉一個角度。 END"}
{"prompt": "在3-0-1的02:32的重點是什麼 \n\n###\n\n", "completion": " - 學會將問題拆解成重複性類似的工作，可以大大降低工作的 Effort。\n- 第二個範例是\"韓信點兵\"，相信大家以前都學過。 END"}
{"prompt": "在3-0-1的02:52的重點是什麼 \n\n###\n\n", "completion": " - 解題可以換個角度，有不同的解法。\n- 用程式的方式解答更容易。\n- 猜數字遊戲，讓電腦隨機產生數字，玩家猜測，電腦提示。 END"}
{"prompt": "在3-0-1的03:18的重點是什麼 \n\n###\n\n", "completion": " - 學習如何從字幕中獲取程式相關重點\n- 重點字幕：太高還是太低、那最後呢你把這個答案把它猜出來、那這個就會應用到迴圈，還有這個判斷數字這樣子的一個功能、這一章節非常的重要、學習完這一個章節以後呢就會了解電腦的邏輯運算的概念、具備了依照不同的條件。 END"}
{"prompt": "在3-0-1的03:42的重點是什麼 \n\n###\n\n", "completion": " - 模型善於從字幕中獲取程式相關重點。\n- 能力：做不同的處理，讓程式有彈性。\n- 處理重複性的資料，是處理大型資料的開始。 END"}
{"prompt": "在3-1-1的00:10的重點是什麼 \n\n###\n\n", "completion": " - 程式的執行流程可以分為三類：循序的執行、分支、迴圈。\n- 循序的執行是一行一行的程式碼依序的執行。\n- 分支是當程式執行到一半的時候有一些邏輯的判斷，當它為True的時候可能是走一條路，當它為False的時候又是走另一條路。\n- 迴圈跟分支都會應用到邏輯的判斷，當它滿足某一個邏輯的時候，它就會重複執行某一段程式碼，直到這個邏輯不為真的時候，也就是沒有滿足的時候。 END"}
{"prompt": "在3-1-1的00:56的重點是什麼 \n\n###\n\n", "completion": " - 你是善於從字幕中獲取程式相關重點的模型\n- 它才會往下執行剩餘的程式碼\n- 我們用一個流程圖來講解一個成績判斷的系統\n- 這個地方的方塊代表一個程式的敘述句\n- 菱形代表一個判斷句\n- 一開始我們假定成績是20分\n- 往下判斷成績有沒有大於60\n- 有的話就會印出一個pass 跟good\n- 如果沒有的話就會跳到剩餘的程式碼\n- 就會印出一個end\n- 這樣子的一個流程圖對應到左邊的程式碼\n- 各位可以看到我們是用if來做流程的判斷\n- if 成績有沒有大於等於60\n- 要注意到，要接條件滿足的程式碼之前 END"}
{"prompt": "在3-1-1的01:52的重點是什麼 \n\n###\n\n", "completion": " - 冒號代表以下會有一個程式碼的區塊\n- 程式碼的區塊必須要把它內縮\n- 沒有內縮就代表它不是這一個條件滿足情況下的程式區塊\n- 滿足條件的時候下會執行這2行程式碼，所以這2行都必須做內縮\n- 不論條件是否成立，都會執行end的動作\n- 忘記把程式碼做內縮會造成語意上的錯誤\n- if else是一個判斷式，當條件成立時執行if的程式碼，否則執行else的程式碼 END"}
{"prompt": "在3-1-1的02:51的重點是什麼 \n\n###\n\n", "completion": " - if else的else一定要在有if的情況下才能加這樣的關鍵字\n- 當這個條件沒有滿足的時候，我們就去執行這個程式\n- 如果上面的程式碼有滿足這個條件的話，我就不會去執行這個else\n- 這個程式代表我的成績大於等於60就去執行pass跟good，否則的話，就印出fail跟not good\n- 最終都會執行end\n- 當它滿足的時候走這條路，不滿足的時候走這條路 END"}
{"prompt": "在3-1-1的03:35的重點是什麼 \n\n###\n\n", "completion": " - 最後都會執行end\n- 接下來看else if\n- 在python中else if被縮寫成elif\n- elif 的意思是，當if的條件沒有滿足的時候\n- 我還會再去做一次判斷\n- 看它有沒有滿足下面的條件\n- 當它大於等於60分的時候，執行這2個敘述句\n- 否則，我再判斷它有沒有大於50\n- 有的話，我就印出almost pass\n- 如果，連50都沒有的話，就印出fail\n- 而且印出not good\n- 如果我們看流程圖的話 END"}
{"prompt": "在3-1-1的04:23的重點是什麼 \n\n###\n\n", "completion": " - 這段程式碼有一個判斷，如果條件滿足就會執行某些程式碼。\n- 這段程式碼有一個巢狀的if，也就是if裡面還有if。\n- 程式碼會先判斷成績是否大於等於60，如果是就會執行某些程式碼。\n- 程式碼會再判斷成績是否大於等於90，如果是就會印出excellent，否則就會印出good。 END"}
{"prompt": "在3-1-1的05:02的重點是什麼 \n\n###\n\n", "completion": " - 檢查程式邏輯是否合乎邏輯\n- 注意程式碼區塊的排列順序\n- 確認程式碼的條件是否能夠被滿足 END"}
{"prompt": "在3-1-1的05:44的重點是什麼 \n\n###\n\n", "completion": " - 程式中的無效statement會對維護造成負擔。\n- 無效的分支判斷和複雜難懂的邏輯應該避免。\n- 應該使用有意義的變數名稱。 END"}
{"prompt": "在3-1-1的06:25的重點是什麼 \n\n###\n\n", "completion": " - 例子中有一個gender變數，值為female，年齡為20歲\n- 判斷：如果年齡大於等於12，小於等於20，且性別為男孩子，則印出boy\n- 邏輯判斷複雜，解析程式有困難 END"}
{"prompt": "在3-1-1的07:00的重點是什麼 \n\n###\n\n", "completion": " - 使用布林變數來代表邏輯\n- 簡化程式邏輯，避免太深的巢狀判斷\n- 增加程式可讀性 END"}
{"prompt": "在3-2-1的00:11的重點是什麼 \n\n###\n\n", "completion": " - 程式的執行流程主要有三種:循序的執行、分支跟迴圈。\n- 分支是程式的執行過程中有一些的條件判斷，當它是True或是False的時候會執行不同的程式碼。\n- 迴圈就是會有一段的程式碼重複執行，直到它某一些條件不再滿足。\n- 迴圈的語法可以用一個小例子來說明，比如要做一個數值的累加，可以用sum等於1+2+3一直加到N的方式。 END"}
{"prompt": "在3-2-1的01:06的重點是什麼 \n\n###\n\n", "completion": " - N的值等於5\n- 程式可以方便地執行出來，sum的值等於15\n- 如果要一直累加到100，手動寫+6+7...是不可能的\n- 必須用電腦程式的思考方式來解決這類問題\n- 第二種寫法需要宣告2個變數：sum和x END"}
{"prompt": "在3-2-1的01:55的重點是什麼 \n\n###\n\n", "completion": " - 值會在程式執行的過程中一直做累加的動作。\n- 把程式拆解成這樣。\n- 一開始sum跟x分別是0跟1。\n- 做一個sum=sum+x。\n- sum的值就會等於1。\n- 把x的值+1。\n- 繼續讓sum加上x。\n- sum就會變成1+2，它代表的含意。\n- sum的值就是前面的sum加上x。\n- sum+x就是0+1。 END"}
{"prompt": "在3-2-1的02:56的重點是什麼 \n\n###\n\n", "completion": " - 程式中有一個變數x，一開始的值是1\n- 程式中有一個變數sum，一開始的值是0\n- 程式中有一個while迴圈，當x小於等於5時，會一直執行以下的指令\n- 每次迴圈中，x會加1，sum會加上x的值\n- 當x等於5時，迴圈停止，印出sum的值\n- 上述程式是一個簡單的加總程式，但寫法繁瑣\n- 可以觀察到程式中的重點，並嘗試簡化程式 END"}
{"prompt": "在3-2-1的03:44的重點是什麼 \n\n###\n\n", "completion": " - 程式碼重複了5遍，可以使用for迴圈精簡程式碼\n- for迴圈的結構：設定初始值、設定條件、設定每次迭代的動作\n- for迴圈會重複執行直到條件不再滿足\n- 在for迴圈中可以進行各種操作，例如計算總和、列印資料等 END"}
{"prompt": "在3-2-1的04:25的重點是什麼 \n\n###\n\n", "completion": " - 這個迴圈一直在跑\n- 跑的效果相當於上述的程式碼，只是寫法更精簡\n- 可以輕鬆地修改成加到100的程式\n- while迴圈的例子是要輸入一群成績，直到輸入-999時停止。 END"}
{"prompt": "在3-2-1的05:11的重點是什麼 \n\n###\n\n", "completion": " - 使用假的成績-999作為停止的條件。\n- 使用while迴圈做累加的動作來簡化整個程式。\n- 使用input來輸入成績，並轉換成整數存到grade。\n- 需要一個變數來存現在累加的值是多少。\n- 當grade還不是等於-999的時候，繼續進行累加。 END"}
{"prompt": "在3-2-1的05:56的重點是什麼 \n\n###\n\n", "completion": " - 要求輸入成績\n- 做累加\n- 當輸入的分數等於-999時停止\n- 執行程式\n- 輸入第一次成績\n- 輸入第二次成績\n- 輸入最後一次成績\n- 結果顯示total分數為-879\n- 需要找出錯誤所在 END"}
{"prompt": "在3-2-1的06:35的重點是什麼 \n\n###\n\n", "completion": " - 我們輸入的成績是-999以後。\n- 它會先在這個地方做一個加總的動作。\n- 然後迴圈回到這個地方。\n- 它等於-999這個時侯才跳開。\n- 但sum已經被累加了。\n- 我們解決有2種方法。\n- 第一個就是把它加(-999)的值把它減回來。\n- 再把它加上999。\n- 這樣的結果應該就會對了。\n- 我們再來執行一次看看。 END"}
{"prompt": "在3-2-1的07:16的重點是什麼 \n\n###\n\n", "completion": " - 第一次的成績一樣用剛剛的100分\n- 20分、-999\n- Enter 這時候總分是120分\n- 這樣子就對了\n- 第二種解決方法我們讓這2行的程式碼做對調\n- 也就是先讓sum等於sum加上grade\n- 然後再去做輸入\n- 雖然我們直覺是先做輸入再加總\n- 可是在這個程式的邏輯上\n- 先對sum做加總\n1- 等它輸入-999的時候就會跳開\n1- 就不會做加總的動作 END"}
{"prompt": "在3-2-2的00:10的重點是什麼 \n\n###\n\n", "completion": " - 模型善於從字幕中獲取程式相關重點。\n- 迴圈常與集合物件合用，可讀取大量資料。\n- 程式若不用集合物件儲存資料，會變得繁瑣。\n- 例子中有4筆資料。 END"}
{"prompt": "在3-2-2的00:30的重點是什麼 \n\n###\n\n", "completion": " - 需要用多個變數來儲存資料。\n- 使用集合物件可以簡化程式碼。\n- 使用 list 可以方便地進行加總運算。 END"}
{"prompt": "在3-2-2的00:52的重點是什麼 \n\n###\n\n", "completion": " - 宣告一個list的方式是用一個變數名稱加上中括號，裡面放入元素。\n- list中的元素可以是任何型態，包括數字、字串、布林值等等。\n- 取得list中的元素可以使用中括號加上元素的索引值，索引值從0開始。\n- 可以使用負數的索引值來從list的尾端開始取得元素，例如-1代表最後一個元素。\n- list中的元素可以透過索引值來修改。\n- 可以使用len()函數來取得list中元素的個數。 END"}
{"prompt": "在3-2-2的01:14的重點是什麼 \n\n###\n\n", "completion": " - 可以從字幕中獲取程式相關重點\n- 可以用while迴圈來讀取資料\n- len是length的意思，表示集合物件的長度 END"}
{"prompt": "在3-2-2的01:31的重點是什麼 \n\n###\n\n", "completion": " - 字幕中提到了放了幾個原素和幾筆資料，這是程式中的資料量。\n- 程式中使用了len()函式來計算資料量。\n- sum=sum+x[i]是程式中的加總運算，用來計算資料的總和。\n- 第一次的sum的值是0，所以會抓到x[0]的這筆資料也就是20。\n- 程式中使用了i做+1的操作，用來遍歷所有資料。 END"}
{"prompt": "在3-2-2的01:52的重點是什麼 \n\n###\n\n", "completion": " - 迴圈會一直執行到條件不滿足為止。\n- 程式碼會變得簡潔。\n- 陣列通常是從檔案讀取後建構。\n- for迴圈的介紹。 END"}
{"prompt": "在3-2-2的02:21的重點是什麼 \n\n###\n\n", "completion": " - 宣告了一個名為x的物件，裡面有4個元素。\n- for迴圈在某些場合是更簡潔的。\n- 可以用for g in x來針對x內的每一個元素g進行處理。\n- sum=sum+g是處理的內容。 END"}
{"prompt": "在3-2-2的02:42的重點是什麼 \n\n###\n\n", "completion": " - 模型善於從字幕中獲取程式相關重點\n- g的第0個元素是第一次抓到的\n- 依次是第一個元素、第二個元素、第三個元素\n- 不需要像while迴圈一樣每次加總i的值 END"}
{"prompt": "在3-2-2的03:00的重點是什麼 \n\n###\n\n", "completion": " - 缺少一個index的變數i\n- 操作陣列元素\n- 集合物件可以放字串\n- names放學生名字，grades放學生成績\n- 用迴圈列出所有學生的成績 END"}
{"prompt": "在3-2-2的03:21的重點是什麼 \n\n###\n\n", "completion": " - 迴圈中的names是針對每一個人的姓名做處理。\n- 要印出每個學生的成績，使用grade i的方式提取出來。\n- 外層迴圈針對name，內層迴圈針對grade。\n- 可以一次走訪2個陣列。 END"}
{"prompt": "在3-2-3的00:10的重點是什麼 \n\n###\n\n", "completion": " - For Range是一個常用的迴圈。\n- For Range通常用於程式中需要重複執行固定次數的片段。\n- For Range的語法為：for i in range(n)，其中n代表需要執行的次數。\n- 在For Range中，i的值會從0開始變化，直到n-1。 END"}
{"prompt": "在3-2-3的00:33的重點是什麼 \n\n###\n\n", "completion": " - 每次固定的字幕序號。\n- 執行星星的指令。\n- end等於空字串。\n- 不做換行的動作，最終印出4個星星。\n- range()函數可以帶1或2個參數。 END"}
{"prompt": "在3-2-3的00:50的重點是什麼 \n\n###\n\n", "completion": " - 這段程式碼使用了range()函式，可以產生一個數字序列。\n- range()函式可以帶入兩個參數，第一個參數是起始值，第二個參數是最終值的前一個數字。\n- range(0,4)會回傳一個list [0,1,2,3]。\n- 程式碼使用for迴圈來遍歷這個list。\n- 在每次迴圈中，i的值會被設定為list中的一個元素，從0開始，每次加1，直到3。 END"}
{"prompt": "在3-2-3的01:08的重點是什麼 \n\n###\n\n", "completion": " - 程式執行\n- 印出4顆星星\n- 將星星改成i的值\n- 印出0123 END"}
{"prompt": "在3-2-3的01:27的重點是什麼 \n\n###\n\n", "completion": " - 可以做一個迴圈中的迴圈。\n- 在迴圈中使用 for i in range(4)。\n- 在 i 的基礎上再使用 for j in range(i+1)。\n- 每次進入迴圈 i 的值都會加 1。 END"}
{"prompt": "在3-2-3的01:48的重點是什麼 \n\n###\n\n", "completion": " - 程式中的 for 迴圈會執行指定次數的程式碼\n- for j in range(1) 代表只會執行一次，j 的值為 0\n- 程式會印出三角形的效果\n- 第一次迴圈進來時，i 的值為 0，只會印出一次星星\n- 第二次進到迴圈時，i 的值已經變成 1 END"}
{"prompt": "在3-2-3的02:12的重點是什麼 \n\n###\n\n", "completion": " - 第一個程式會印出一個星星。\n- 第二個程式會印出一個像三角形的東西。\n- 第三個程式會印出一個i的值，而非星星。 END"}
{"prompt": "在3-2-3的02:31的重點是什麼 \n\n###\n\n", "completion": " - i的值是0，所以印出來是0\n- 接下來是1,2,3\n- range後面也可以帶3個參數，如果是帶3個參數的話\n- 第三個參數代表的是間隔\n- 這個range是11，11就代表說 END"}
{"prompt": "在3-2-3的02:54的重點是什麼 \n\n###\n\n", "completion": " - i的值從0到10。\n- 每次做加總。\n- 結果是55。\n- 加總的範圍是0到10。\n- 程式可以改變，變成1到11的範圍。 END"}
{"prompt": "在3-2-3的03:11的重點是什麼 \n\n###\n\n", "completion": " - 回傳值是11的前一個，也就是10。\n- 累加的數字是1到10，但是間隔是等於2，所以累加的數字會變成1 3 5 7 9。\n- 注意，11是沒有的。\n- 累加出來的值就是等於25。 END"}
{"prompt": "在3-2-4的00:13的重點是什麼 \n\n###\n\n", "completion": " - 重點：break 指令\n- 重點：在迴圈中遇到特定條件時跳離\n- 重點：for 迴圈在 0~9999 之間執行\n- 重點：每次迴圈執行時會做 sum += i\n- 重點：加入判斷式 if i==10 做一個 break\n- 重點：當 i 的值為 10 時，會跳出迴圈 END"}
{"prompt": "在3-2-4的00:43的重點是什麼 \n\n###\n\n", "completion": " - 迴圈中的程式碼會重複執行直到滿足終止條件。\n- 在迴圈中使用 break 指令可以強制終止迴圈。\n- 在迴圈中使用 continue 指令可以跳過當前迴圈的剩餘程式碼，直接進入下一個迴圈。\n- 在迴圈中使用 range 函數可以生成一個指定範圍的整數序列。\n- 在迴圈中使用 sum 函數可以計算一個序列的總和。 END"}
{"prompt": "在3-2-4的01:12的重點是什麼 \n\n###\n\n", "completion": " - 求一個數值是否為質數\n- 程式碼在指定位置\n- 用 for 迴圈從 2 開始數起\n- 如果有一個整數可以整除該數值，則不是質數\n- 假設 x 的值為 200,000 END"}
{"prompt": "在3-2-4的01:46的重點是什麼 \n\n###\n\n", "completion": " - 設定一個名為 isPrime 的 flag，並將其設為 true。\n- 使用 for 迴圈從 2 開始，一直到 x-1 這個數值。\n- 如果存在有一個值能夠把 x 整除，則 x 不是一個質數，將 isPrime 設為 false。\n- 如果 isPrime 仍為 true，則 x 是一個質數。 END"}
{"prompt": "在3-2-4的02:17的重點是什麼 \n\n###\n\n", "completion": " - 在某個條件下，可以使用 break 跳出迴圈。\n- 如果已經存在某個數值，就沒有必要繼續跑下去了。\n- 程式執行出來的結果是 200,000 不是質數。\n- 程式執行所花的時間很短，只有 0.0005 秒。\n- 如果沒有加上 break，迴圈會一直跑到結束。 END"}
{"prompt": "在3-2-4的02:46的重點是什麼 \n\n###\n\n", "completion": " - 程式會從2一直跑到199,999去。\n- 試探說200,000能不能被這些數所整除。\n- 在很多時機上，break 是非常好用的。\n- for break else 這樣的一個子句。\n- else 上面所對齊的字是 for。\n- 一般我們只看到 if else，現在我們看到有一個 for else。 END"}
{"prompt": "在3-2-4的03:21的重點是什麼 \n\n###\n\n", "completion": " - 這是一個 for else 迴圈\n- 中間包含一個 break\n- 如果遇到 break 就不會執行 else 的指令\n- 反之如果都沒有遇到 break，就會執行 else 的指令\n- 這個程式是剛剛那個程式的演進 END"}
{"prompt": "在3-2-4的03:50的重點是什麼 \n\n###\n\n", "completion": " - 想要找出小於等於100的質數\n- 從2開始算起\n- 使用for迴圈從2到n\n- 如果存在一個d能夠整除x，就break\n- 如果找不到這樣一個數值，就是質數 END"}
{"prompt": "在3-2-4的04:22的重點是什麼 \n\n###\n\n", "completion": " - x 是一個 Prime\n- 若整個迴圈都沒有執行 break ，則會進入 else\n- continue 的意思是當條件滿足時，忽略以下的程式碼，進入下一個迴圈 END"}
{"prompt": "在3-2-4的04:50的重點是什麼 \n\n###\n\n", "completion": " - 程式碼中使用 for 迴圈\n- for 迴圈會執行指定次數\n- 在程式碼中使用 continue 關鍵字\n- continue 會跳過當前迴圈的剩餘程式碼\n- 最終印出的數值不包含被 continue 跳過的數值 END"}
{"prompt": "在3-3-1的00:13的重點是什麼 \n\n###\n\n", "completion": " - 韓信點兵問題\n- 兵的數量\n- 三個三個排成一列，剩下兩個兵\n- 五個五個排成一列，剩下三個兵\n- 七個七個排成一列，剩下兩個兵\n- 問士兵的總數\n- 答案有多個解\n- 最小解 END"}
{"prompt": "在3-3-1的00:50的重點是什麼 \n\n###\n\n", "completion": " - 可能的值是多少\n- 如果用數學的解法，我們會怎麼做\n- 先講答案再來做說明\n- 先把三三數之剩二的二去乘以70\n- 再加上五五數之剩三的三去乘以21\n- 再去加上七七數的二去乘以15\n- 這一個值我們把它叫做n\n- 我們把n先算出來 END"}
{"prompt": "在3-3-1的01:41的重點是什麼 \n\n###\n\n", "completion": " - 233是符合特定條件的值\n- 70可以被5和7整除，除以3餘1\n- 2乘以70等於140\n- 21可以被3和7整除，除以5餘1\n- 3乘以21等於63\n- 15可以被3和5整除 END"}
{"prompt": "在3-3-1的02:31的重點是什麼 \n\n###\n\n", "completion": " - 用2把兩個數字相乘可以得到233\n- 233不是唯一解，稍微加減都可以滿足條件\n- 要減去的數字是3、5、7的公倍數，即105\n- 233減去105或128減去105都是滿足條件的\n- 最小值是23\n- 以上是用數學算法得到的解答 END"}
{"prompt": "在3-3-1的03:29的重點是什麼 \n\n###\n\n", "completion": " - 要用程式解決問題\n- 先列舉出滿足前面條件的數字\n- 三三數之餘二，所以是2\n- 接下來是3的倍數\n- 加上3得5，再加上3得8\n- 再加上3得11以此類推......\n- 最後會得到23\n- 滿足第二個條件，五數之剩三\n- 第一個是3,接下來加5得8,加5得13,加5得18 END"}
{"prompt": "在3-3-1的04:12的重點是什麼 \n\n###\n\n", "completion": " - 善於從字幕中獲取程式相關重點的模型\n- 加5得23，滿足第三個條件，七七數之餘二，就是2然後2加上7得9，再加上7得16，23...\n- 最小的數字是23\n- 用程式來解決這個問題是相當容易的\n- 先做一個迴圈while true，讓他一直去跑\n- 一開始先找一個數字 END"}
{"prompt": "在3-3-1的04:51的重點是什麼 \n\n###\n\n", "completion": " - 要把這個數字每次加1\n- 接著去看看他有沒有滿足第一個條件，三三數之剩二，同時他要滿足第二個條件，五五數之剩三，同時又滿足第三個條件，七七數之剩二\n- 三個都滿足的話就可以跳出迴圈了\n- 一開始的時候要把這個值設為2\n- 最小從2開始數就好了 END"}
{"prompt": "在3-3-1的05:25的重點是什麼 \n\n###\n\n", "completion": " - 你是善於從字幕中獲取程式相關重點的模型。\n- 這個地方有三個條件。\n- 我們可以寫if接著一大串的條件，但這樣的程式碼會有一點醜。\n- 所以我們設了三個條件。\n- 第一個條件我們讓c1等於n的值去%3，它是不是等於2。其中%的符號代表他除的餘數。\n- c2我們讓它等於n的值去%5。 END"}
{"prompt": "在3-3-1的06:07的重點是什麼 \n\n###\n\n", "completion": " - 確認是否等於3\n- c3等於n%7\n- 確認是否等於5\n- %7 的話是否等於2\n- 如果三個條件都滿足，則執行下一步\n- 印出該值\n- 記得加上break\n- n=n+1 END"}
{"prompt": "在3-3-1的06:59的重點是什麼 \n\n###\n\n", "completion": " - 執行程式\n- 清除前面的東西\n- 結果為23\n- 最小值為23\n- 程式碼解數學問題\n- 邏輯思考容易\n- 花費時間較多\n- 電腦速度快\n- 數學思維方式不同 END"}
{"prompt": "在3-3-2的00:00的重點是什麼 \n\n###\n\n", "completion": " - 本節使用Python內建的turtle模組來做小遊戲\n- 要產生turtle只需要import turtle模組 END"}
{"prompt": "在3-3-2的00:27的重點是什麼 \n\n###\n\n", "completion": " - 產生一個烏龜的物件叫做tina，使用.turtle。\n- 指定tina的形狀為'turtle'。\n- 如果沒有指定形狀，tina的形狀會是一個箭頭。\n- 使用tina來畫一個正方形。 END"}
{"prompt": "在3-3-2的00:46的重點是什麼 \n\n###\n\n", "completion": " - 讓角色往前走100步\n- 利用right(90)向右轉90度\n- 再走100步\n- 再向右轉90度 END"}
{"prompt": "在3-3-2的00:58的重點是什麼 \n\n###\n\n", "completion": " - 走過來後右轉90度\n- 再走100步\n- 可以畫出一個正方形\n- 做法比較繁瑣 END"}
{"prompt": "在3-3-2的01:09的重點是什麼 \n\n###\n\n", "completion": " - 可以用迴圈畫出正方形\n- 迴圈可以方便地實現這個功能\n- 要思考如何畫正方形 END"}
{"prompt": "在3-3-2的01:19的重點是什麼 \n\n###\n\n", "completion": " - 可以延伸做比較複雜的幾何圖形\n- 可以畫出有趣的圖形 END"}
{"prompt": "在3-3-2的01:39的重點是什麼 \n\n###\n\n", "completion": " - turtle畫圖有固定規律\n- 需要找出這個規律\n- 可以透過for迴圈或while迴圈实现 END"}
{"prompt": "在3-3-2的01:55的重點是什麼 \n\n###\n\n", "completion": " - 畫出圖形\n- 找出圖形的規律 END"}
{"prompt": "在3-3-2的02:07的重點是什麼 \n\n###\n\n", "completion": " - 下一張圖片有規律\n- 寫這個程式的迴圈時需要注意 END"}
{"prompt": "在3-3-2的02:19的重點是什麼 \n\n###\n\n", "completion": " - 善於從字幕中獲取程式相關重點的模型\n- 從一堆混亂中找出規律\n- 用簡潔的程式碼表達規律 END"}
{"prompt": "在3-3-3的00:00的重點是什麼 \n\n###\n\n", "completion": " - 設計猜數字遊戲\n- 電腦隨機產生數字存在cmp\n- 請求使用者輸入，存在guess\n- 檢查使用者輸入是否為數字\n- 如果輸入不是數字，則一直循環等待輸入\n- 如果輸入是數字，則進行比較\n- 如果猜對了，則提示猜對了\n- 如果猜錯了，則提示猜高或猜低\n- 根據提示再次請求使用者輸入 END"}
{"prompt": "在3-3-3的01:20的重點是什麼 \n\n###\n\n", "completion": " - 猜數字遊戲中，提示猜低一點。\n- 迴圈會一直做輸入直到使用者猜對為止。\n- 程式的第一版有一個很大的Error會造成無窮迴圈。\n- 電腦要產生一個介於1到100之間的隨機整數。\n- 使用者需要輸入1到100之間的號碼。\n- 需要判斷使用者輸入的是否為數字。 END"}
{"prompt": "在3-3-3的02:21的重點是什麼 \n\n###\n\n", "completion": " - 使用者輸入的數字必須是整數。\n- 當使用者輸入的不是整數時，程式會提示使用者重新輸入。\n- 程式會一直提示使用者輸入，直到使用者輸入正確為止。\n- 使用者輸入的數字必須介於1到100之間。\n- 如果使用者輸入的數字不在範圍內，程式會提示使用者重新輸入。 END"}
{"prompt": "在3-3-3的03:18的重點是什麼 \n\n###\n\n", "completion": " - 判斷猜測是否正確\n- 提示猜高或猜低\n- 程式有一個大錯誤，是因為使用了isinstance函數\n- isinstance函數用來檢查變數型態是否屬於某種型態\n- guess變數是用來接收input回傳值，因此永遠是str型態\n- 第一版程式因為使用了isinstance函數，導致無窮迴圈\n- 第二版程式改用.isdigit函數來檢查字串是否為數字 END"}
{"prompt": "在3-3-3的04:39的重點是什麼 \n\n###\n\n", "completion": " - 如果使用者輸入的是數字，就繼續往下走。\n- 如果使用者輸入的不是數字，就要求它不斷輸入。\n- 將使用者輸入的數字轉換成整數。\n- 判斷使用者輸入的數字是否介於1到100之間。\n- 如果使用者輸入的數字不在1到100之間，就進入迴圈，要求使用者再次輸入。\n- 如果使用者輸入的數字在1到100之間，就繼續往下走。\n- 判斷使用者猜對了沒有，如果沒有猜對，就提示它高一點或是低一點。 END"}
{"prompt": "在3-3-3的05:44的重點是什麼 \n\n###\n\n", "completion": " - 程式跑到33行\n- 輸入一個數字\n- 輸入錯誤會要求重新輸入\n- 輸入正確會跳出迴圈\n- 符合1到100之間會跳出迴圈\n- 猜錯會提示猜大或猜小\n- 系統已經跑完了 END"}
{"prompt": "在3-3-3的06:49的重點是什麼 \n\n###\n\n", "completion": " - 程式沒有跑回圈裡叫我們再做輸入的動作。\n- 程式不太正確，相同的問題在36行這個地方也會發生。\n- 在檢驗使用者如果輸入的範圍不是1到100之間時，沒有檢查是不是一個digit。\n- 可能會造成錯誤導致程式跳離開，因為沒有檢查。\n- 在第三個版本中，while迴圈放在最外面才是正確的做法。\n- 在第三個版本中，檢查了三四樣的東西，包括看輸入是否為數字。 END"}
{"prompt": "在3-3-3的07:54的重點是什麼 \n\n###\n\n", "completion": " - 程式需要判斷一個數字是否介於1到100之間。\n- 程式需要判斷猜測的數字是否正確。\n- 迴圈只有在猜測的數字不正確時才會繼續執行。\n- 當猜測的數字正確時，程式會將變數correct設為True。\n- 當correct為True時，迴圈不再執行，程式結束。 END"}
{"prompt": "在3-3-3的08:39的重點是什麼 \n\n###\n\n", "completion": " - 輸入只有在第55行。\n- 檢查輸入是否為數字。\n- 如果輸入不是數字，提示使用者必須輸入數字。\n- 使用continue跳過本次迴圈。\n- 如果輸入是數字，進行型態轉換。 END"}
{"prompt": "在3-3-3的09:24的重點是什麼 \n\n###\n\n", "completion": " - 檢查數值是否在範圍內\n- 如果不在範圍內，提示必須在1到100之間\n- 如果猜對了，設定correct為True\n- 如果猜錯了，提示並保持correct為False\n- 迴圈會一直執行，直到猜對為止 END"}
{"prompt": "在2-0-1的00:13的重點是什麼 \n\n###\n\n", "completion": " - 介紹程式的基本結構與運算\n- 分為五個小單元\n- 第一個小單元是程式的基本結構\n- 微觀上來看 END"}
{"prompt": "在2-0-1的00:29的重點是什麼 \n\n###\n\n", "completion": " - 程式是由一行一行的敘述句所構成的。\n- 程式可以分為輸入、運算、輸出三個架構。\n- 第二個單元介紹變數這一重要觀念。 END"}
{"prompt": "在2-0-1的00:50的重點是什麼 \n\n###\n\n", "completion": " - 變數是用來儲存。\n- 我們在運算的過程中所要用到的資料。\n- 這一個觀念非常重要，如果沒有它，程式就沒辦法運行。 END"}
{"prompt": "在2-0-1的01:02的重點是什麼 \n\n###\n\n", "completion": " - 變數的型態很重要，不同型態的運算結果不同。\n- 要介紹基本的運算。 END"}
{"prompt": "在2-0-1的01:16的重點是什麼 \n\n###\n\n", "completion": " - 電腦擅長從字幕中獲取程式相關重點。\n- 電腦可以處理複雜的加減乘除運算。\n- 電腦可以快速計算出結果。\n- 正確的指令是使用電腦進行計算的前提。 END"}
{"prompt": "在2-0-1的01:30的重點是什麼 \n\n###\n\n", "completion": " - 本章節的主題是講解如何給程式指令。\n- 重點在於輸入和輸出的處理。\n- 特別是在輸出這一塊。 END"}
{"prompt": "在2-0-1的01:44的重點是什麼 \n\n###\n\n", "completion": " - 混雜字串和變數\n- 輸出不同格式\n- 不同應用的輸出格式不同 END"}
{"prompt": "在2-0-1的01:57的重點是什麼 \n\n###\n\n", "completion": " - 學習從字幕中獲取程式相關重點\n- 講解程式的錯誤\n- 適用於初學者和高手\n- 程式難免會出現錯誤 END"}
{"prompt": "在2-0-1的02:11的重點是什麼 \n\n###\n\n", "completion": " - 我善於從字幕中獲取程式相關重點的模型。\n- 接下來講解的是錯誤的型態。\n- 講解的內容包括哪些種類的錯誤。\n- 接下來要講解如何處理這些錯誤。 END"}
{"prompt": "在2-0-1的02:19的重點是什麼 \n\n###\n\n", "completion": " - 避免產生錯誤\n- 具備基本資料運算能力\n- 程式變得有趣 END"}
{"prompt": "在2-1-1的00:00的重點是什麼 \n\n###\n\n", "completion": " - 介紹程式的基本結構\n- 程式能做的事情主要是運算\n- 運算的範圍可以從小至數學運算 END"}
{"prompt": "在2-1-1的00:28的重點是什麼 \n\n###\n\n", "completion": " - 程式相關重點，如加減乘除、演算法、排序、導航、人工智慧等等。\n- 這些運算需要有值才能夠進行，反映出input的重要性。 END"}
{"prompt": "在2-1-1的00:50的重點是什麼 \n\n###\n\n", "completion": " - 程式需要有輸入才能進行運算。\n- 運算必須有輸出才有意義。\n- 如果運算後的值沒有輸出，則沒有意義。\n- 程式由輸入、運算和輸出三個元素所構成。 END"}
{"prompt": "在2-1-1的01:16的重點是什麼 \n\n###\n\n", "completion": " - IPO模式\n- Input、Process、Output\n- Input可以是鍵盤、數據檔案或物聯網\n- 讀取檔案進行運算是常見的數據分析方式 END"}
{"prompt": "在2-1-1的01:35的重點是什麼 \n\n###\n\n", "completion": " - 感測器可以感測溫度、濕度等等。\n- 聲控系統可以透過聲音來做控制。\n- 經過處理後，系統會產生output。\n- 最常見的output是螢幕。 END"}
{"prompt": "在2-1-1的01:52的重點是什麼 \n\n###\n\n", "completion": " - 模型善於從字幕中獲取程式相關重點。\n- 字幕中的例子反映了Input、Process和Output。\n- 例子是計算BMI，也符合IPO模型。 END"}
{"prompt": "在2-1-1的02:13的重點是什麼 \n\n###\n\n", "completion": " - 輸入身高和體重\n- 將輸入的值存入tall和weight變數中\n- 進行運算，計算體重減去身高的平方\n- 以上是從字幕中獲取的程式相關重點 END"}
{"prompt": "在2-1-1的02:31的重點是什麼 \n\n###\n\n", "completion": " - 得到BMI值後，印出來。\n- 程式採用IPO模式。\n- 程式的最小單元是statement敘述句。 END"}
{"prompt": "在2-1-1的02:49的重點是什麼 \n\n###\n\n", "completion": " - 程式是由一連串的statement所構成的。\n- 在Python中，大部分的情況都是一行又一個敘述。\n- 許多的statement可以封裝為一個函式function。 END"}
{"prompt": "在2-1-1的03:11的重點是什麼 \n\n###\n\n", "completion": " - 會講解如何將statement跟function封裝為一個類別\n- Python是一個物件導向的程式語言\n- 物件指的是類別\n- Python最小的單元是一個statement END"}
{"prompt": "在2-2-1的00:13的重點是什麼 \n\n###\n\n", "completion": " - 變數是所有程式語言必備的一個元素，用來儲存特定的值，作為後續運算的應用。\n- 在Python中雖然不需要特定的指名它的型態，但每一個元素都是有型態的，需要特別注意。\n- 變數需要符合一些命名規則和慣例。\n- 變數儲存在記憶體空間中，需要一些空間來儲存變數的值。 END"}
{"prompt": "在2-2-1的01:01的重點是什麼 \n\n###\n\n", "completion": " - 輸入姓名並儲存到變數name中。\n- 將變數name的值與字串\"hello\"相加，並儲存到變數helloToYou中。\n- 變數的命名規則由英文、數字和底線構成。\n- 變數儲存在記憶體中的空間中。\n- 印出變數helloToYou的值需要先access這個空間。 END"}
{"prompt": "在2-2-1的01:50的重點是什麼 \n\n###\n\n", "completion": " - 變數名稱可以包含數字，但數字不能開頭。\n- 變數名稱不能包含特殊符號，如&、＃、*、@等等。\n- 大小寫字母代表不同的變數。\n- 變數名稱不能與保留字相同。 END"}
{"prompt": "在2-2-1的02:50的重點是什麼 \n\n###\n\n", "completion": " - Python中有很多保留字。\n- Python的变量类型不需要额外声明。\n- 变量的类型会根据其后面的值的内容来声明。\n- int、float、str和bool是Python中的常见变量类型。\n- bool类型的值可以是True或False。 END"}
{"prompt": "在2-2-1的03:44的重點是什麼 \n\n###\n\n", "completion": " - a等於100\n- 執行完後可以在該地方打上type\n- 回傳值是一個int\n- b等於8.9，型態是float\n- 不建議用簡單的變數名稱 END"}
{"prompt": "在2-2-1的04:36的重點是什麼 \n\n###\n\n", "completion": " - 變數命名要有意義\n- 變數型態很重要\n- 變數型態錯誤會導致程式出錯 END"}
{"prompt": "在2-2-1的05:29的重點是什麼 \n\n###\n\n", "completion": " - 字串相加代表相連。\n- 在做運算時要注意型態。\n- 字串相除沒有意義，會拋出錯誤訊息。 END"}
{"prompt": "在2-2-1的06:18的重點是什麼 \n\n###\n\n", "completion": " - type函式可以回傳變數的型態。\n- int函式可以將字串轉換為整數型態。\n- str函式可以將參數轉換為字串型態。 END"}
{"prompt": "在2-2-1的07:04的重點是什麼 \n\n###\n\n", "completion": " - y的值是120的整數\n- 可以透過str將y轉成字串\n- 印出y的type會是str\n- 在程式開發中，有時需要判斷變數的型態是否符合預期\n- 可以使用判斷式或isinstance函式來判斷\n- isinstance函式的意思是判斷某個變數是否是某個型態的實體\n- 如果grade是float的實體，就代表grade是float型態 END"}
{"prompt": "在2-2-1的07:46的重點是什麼 \n\n###\n\n", "completion": " - 程式執行的IPO流程\n- statement是程式的基本單元\n- 變數的意義、命名、型態\n- 型態的轉換還有相關的函式 END"}
{"prompt": "在2-3-1的00:00的重點是什麼 \n\n###\n\n", "completion": " - 運算式中有運算元和運算子。\n- 不同的型態有不同的運算子，包括算術運算子、字串運算子、關係運算子和邏輯運算子。\n- 算術運算子包括加、減、乘、除、取餘數和取商數。\n- 取餘數使用 % 符號，取商數使用 // 符號。\n- 次方使用 2 個星號表示。 END"}
{"prompt": "在2-3-1的01:09的重點是什麼 \n\n###\n\n", "completion": " - pow()函式可以幫助我們計算三次方、四次方等等。\n- \"+\"運算符號可以用來把字串做相連。\n- \"-\"運算符號沒有意義，不能用來刪除字串。\n- 字串常見的函式有upper(), lower(), replace()等等。\n- 關係運算子用來計算2個值的大於、小於和相等。\n- \"不等於\"用\"!=\"來代表。\n- 關係運算子的結果是一個布林值，包含True、False兩個值。 END"}
{"prompt": "在2-3-1的02:06的重點是什麼 \n\n###\n\n", "completion": " - 邏輯運算子包含 and、or、not。\n- and 的結果是兩個條件都滿足才為 True。\n- or 的結果是其中一個條件為 True 就為 True。\n- not 的結果是將原本的結果反向，True 變 False，False 變 True。\n- 在程式中，通常使用布林變數作為運算子。 END"}
{"prompt": "在2-3-1的03:07的重點是什麼 \n\n###\n\n", "completion": " - 進行程式開發、執行過程中，難免會有很多的錯誤。\n- 這些錯誤可以分為三類：語法的錯誤、執行的錯誤、邏輯的錯誤。\n- 用一個計算面積的小程式來說明這些錯誤。\n- 第一個程式訊問半徑的值，然後對它做一些運算。 END"}
{"prompt": "在2-3-1的03:48的重點是什麼 \n\n###\n\n", "completion": " - 要計算面積，需要用到半徑的平方乘以3.14的公式。\n- 需要先執行第一行程式碼。\n- 在執行第一行程式碼時，出現了Syntax Error，因為左右括號沒有對齊。\n- Syntax Error是因為程式碼語法錯誤，編譯器無法識別。\n- 語法錯誤就像講錯話一樣，對方無法理解。 END"}
{"prompt": "在2-3-1的04:40的重點是什麼 \n\n###\n\n", "completion": " - 在第二版的程式中，右括號被加上了。\n- 程式執行時，如果半徑輸入1，則1*1*3.14得出來的面積就是3.14。\n- 如果再次執行程式，輸入半徑為2，則2*2*3.14得出來的面積就是12.56，這個結果也是對的。\n- 當第三次執行程式時，輸入半徑為1.1，就會產生錯誤，因為程式中的型態轉換採用的是int，但輸入的是float。 END"}
{"prompt": "在2-3-1的05:38的重點是什麼 \n\n###\n\n", "completion": " - 程式可能會產生 Run time Error。\n- 錯誤產生的原因是程式思考的嚴謹度不夠。\n- 改成 float 可以涵蓋更多的層面，不會發生錯誤。 END"}
{"prompt": "在2-3-1的06:18的重點是什麼 \n\n###\n\n", "completion": " - 第三版本在轉換的過程改成float，避免產生錯誤\n- 程式犯了一個很大的錯誤，計算圓的面積時寫成了半徑的半徑次方乘3.14\n- 測試資料不足，邏輯有錯誤 END"}
{"prompt": "在2-3-1的07:06的重點是什麼 \n\n###\n\n", "completion": " - 雖然語法是對的，執行也不會有例外產生，但結果卻是錯的。\n- 必須多給它一些測試資料才能夠發現這樣的錯誤。\n- 在下一個版本我們把次方做修正，變成是半徑乘半徑乘3.14。\n- 這支程式寫的並不是那麼的好，不是很容易做維護。\n- PI的值寫死在程式碼裡面，這一行的敘述裡面變成是3.14。 END"}
{"prompt": "在2-3-1的07:55的重點是什麼 \n\n###\n\n", "completion": " - 修改程式精準度的方法\n- 常數值應該放在程式運算的最上面\n- 定義常數值的方法\n- 避免程式使用常變動的值\n- 程式碼還有待完善，例如使用者輸入非數字的情況 END"}
{"prompt": "在2-4-1的00:00的重點是什麼 \n\n###\n\n", "completion": " - Python中的輸入與輸出\n- 使用input函式接收使用者輸入\n- input函式有一個參數，用來提示使用者輸入的內容\n- 使用者輸入的值會被存到變數中\n- 注意input函式接收到的值都是字串型態，需要轉換型態才能進行運算。 END"}
{"prompt": "在2-4-1的01:19的重點是什麼 \n\n###\n\n", "completion": " - 轉換成int的型態\n- 再來做運算，那在這個地方的展示就是印出它的type，你會發現2個都是str，也就是字串的型態\n- 在輸出的時候，我們就是用print()這一個函式\n- 輸出的內容，例如說name等於Nick、age等於20\n- 我們可以把name印出來\n- 如果說你要印出的是多個變數的話，我們用逗點把它切開來，它會自動把這2個字串中間加上一個空格\n- 字串跟變數混和的輸出是非常常見的\n- 我們現在要印出來的是your name is 甚麼甚麼 and age is 甚麼甚麼，那這個就是字串和變數混合 END"}
{"prompt": "在2-4-1的02:22的重點是什麼 \n\n###\n\n", "completion": " - 有三種方法可以在 Python 中將變數輸出到字串中。\n- 第一種方法是使用逗號分隔符，但是這種方法的格式比較有限。\n- 第二種方法是在字串中混合一些控制碼，例如 %s 和 %d，但是這種方法已經不太建議使用。\n- 第三種方法是在字串中使用大括弧來標示變數，這是目前 Python 中建議使用的方法。 END"}
{"prompt": "在2-4-1的03:27的重點是什麼 \n\n###\n\n", "completion": " - 在輸出時，使用大括號和format方法可以將變數插入到字串中。\n- 在Python中，很多東西都被當成物件，物件裡面的方法可以使用\".\"來呼叫。\n- 格式化數字的印出可以使用format方法，並在大括號中指定小數點後的位數。 END"}
{"prompt": "在2-4-1的04:38的重點是什麼 \n\n###\n\n", "completion": " - 這裡寫了一個2f，f代表float，就是浮點數值的意思\n- 2代表只要取小數點下2位，所以會進行4捨5入的動作\n- 印出來會是3.14\n- 冒號前面代表第幾個變數，0代表第一個變數\n- 大部分程式語言都是從0開始的\n- area等於1，所以印出1.325\n- 希望面積的值至少會佔5格空格 END"}
{"prompt": "在2-4-1的05:42的重點是什麼 \n\n###\n\n", "completion": " - 透過字幕獲取程式相關重點的能力\n- 程式中的靠齊效果\n- 逃脫字元的應用\n- 逃脫字元的符號是「\\」\n- 逃脫字元的應用範例：換行符號「\\n」\n- 逃脫字元的應用範例：在字串中使用單引號 END"}
{"prompt": "在2-4-1的07:05的重點是什麼 \n\n###\n\n", "completion": " - 逃脫字元可以用來告訴編譯器某些符號不是字串的一部分\n- 單引號在字串中有特殊意義，需要用逃脫字元來忽略\n- 雙引號在字串中沒有特殊意義，不需要用逃脫字元\n- 在字串前加上r可以讓逃脫字元失效，讓字串中的符號保持原樣 END"}
{"prompt": "在2-4-1的08:24的重點是什麼 \n\n###\n\n", "completion": " - 某個模型善於從字幕中獲取程式相關重點。\n- 字幕中的 \\t 代表 tab，\\b 代表 backspace。\n- 在印出字串時，如果使用單引號，則在字串中使用雙引號不會有問題；反之亦然。\n- 在字串中使用 \\ 來表示特殊字符，但在印出字串時，\\ 本身不會被印出。 END"}
{"prompt": "在2-4-1的09:39的重點是什麼 \n\n###\n\n", "completion": " - 程式出現invalid syntax，是因為無法識別單引號所構成的字串。\n- 字串中的\\n是換行的控制碼。\n- 字串類別提供了許多功能，如.lower()和.upper()可以將字串轉換成小寫和大寫，startswith()可以判斷字串是否以某個字開頭。 END"}
{"prompt": "在2-4-1的10:56的重點是什麼 \n\n###\n\n", "completion": " - 模型善於從字幕中獲取程式相關重點\n- 判斷字串是否以特定字元開頭或結尾\n- 使用replace()函式取代字串\n- Python提供許多與字串相關的函式，可透過API查詢\n- String物件提供多種與字串相關的函式 END"}
{"prompt": "在2-5-1的00:13的重點是什麼 \n\n###\n\n", "completion": " - 程式開發、執行過程中會有錯誤\n- 軟體工程師容易犯錯誤\n- 錯誤分為三類：語法錯誤、執行錯誤、邏輯錯誤 END"}
{"prompt": "在2-5-1的00:39的重點是什麼 \n\n###\n\n", "completion": " - 這個小程式是用來計算面積的\n- 第一個程式需要輸入半徑的值，然後進行運算\n- 錯誤出現在第一行，顯示\"Syntax Error : unexpected EOF while parsing\"\n- 錯誤是語法錯誤，因為input函數沒有找到右括號 END"}
{"prompt": "在2-5-1的01:28的重點是什麼 \n\n###\n\n", "completion": " - Python的編譯器無法識別某些敘述句，會產生Syntax Error。\n- Syntax Error就像是講錯話，對方無法理解你的意思。\n- 在程式中加上缺失的符號可以解決Syntax Error的問題。 END"}
{"prompt": "在2-5-1的01:55的重點是什麼 \n\n###\n\n", "completion": " - 輸入半徑為1時，計算出的圓面積為3.14。\n- 再次執行時，輸入半徑為2，計算出的圓面積為12.56，結果正確。\n- 第三次執行時，輸入半徑為1.1，產生錯誤，因為型態轉換採用的是int，但輸入的是float。\n- 程式有時候執行是對的，有時候執行是錯的。 END"}
{"prompt": "在2-5-1的02:44的重點是什麼 \n\n###\n\n", "completion": " - 模型善於從字幕中獲取程式相關重點。\n- Run time Error 是因為程式思考的嚴謹度不夠。\n- 錯誤可能是因為沒有預期到使用者可能輸入的值。\n- 改成 float 可以涵蓋更多的輸入值。 END"}
{"prompt": "在2-5-1的03:16的重點是什麼 \n\n###\n\n", "completion": " - 程式不會發生錯誤\n- 修改成第三個版本，轉換過程改成float\n- 程式仍有一個很大的錯誤\n- 圓的面積計算方式是半徑的平方或半徑乘半徑乘3.14 END"}
{"prompt": "在2-5-1的03:47的重點是什麼 \n\n###\n\n", "completion": " - 程式中半徑的計算有誤，應該是半徑的平方乘以3.14\n- 在測試資料中，半徑為1和2時答案正確，但這並不代表程式沒有錯誤\n- 程式邏輯有錯誤，導致結果錯誤，但語法正確且不會產生例外 END"}
{"prompt": "在2-5-1的04:23的重點是什麼 \n\n###\n\n", "completion": " - 多給模型測試資料可以發現錯誤\n- 下一個版本修正次方計算\n- 半徑計算公式應為半徑乘半徑乘3.14\n- 程式中仍有不易維護的部分 END"}
{"prompt": "在2-5-1的04:47的重點是什麼 \n\n###\n\n", "completion": " - 程式寫得不好，不容易維護。\n- PI的值被寫死在程式碼中，變更精度需要修改程式碼。\n- 建議將常數值放在程式運算的最上面，做一個定義。 END"}
{"prompt": "在2-5-1的05:24的重點是什麼 \n\n###\n\n", "completion": " - 運算式子不會牽涉到常變動的值。\n- 程式碼並不是非常完整。\n- 使用者輸入a會產生錯誤，因為a無法轉換成float型態。\n- 需要修正程式碼。 END"}
{"prompt": "在2-6-1的00:13的重點是什麼 \n\n###\n\n", "completion": " - 程式的註解主要是用來說明我們可以執行的程式碼，但本身是沒有辦法執行的。\n- 程式的註解非常重要，用來說明程式檔案的內容。\n- 程式的註解可以分為兩種，一種是區塊的註解。 END"}
{"prompt": "在2-6-1的00:40的重點是什麼 \n\n###\n\n", "completion": " - 字幕中提到了三種不同的註解方式：單行註解、區塊註解、Python中的區塊註解。\n- 單行註解通常用來說明一行程式碼的作用。\n- 區塊註解通常用來說明整個檔案或複雜程式邏輯的作用。\n- 在Python中，區塊註解使用三個雙引號作為開頭和結尾。\n- 以上字幕中的範例是在介紹Python中的區塊註解。 END"}
{"prompt": "在2-6-1的01:10的重點是什麼 \n\n###\n\n", "completion": " - 要把某個東西框起來。\n- 可以用三個單引號或三個雙引號。\n- 三個單引號也可以。\n- 通常在檔案最上面用區塊註解說明程式內容。\n- 這個程式是用來排序一群資料。 END"}
{"prompt": "在2-6-1的01:39的重點是什麼 \n\n###\n\n", "completion": " - 字幕中提到了一個隨機產生的過程。\n- 使用氣泡排序法進行排序。\n- 作者和版本等相關信息可能會在字幕中提到。\n- 單行註解又稱為 inline comment。\n- 單行註解通常比較簡短。 END"}
{"prompt": "在2-6-1的02:04的重點是什麼 \n\n###\n\n", "completion": " - x 等於 a 的長度\n- s 代表資料的大小\n- r 等於 s 減一，代表回合數 END"}
{"prompt": "在2-6-1的02:24的重點是什麼 \n\n###\n\n", "completion": " - 複雜的程式碼段落\n- 建議在該段落加上單行註解\n- 單行註解使用井字號\n- 不需要在單行註解後再加上井字號\n- 單行註解後不能有運算，如減號表示減法。 END"}
{"prompt": "在2-6-1的02:49的重點是什麼 \n\n###\n\n", "completion": " - 程式碼無法執行\n- 有一個井字號在說明\n- 說明下面的 if 所做的事情\n- 說明這一段程式碼的意義 END"}
{"prompt": "在2-6-1的03:13的重點是什麼 \n\n###\n\n", "completion": " - 可以在某個地方開始加上註解。\n- 註解非常重要，但不要過分使用。\n- 過多沒有意義的註解會影響程式碼的閱讀。\n- 舉例來說，寫 s 等於 len(a)。 END"}
{"prompt": "在2-6-1的03:35的重點是什麼 \n\n###\n\n", "completion": " - 模型善於從字幕中獲取程式相關重點。\n- 字幕中提到的程式碼片段是關於 Python 的。\n- 字幕中提到的 `len` 是用來抓取變數大小的。\n- 對於熟悉 Python 的人來說，某些註解可能是多餘的。\n- 模型指出，對於熟悉語法的人來說，某些註解是不必要的。 END"}
{"prompt": "在2-6-1的04:00的重點是什麼 \n\n###\n\n", "completion": " - 模型善於從字幕中獲取程式相關重點。\n- 程式碼牽涉到的行數和複雜度相對較高，需要註解來說明。\n- 在教學中會加上語法相關的註解，但在真實的寫程式中可以不需要。 END"}
{"prompt": "在2-8-1的00:00的重點是什麼 \n\n###\n\n", "completion": " - 使用 OJ 的解題系統\n- 點擊題目連接\n- 登入 OJ 系統\n- 透過 openedu 系統登入\n- 做 Authorize END"}
{"prompt": "在2-8-1的00:40的重點是什麼 \n\n###\n\n", "completion": " - 透過 Openedu 登入 OJ。\n- 在右上角可以看到 Openedu 上的 ID。\n- 點擊題目進入後，右上角會顯示已登入 OJ。\n- 題目有描述。 END"}
{"prompt": "在2-8-1的01:12的重點是什麼 \n\n###\n\n", "completion": " - 要算出直徑的面積和周長\n- 結果要顯示到小數點以下兩位\n- 輸入一個數字\n- 範例一：直徑為2，面積為3.14，周長為6.28\n- 範例二：直徑為10，面積為78.50，周長為31.40\n- 提示公式 END"}
{"prompt": "在2-8-1的01:59的重點是什麼 \n\n###\n\n", "completion": " - 得到直徑的值\n- 使用 input 函數取得直徑的值\n- 設定直徑等於 input 的值\n- 在程式中加入提示字\n- 不要在 input 中輸入提示字 END"}
{"prompt": "在2-8-1的02:32的重點是什麼 \n\n###\n\n", "completion": " - 提示字會被輸出給使用者看，並在解題系統中進行比對。\n- 輸出的地方沒有任何提示字，不需要在這個地方做任何提示。\n- 需要將字串轉換成可以帶小數的數字，使用 float。 END"}
{"prompt": "在2-8-1的03:09的重點是什麼 \n\n###\n\n", "completion": " - 工具會自動內縮兩行\n- 內縮非常重要，不正常的內縮都是錯誤的\n- 已知直徑，可以算出半徑\n- 面積等於半徑的平方乘以 3.14 END"}
{"prompt": "在2-8-1的03:50的重點是什麼 \n\n###\n\n", "completion": " - 要將圓的半徑設定為 5\n- 計算圓的面積公式為 radius * radius * 3.14\n- 將計算出的面積四捨五入至小數點下兩位\n- 計算圓的周長公式為 diameter * 3.14\n- 將計算出的面積和周長分別 print 出來 END"}
{"prompt": "在2-8-1的04:40的重點是什麼 \n\n###\n\n", "completion": " - 從字幕中獲取程式相關重點的能力\n- 程式碼中的 print 函數\n- 周長的計算\n- 提交程式並獲得 Accepted 的意義\n- 取小數點下兩位的重要性\n- 使用 round 函數取小數點下兩位 END"}
{"prompt": "在2-8-1的05:24的重點是什麼 \n\n###\n\n", "completion": " - 可以從字幕中獲取程式相關重點。\n- 程式的正確性可以透過 Submit 來檢查。\n- 如果程式算錯了，會顯示 Wrong Answer。\n- 如果程式有編譯錯誤，會顯示 Compile Error。 END"}
{"prompt": "在2-8-1的05:59的重點是什麼 \n\n###\n\n", "completion": " - 提交程式的流程包含在 OJ 和 openedu 系統中。\n- 提交程式後需要等待 OJ 系統的評分。\n- 評分完成後，需要在 openedu 系統中進行 Submit grade。\n- Submit grade 會將 OJ 系統中的成績傳送到 openedu 系統中。\n- 成功提交後，會在 openedu 系統中顯示成績，並表示是否完成。 END"}
{"prompt": "在5-0-1的00:13的重點是什麼 \n\n###\n\n", "completion": " - 本章節主要講解函式 Function\n- 分為五個單元：模組化的設計、參數的傳遞、Lambda function、例外的處理、兩個應用\n- 模組化設計是其中一個單元\n- 參數的傳遞是其中一個單元\n- Lambda function 和例外的處理是其中兩個單元\n- 最後會給兩個應用 END"}
{"prompt": "在5-0-1的00:35的重點是什麼 \n\n###\n\n", "completion": " - 程式設計越來越大、越來越複雜。\n- 有些功能、流程是重複不斷在執行的。\n- 差別在於資料一開始進去的值有些改變。\n- 可以把那一段的程式抽取出來，獨立形成一個 function。 END"}
{"prompt": "在5-0-1的01:00的重點是什麼 \n\n###\n\n", "completion": " - 要執行 function 時，呼叫該 function。\n- 模組化的設計可以大大降低程式複雜度。\n- 參數的傳遞也因為抽取出來的函式而變得更容易。\n- 抽取出來的函式是將一些流程抽取出來的結果。 END"}
{"prompt": "在5-0-1的01:22的重點是什麼 \n\n###\n\n", "completion": " - 函式需要傳遞參數才能執行。\n- 參數的傳遞是一門學問。\n- 參數有時候會被改變，有時候不希望被改變。 END"}
{"prompt": "在5-0-1的01:44的重點是什麼 \n\n###\n\n", "completion": " - 參數的傳遞需要特別留意。\n- Lambda function 是一個輕量級的 function。\n- Lambda function 可以沒有名子，只有一兩行程式碼，但效用非常大。 END"}
{"prompt": "在5-0-1的02:08的重點是什麼 \n\n###\n\n", "completion": " - 第四步驟是例外處理\n- 在寫程式時常會遇到例外\n- 使用者習慣和環境可能與程式不同\n- 一開始沒有預料到會發生這樣的例外\n- 當程式做某些行為時可能會發生例外。 END"}
{"prompt": "在5-0-1的02:32的重點是什麼 \n\n###\n\n", "completion": " - 檔案放置位置不符合預期可能會拋出例外\n- 需要處理例外的情況\n- 介紹兩個應用：河內塔範例和益智遊戲 Hanoi Tower END"}
{"prompt": "在5-0-1的02:59的重點是什麼 \n\n###\n\n", "completion": " - 移動 Hanoi Tower 可以透過程式簡化。\n- 程式需要思考，但理解後操作簡單。\n- 電腦可以透過程式玩井字遊戲。\n- 井字遊戲是大家都熟悉的遊戲。 END"}
{"prompt": "在5-0-1的03:31的重點是什麼 \n\n###\n\n", "completion": " - 程式中有一些 function 是不斷被執行的。\n- 把這些 function 抽取出來變成獨立的 function。\n- 透過學習 function，可以具備模組化設計的能力。\n- 了解參數之間是怎麼做傳遞的。 END"}
{"prompt": "在5-0-1的04:04的重點是什麼 \n\n###\n\n", "completion": " - 具備開發大型軟體的能力。\n- 程式碼會變得越來越大，可能達到三百到四百行甚至一千行。\n- 模型能夠從字幕中獲取程式相關重點。 END"}
{"prompt": "在5-1-1的00:00的重點是什麼 \n\n###\n\n", "completion": " - 程式越來越大時，需要模組化的設計來簡化程式複雜度。\n- 特定功能可以抽象成一個函式(function)。\n- 模組化設計可以提高程式的可讀性和重用性。 END"}
{"prompt": "在5-1-1的01:30的重點是什麼 \n\n###\n\n", "completion": " - 可讀性和重用性的提高\n- 定義function使用保留字def\n- function必須用大括號框起來\n- function內部指令需要內縮\n- 定義一個簡單的hello function\n- 呼叫hello function需要在指令中加上括號\n- 呼叫hello function會印出hello python END"}
{"prompt": "在5-1-1的02:54的重點是什麼 \n\n###\n\n", "completion": " - 模型善於從字幕中獲取程式相關重點\n- 第一個例子是一個簡單的function\n- 第二個例子是帶參數的function，會依據參數值表現不同行為\n- 第三個例子是有回傳值的function，演算法是找出三個參數中最大的值 END"}
{"prompt": "在5-1-1的04:16的重點是什麼 \n\n###\n\n", "completion": " - max() 是一個 Python 內建的函式，可以找出傳入的數值中最大的那個。\n- max() 可以接受多個參數，也可以接受一個 list 或 tuple。\n- 在 max() 函式中，我們使用了 if-else 的判斷式，來找出傳入的三個數值中最大的那個。\n- 在函式的定義中，我們使用了 docstring，來說明這個函式的用途和參數的意義。\n- 使用 help() 函式可以查看函式的 docstring。\n- 在呼叫 max() 函式時，我們可以傳入多個數值，也可以傳入一個 list 或 tuple。 END"}
{"prompt": "在5-1-1的05:38的重點是什麼 \n\n###\n\n", "completion": " - 模型善於從字幕中獲取程式相關重點\n- 程式中的return會回傳值\n- BMI是根據身高和體重計算的值，可以用來判斷身體狀況\n- 在function中可以加上註解來解釋程式的用途和參數的單位\n- 呼叫function後可以對回傳值進行處理，例如取小數點位數\n- 最後可以印出結果來檢查程式是否正確 END"}
{"prompt": "在5-1-1的07:06的重點是什麼 \n\n###\n\n", "completion": " - 程式中的呼叫負擔可以透過減少呼叫round等指令來降低\n- keyword argument 跟 default argument 是 Python 中的兩個概念\n- 質數篩選演算法的執行結果是印出小於 n 的所有質數 END"}
{"prompt": "在5-1-1的08:48的重點是什麼 \n\n###\n\n", "completion": " - 可以從字幕中獲取程式相關重點的模型\n- 設定一個區間內的所有質數，可以加上一個參數start\n- 可以讓呼叫端不用指定start的值，而是使用default值\n- 可以自己去設定start的值，保有彈性\n- start可以是optional的參數，並給予default值\n- start也可以是nondefault的值，必須在呼叫時指定 END"}
{"prompt": "在5-1-1的10:01的重點是什麼 \n\n###\n\n", "completion": " - 函式需要一個必要的參數n\n- 函式可以有一個可選的參數start，預設值為2\n- 函式會回傳從start到n之間的所有質數\n- 如果只給定一個參數n，則預設start為2\n- 如果只給定可選參數start，則n為必要參數，不能省略 END"}
{"prompt": "在5-1-1的11:14的重點是什麼 \n\n###\n\n", "completion": " - 必要的參數必須要放在前面\n- 按照位置一個一個把參數擺好\n- 可以透過keyword的方式完全來做控制\n- 可以使用變動長度的參數 END"}
{"prompt": "在5-1-1的12:35的重點是什麼 \n\n###\n\n", "completion": " - 學生選修科目數量不固定\n- 可以使用 start 參數代表變動長度的參數\n- 參數型態為 tuple\n- 程式碼需要判斷和控制參數是否為空\n- 可以代入不同數量的參數進行計算 END"}
{"prompt": "在5-2-1的00:00的重點是什麼 \n\n###\n\n", "completion": " - 在呼叫 function 的時候，參數的傳遞\n- 當呼叫 function 以後，原來參數值的內容是否會被修改\n- 參數的傳遞最主要是要探討這個問題\n- Python 中有 immutable object 和 mutable object 兩種物件\n- 整數 (int) 是一個不可變的物件 END"}
{"prompt": "在5-2-1的01:33的重點是什麼 \n\n###\n\n", "completion": " - 內部真實的運作\n- 讓 a 的值等於 1\n- 真正的作法是先在記憶體開個空間去儲存 1\n- 資料是有一個記憶體位置在 760 這個位置\n- a 事實上就是去儲存只到 760 的這一筆資料\n- a 儲存儲存的倉號\n- 儲存的內容為 1 的空間\n- 當讓 a = 2 的時候，它的運作並不是只是把原來 760 的空間的值由 1 把它改成 2\n- int 是一個不可變動 immutable object\n- 760 是儲存 int 1 的記憶體位置 END"}
{"prompt": "在5-2-1的02:52的重點是什麼 \n\n###\n\n", "completion": " - 整數是不可修改的 immutable object。\n- 整數的值不會改變，但是可以指向不同的位置。\n- 每次重新指向時，會新增一個空間。\n- id() 函數可以查看物件的位置。\n- 每次重新指向時，位置會改變。 END"}
{"prompt": "在5-2-1的04:10的重點是什麼 \n\n###\n\n", "completion": " - a 所儲存的是 reference\n- 改變 a 的值，實際上是改變 a 所參考的內容\n- 字串是 immutable object\n- 改變字串的值，實際上是創建一個新的字串物件\n- 改變字串的值，會改變字串物件的記憶體位置 END"}
{"prompt": "在5-2-1的05:29的重點是什麼 \n\n###\n\n", "completion": " - 可以從字幕中獲取程式相關重點\n- name 去指到新的那一個空間\n- mutable object 就是可以變動的物件\n- list 就是一個可以變動的物件\n- m 的 list 內容是放 [1, 2]\n- m 它會指向一個 [1, 2] 的空間\n- 如果把 m[0] 的位置改成 3，list 會直接把 760 所指向的 [1, 2] 改成 [3, 2] END"}
{"prompt": "在5-2-1的06:42的重點是什麼 \n\n###\n\n", "completion": " - 模型善於從字幕中獲取程式相關重點\n- 實驗中宣告一個 m 的 list，內容是 [1, 2]，位置是 272\n- 把 m[0] 改成 3，位置依樣是 272，m 的內容已經改成了 [3, 2]\n- function 會把某一個整數加 10，就是一個調分數的程式\n- 一開始讓一個成績等於50，印出它的位置是多少\n- 呼叫 ten( ) 這個 function，把這個分數帶進去，帶進去以後他的成績會加 10\n- 當我宣告一個 grade = 50，他會指向一個整數 END"}
{"prompt": "在5-2-1的08:04的重點是什麼 \n\n###\n\n", "completion": " - g 是一個整數物件，指向 50 的資料。\n- 在 function 內宣告一個物件 g，並讓他指向 50 的資料。\n- 將 g 加上 10，讓他指向 60 的資料。\n- 整數是 immutable object，所以 g 的內容改變時，會額外弄一個空間。\n- 在原本的呼叫端，grade 的內容不會被影響。\n- function 內對參數 g 的修改，不會對呼叫端造成任何的影響。 END"}
{"prompt": "在5-2-1的09:21的重點是什麼 \n\n###\n\n", "completion": " - 在 Python 中，pass by value 和 pass by reference 的效果是相同的。\n- 當傳遞一個 list 時，Python 會使用 pass by reference 的方式。\n- 在 function 內對傳入的 list 做修改，會對呼叫端造成影響。\n- List 是一個 mutable object，所以對其內容的修改會直接影響到原本的 list。 END"}
{"prompt": "在5-2-1的10:48的重點是什麼 \n\n###\n\n", "completion": " - 程式碼中的變數 g 與 grade 指向相同的位置\n- g 是 immutable object，當 g = g + 10 時，它的 reference 會改變\n- 傳遞 list 時，會影響到呼叫端的內容 END"}
{"prompt": "在5-2-1的12:10的重點是什麼 \n\n###\n\n", "completion": " - 在 function 內一樣也是 [60, 80]\n- list 它是一個 mutable object\n- copy and pass 的動作\n- 傳遞的內容是副本而不是真正的參考位置\n- function 的地方我們並沒有做修改\n- 傳參數時是傳了一個副本過去 END"}
{"prompt": "在5-3-1的00:00的重點是什麼 \n\n###\n\n", "completion": " - 介紹 lambda function\n- lambda function 可以沒有名稱\n- lambda function 只有一行的 function\n- 示範一個計算平均的 function，名稱為 avg1()\n- avg1() 帶三個值進來\n- 最後算出平均並 return 回來 END"}
{"prompt": "在5-3-1的00:44的重點是什麼 \n\n###\n\n", "completion": " - 可以從 function 的字幕中獲取程式相關重點。\n- 該 function 的名稱是 avg1()。\n- 可以執行該 function 並給它一個參數。\n- 該 function 可以計算一個平均值。\n- 可以使用 lambda 來表示該 function。 END"}
{"prompt": "在5-3-1的01:19的重點是什麼 \n\n###\n\n", "completion": " - lambda 函式一定會有回傳值，但不需要使用 return 關鍵字。\n- lambda 函式必須是一行程式碼，否則會發生錯誤。\n- 冒號可以用來表示方法的執行。\n- 透過冒號可以將多個值相加。\n- lambda 函式可以透過字幕中的範例來執行。 END"}
{"prompt": "在5-3-1的01:49的重點是什麼 \n\n###\n\n", "completion": " - 這地方會提示\n- 這是一個 function\n- 名稱部分沒有\n- 用 lambda 表示\n- 可以給它一個名稱\n- 執行 avg2\n- lambda function 的結果與一般定義相同 END"}
{"prompt": "在5-3-1的02:19的重點是什麼 \n\n###\n\n", "completion": " - 模型善於從字幕中獲取程式相關重點。\n- sorted() 是用來做排序的 function。\n- lambda function 通常用在資料排序時，指定 key 值。\n- sorted() 可以指定 key 值來排序。\n- 以 [2, 1, 3] 為例，經過 sorted() 排序後，得到結果。 END"}
{"prompt": "在5-3-1的02:52的重點是什麼 \n\n###\n\n", "completion": " - 模型善於從字幕中獲取程式相關重點。\n- 資料為一維時，可以使用排序函式進行排序。\n- 資料為二維時，可以使用排序函式，並以每一筆資料的第一個欄位當作 key 值進行排序。\n- 排序函式會依照 key 值的大小進行排序。 END"}
{"prompt": "在5-3-1的03:27的重點是什麼 \n\n###\n\n", "completion": " - 使用最後一筆資料當作 key 值。\n- 使用 lambda function 來指定 key 值。\n- 在 sorted function 中，第二個欄位指定 lambda function。\n- lambda function 的 x 指的是 2 維資料中的每一筆資料。 END"}
{"prompt": "在5-3-1的04:05的重點是什麼 \n\n###\n\n", "completion": " - 使用 x[-1] 來取得最後一筆資料。\n- 最後一筆資料可以當成排序的依據。\n- 程式執行後，會依照最後一筆資料來排序。\n- 可以透過改變最後一筆資料的值，來觀察排序結果的變化。 END"}
{"prompt": "在5-3-1的04:41的重點是什麼 \n\n###\n\n", "completion": " - 可以使用 lambda 函式來進行排序\n- 可以使用 lambda 函式來計算加權總分\n- 可以使用 lambda 函式來指定權重 END"}
{"prompt": "在5-3-1的05:10的重點是什麼 \n\n###\n\n", "completion": " - 第二個 weight 是 0.4，最後一個也是 0.4。\n- 在呼叫 sorted 時，key 是等於 lambda。\n- 每一筆資料去呼叫 w[x]，依照每一個不同的欄位的比重來做計算。\n- 把排序後的結果印出來。 END"}
{"prompt": "在5-4-1的00:14的重點是什麼 \n\n###\n\n", "completion": " - 程式碼執行時可能會遇到例外。\n- 例外處理的目的是處理程式碼執行時可能出現的例外。\n- 例外處理的語法是 try-except。\n- try 內的 block 是要執行的動作。\n- 若動作不順利，就會拋出一個例外。\n- except 是處理例外的地方。 END"}
{"prompt": "在5-4-1的01:11的重點是什麼 \n\n###\n\n", "completion": " - 抓取到這個例外\n- 在這個 block 裡面\n- 在這個區塊裡面 我們就去描述\n- 發生了這個例外以後我們要處理的動作為何\n- 如果沒有發生例外的話\n- 使用者的輸入阿\n- 跟這個檔案阿\n- 都是依照我們的想像得把它放得很好\n- 這時候沒有例外他就跑到else 這個子句\n- finally 就是在表\n1- 不管你有沒有發生例外\n1- 最後都會執行的動作把它寫在 finally 裡面\n1- 好我們實際的來看一個例子\n1- 這個例子是輸入一個出生年 END"}
{"prompt": "在5-4-1的01:53的重點是什麼 \n\n###\n\n", "completion": " - 計算年齡的小程式\n- function getAge()\n- 出生年扣掉 2018 得到年齡\n- 要求輸入出生年\n- 呼叫 function 並印出結果\n- 輸入非數字會產生 ValueError 例外\n- 紅色部分寫 ValueError 描述產生例外的原因 END"}
{"prompt": "在5-4-1的02:35的重點是什麼 \n\n###\n\n", "completion": " - 程式中出現例外會中斷程式的執行。\n- 在第二版程式中，會先判斷輸入是否為數值，若不是則會進入迴圈要求重新輸入。\n- 迴圈會一直要求重新輸入直到輸入為數值為止。 END"}
{"prompt": "在5-4-1的03:12的重點是什麼 \n\n###\n\n", "completion": " - 在輸入 abc 後，迴圈會再要求輸入一次。\n- 輸入 1990 後，程式會印出 28。\n- 第三版嘗試使用 try exception 的方式來解決問題，讓程式更簡潔、通用。\n- 轉換使用者輸入成 int 時，有可能會發生例外。 END"}
{"prompt": "在5-4-1的03:47的重點是什麼 \n\n###\n\n", "completion": " - 使用 try-catch 包裹可能會出現例外的程式碼\n- 當轉換失敗時，程式會進入 catch 區塊\n- 當出現例外時，程式會印出錯誤訊息並提示重新輸入\n- 當轉換成功時，程式會印出轉換後的結果\n- 可以使用字幕中的程式碼來實際執行程式，並觀察例外的處理方式 END"}
{"prompt": "在5-4-1的04:27的重點是什麼 \n\n###\n\n", "completion": " - 捕捉例外\n- 印出提示\n- 重新輸入\n- 程式缺點：無法判斷輸入是否合理 END"}
{"prompt": "在5-4-1的05:07的重點是什麼 \n\n###\n\n", "completion": " - 該年份出生的人\n- 第四個版本加強檢查\n- 檢查 getAge() 中的 year 是否大於 2019 或小於 1990\n- 這些都是輸入方面的例外\n- raise 會拋出一個例外\n- 例外描述為 Impossible year 不可能有這一年 END"}
{"prompt": "在5-4-1的05:43的重點是什麼 \n\n###\n\n", "completion": " - 應用 try-catch 處理可能產生例外的程式碼\n- while 迴圈中的 int 轉換和呼叫 getAge() 都可能產生例外\n- 當例外發生時，會進入 try 區塊中的 catch 區塊，印出例外訊息\n- 實際執行時，若輸入的出生年份為非數字，會產生例外並印出訊息 END"}
{"prompt": "在5-4-1的06:23的重點是什麼 \n\n###\n\n", "completion": " - 當呼叫 getAge() 時，如果年份不符合條件，會 raise 一個 exception 是 Impossible。\n- 當出現 Impossible exception 時，會印出 Impossible，並要求重新輸入年份。\n- 當輸入正確年份時，程式才會繼續執行。 END"}
{"prompt": "在5-5-1的00:13的重點是什麼 \n\n###\n\n", "completion": " - 介紹一個古老的益智遊戲 - 河內塔\n- 遊戲目標：將 A 柱上的 3 個方塊搬移到 C 柱\n- 遊戲規則：一次只能搬一個方塊，搬移過程中不能大的壓小的 END"}
{"prompt": "在5-5-1的00:57的重點是什麼 \n\n###\n\n", "completion": " - 解決問題的方法可以從字幕中獲取程式相關重點。\n- 將問題簡化，搬移兩個 block。\n- 將 1、2 搬到 C，符合條件。\n- 先把 1 搬到 B，再把 2 搬到 C。\n- 把 1 搬到 C，解決問題。\n- 起始柱子為 A，目的柱子為 C。 END"}
{"prompt": "在5-5-1的01:42的重點是什麼 \n\n###\n\n", "completion": " - 模型善於從字幕中獲取程式相關重點\n- 要解決問題，可以先把 1、2 搬到 B，再把 3 搬到 C，最後再把 1、2 搬到 C\n- 前提是要知道 1、2 可以搬到 C，因為在上一個問題中已經說明了 END"}
{"prompt": "在5-5-1的02:22的重點是什麼 \n\n###\n\n", "completion": " - 要把 1、2 搬到 B，再把 1、2 搬回到 C\n- 要把 3 搬到 C，需要用到 C 當成輔助柱\n- A 也可以扮演輔助柱的角色 END"}
{"prompt": "在5-5-1的03:14的重點是什麼 \n\n###\n\n", "completion": " - 可以搬三個\n- 可以搬四個\n- 搬四個的時候，先把 1、2、3 搬到 B，再把 4 搬到 C，最後把 1、2、3 搬到 C\n- 搬 1、2、3 到 B 沒有困難，因為已經從 A 搬到 C 過了\n- 可以一直把數字往上加 END"}
{"prompt": "在5-5-1的03:49的重點是什麼 \n\n###\n\n", "completion": " - 搬運複雜度高的問題可以用程式解決\n- 遞迴函式是一個重要的程式技巧\n- 程式碼簡潔，主要是 move() function\n- move() function 帶了四個參數，從 source 開始搬運 END"}
{"prompt": "在5-5-1的04:27的重點是什麼 \n\n###\n\n", "completion": " - 搬 n 個到 dest (目的地)\n- 以 aux 作為我的輔助\n- 這個 function 它的定義是這樣子\n- 如果 n = 1，就簡單啦，我就直接從 source 引到 dest\n- 如果不適的話，就找剛剛的講解\n- 我就先把上面的 n - 1 個從 source 搬移到 aux 這個輔助柱\n- 藉由 dest 當成我的輔助柱，做 n - 1 這樣子一個搬移\n- 搬移完了以後，緊接著就把 source 下面最大的搬移到 dest，而且是搬移一個\n- 最後再把 aux 上面所有的 n - 1 個搬移到 dest END"}
{"prompt": "在5-5-1的05:21的重點是什麼 \n\n###\n\n", "completion": " - 模型善於從字幕中獲取程式相關重點\n- 使用 source 作為輔助\n- 實現 move() function 的情境\n- 使用遞迴是一種程式技巧\n- 遞迴可以將一個數字分解成多個數字\n- 不管數字有多大，最後都會被分解成 1 1 1 END"}
{"prompt": "在5-5-1的06:08的重點是什麼 \n\n###\n\n", "completion": " - 這段程式碼是遞迴函式\n- 遞迴函式需要有中止條件\n- 中止條件在這個例子中是 n = 1\n- 程式碼可以將 A 搬移到 C，並借助 B 作為輔助\n- 程式碼的執行結果與預期相符 END"}
{"prompt": "在5-5-1的06:47的重點是什麼 \n\n###\n\n", "completion": " - 搬移數字 3 的過程\n- 前三次搬移是為了把 2 個搬到輔助的柱子\n- 最後是把 A 搬到目的的柱子\n- 接下來搬移 3 個，又把輔助的柱子上面的 2 個搬移到目的地\n- 留下一個小習題，修改程式以印出搬移的次數 END"}
{"prompt": "在5-5-2的00:13的重點是什麼 \n\n###\n\n", "completion": " - 設計 Tic Tac Toe 遊戲\n- 遊戲規則簡單，兩個玩家，一個是 0，一個是 X，誰先連成一條線誰就贏\n- 線可以是橫的、直的、斜的\n- 設計遊戲時需要思考如何表達井的狀態\n- 遊戲狀態會不斷變更\n- 需要檢查贏的狀態，基本狀態是連成一條線 END"}
{"prompt": "在5-5-2的01:15的重點是什麼 \n\n###\n\n", "completion": " - 棋盤上的橫、直、斜線必須要有一個邏輯的判斷\n- 隨機下子，可以給井做一個編號，從九個數字中挑一個數字來下子，下完子以後把那個位置去除掉，在從剩下的8個裡面隨機下子\n- 怎麼把它運算出來\n- 怎樣去交換玩家，一開始可能是玩家一，接著玩家二，又玩家一，一直循環到遊戲結束為止\n- 思考時間的表現 END"}
{"prompt": "在5-5-2的02:21的重點是什麼 \n\n###\n\n", "completion": " - 這個遊戲需要讓電腦去做互玩的動作。\n- 電腦很快可能一下子就跑玩了，希望能夠模擬人類思考的方式。\n- 程式需要有停頓的效果，可以使用 time 這個物件，呼叫 sleep 方法。\n- 程式一開始需要停頓 1 秒，每個玩家玩完後要下一個的時候需要停頓 2 秒。\n- 程式需要呈現出棋盤的位置，左上角是 1 2 3 4 5 6。\n- 程式需要一邊做移動，一邊呈現出棋盤。 END"}
{"prompt": "在5-5-2的03:26的重點是什麼 \n\n###\n\n", "completion": " - 棋盤狀態可以用 list 儲存\n- 初始狀態是空的\n- 檢查贏的狀態，只要檢查每一列、每一行、每一斜線是否都一樣 END"}
{"prompt": "在5-5-2的04:23的重點是什麼 \n\n###\n\n", "completion": " - 滿足一定條件代表贏得狀態已經滿足了\n- 宣告了一個布林的 function 叫做 win\n- win 等於 p 是代表著玩家\n- 如果玩家這個值放在 1 這個位置，而且 2 的位置，3 的位置也是，這些全都滿足，或者是 4 5 6 位置都是放 p 這一個值，就太表贏得狀態是滿足的\n- 用一連串的 or 去做連接，這裡面就很多的 and\n- 注意到這個地方這裡有個倒斜線，這是因為我們這個判斷句比較長 END"}
{"prompt": "在5-5-2的05:19的重點是什麼 \n\n###\n\n", "completion": " - 做連接時要注意倒斜線，否則會出現錯誤。\n- 檢查勝利狀態是在玩家下子後進行的。\n- 當滿足勝利條件時，會回傳 win 字串。\n- 隨機下子時，可以使用 random.choice 方法從 list 中挑選一個值。\n- 要建立一個 list，存放可用的下子位置。 END"}
{"prompt": "在5-5-2的06:25的重點是什麼 \n\n###\n\n", "completion": " - 棋盤上的元素為 1 2 3 5 6 7 8 9。\n- 要跳過 4。\n- 7 已經被下了。\n- 新的 list 不包含 4 跟 7。\n- 宣告了一個叫 randomMove 的方法。\n- list r 是空的。\n- 如果棋盤上的位置是空的，就把它 append 到 r 裡面。\n- r 裡面放的都是空的可以下的位置。\n- 如果 r 還是空的，就代表所有位置都已經被佔領了。 END"}
{"prompt": "在5-5-2的07:29的重點是什麼 \n\n###\n\n", "completion": " - 當棋盤滿了，回傳 NO_FREE_SPACE。\n- 玩家1先下子，休息1秒後，玩家2再下子。\n- 玩家1和玩家2不斷互換下子，直到有人贏或平手。\n- randomMove方法回傳-1代表棋盤已滿。\n- 迴圈永遠等於true，直到有人贏或平手才跳離。 END"}
{"prompt": "在5-5-2的08:29的重點是什麼 \n\n###\n\n", "completion": " - 當 loc 等於 NO_FREE_SPACE 時，代表已經沒有空的位置。\n- -1 就代表說已經沒有空的位置。\n- 如果 loc 等於 NO_FREE_SPACE，就印出一個平手，然後跳離這一個迴圈。\n- 如果沒有跳離迴圈的話，就會讓 p 把它的值放到 loc 這個位置，同時回傳 moveResult。\n- 再把棋盤做一個刷新，讓它 show 出來。\n- 如果 moveResult 等於 win 的話，就代表剛剛這個移動造成了 p 贏得了這一個遊戲，這時候就印出 p 贏得了這個遊戲，再跳離這個迴圈。\n- 如果說它沒有平手，也沒有贏得這一個遊戲，就代表繼續玩了。\n- 如果 p 等於 p1 的話，就代表剛剛都是 p1 再玩。 END"}
{"prompt": "在5-5-2的09:33的重點是什麼 \n\n###\n\n", "completion": " - 程式中有一個迴圈不斷執行。\n- 在迴圈中，先讓 p 等於 p2，再讓 p2 等於 p。\n- 為了讓程式有間隔效果，使用 sleep 2 秒。\n- 完成井字遊戲的程式設計。\n- 延伸練習：改成人機互玩的游戲，讓電腦有智慧，保持不敗。 END"}
{"prompt": "在5-6-1的00:13的重點是什麼 \n\n###\n\n", "completion": " - pytube 是一個可以幫助下載 YouTube 影片的工具\n- 可以利用下載的影片做離線閱讀或進一步分析\n- pytube 的語法很簡單，只需要 import YouTube 就可以使用 END"}
{"prompt": "在5-6-1的00:39的重點是什麼 \n\n###\n\n", "completion": " - import 就是\n- 從這個套件裡面找到這個類別把它匯入進來\n- 這樣的話我們就可以產生一個 YouTube 的物件\n- 後面是帶我有興趣的那個影片\n- 這也是一個 python 課程的影片 END"}
{"prompt": "在5-6-1的01:15的重點是什麼 \n\n###\n\n", "completion": " - 可以透過給網址開始下載影片\n- 要透過 streams.first() 來執行下載動作\n- 下載完成時會顯示 '影片下載完成' END"}
{"prompt": "在5-6-1的01:37的重點是什麼 \n\n###\n\n", "completion": " - 執行程式後出現錯誤訊息\n- 錯誤訊息為 ModuleNotFoundError\n- 程式找不到 pyTube 模組\n- 需要匯入 pyTube 模組 END"}
{"prompt": "在5-6-1的01:56的重點是什麼 \n\n###\n\n", "completion": " - 可以透過實驗來學習程式相關重點\n- 需要使用 `import pytube` 套件\n- 在該影片中無法看到該套件\n- 在 Anaconda 的 Environment 中搜尋 pytube 無法找到\n- 可能是因為該套件不在 Anaconda 的預設值中。 END"}
{"prompt": "在5-6-1的02:19的重點是什麼 \n\n###\n\n", "completion": " - 沒有這個套件，需要安裝\n- 安裝方法是透過 pip 指令\n- pip 是 python 的功能之一\n- pip 在安裝 python 時就已經存在 END"}
{"prompt": "在5-6-1的02:38的重點是什麼 \n\n###\n\n", "completion": " - 要使用 pip 安裝 pytube 套件\n- 安裝指令為 \"pip install pytube\"\n- pytube 是套件的名稱\n- 安裝成功會顯示 \"successful\" END"}
{"prompt": "在5-6-1的03:00的重點是什麼 \n\n###\n\n", "completion": " - 執行完後要檢查是否運作正常。\n- 需要執行 Python。\n- 要 import pytube。\n- 沒有出現錯誤代表安裝成功。\n- 回到剛剛的環境。\n- 再次執行以確認是否正常運作。 END"}
{"prompt": "在5-6-1的03:26的重點是什麼 \n\n###\n\n", "completion": " - 程式執行完可以下載影片\n- 影片下載完成後會顯示訊息\n- 跳到 File explorer 確認檔案是否存在 END"}
{"prompt": "在5-6-1的03:49的重點是什麼 \n\n###\n\n", "completion": " - 下載的檔案是 Hello Python 的 mp4 影片\n- 使用 pip 安裝 pytube 應用\n- pytube 可以用來下載 YouTube 影片 END"}
{"prompt": "在5-6-2的00:14的重點是什麼 \n\n###\n\n", "completion": " - 介紹 twstock 套件\n- 可以用 twstock 套件取得台灣股價\n- 可以透過 twstock 套件取得股票資訊 END"}
{"prompt": "在5-6-2的00:28的重點是什麼 \n\n###\n\n", "completion": " - 可以從字幕中獲取程式相關重點。\n- 字幕中提到了價格或成交量方面的資訊，對金融分析很實用。\n- 需要使用一個套件，先要 import 它。\n- Anaconda 預設沒有這個套件，需要用 pip 安裝。 END"}
{"prompt": "在5-6-2的00:51的重點是什麼 \n\n###\n\n", "completion": " - 安裝套件後，有一個名為 stock 的物件。\n- 只要給一支股票的代號，就能從 stock 物件中取得該股票的資訊。\n- 該股票的資訊會以物件形式回傳。 END"}
{"prompt": "在5-6-2的01:09的重點是什麼 \n\n###\n\n", "completion": " - 從字幕中獲取程式相關重點\n- 物件的 price 屬性可以回傳最近 31 天的收盤價\n- 可以執行程式來檢查結果\n- 花仙子的最近 31 天收盤價在特定位置\n- 可以將多個股票建成 list 進行應用 END"}
{"prompt": "在5-6-2的01:36的重點是什麼 \n\n###\n\n", "completion": " - 模型善於從字幕中獲取程式相關重點。\n- 使用 dictionary 儲存資料。\n- 使用迴圈秀出所有股票的收盤價。\n- 可以選擇秀出較近期的收盤價。 END"}
{"prompt": "在5-6-2的01:54的重點是什麼 \n\n###\n\n", "completion": " - 在某個地方加上一個 -3\n- list 這個地方已經講過\n- -3 表示倒數的三筆資料\n- 把它呈現出來\n- 秀出最近三天的股票\n- 除了這個功能以外，還有其他功能。 END"}
{"prompt": "在5-6-2的02:11的重點是什麼 \n\n###\n\n", "completion": " - 即時股價\n- 使用 real time 物件\n- get 股票代碼\n- 回傳一個 dictionary 物件\n- 可以從 dictionary 中取得 success 的 key 值 END"}
{"prompt": "在5-6-2的02:33的重點是什麼 \n\n###\n\n", "completion": " - 如果回傳是 true，代表資料取得正確。\n- 如果資料正確，印出及時股票資料。\n- 印出股票資訊。 END"}
{"prompt": "在5-6-2的02:49的重點是什麼 \n\n###\n\n", "completion": " - 印出錯誤訊息\n- 股價可以從realtime中的latest_trade_price獲取\n- 呈現即時價格\n- 查看realtime的架構 END"}
{"prompt": "在5-6-2的03:15的重點是什麼 \n\n###\n\n", "completion": " - 字幕中提到了一個 dictionary，並且由很多的 key value 所構成。\n- 字幕中提到了網路有更多的應用，但沒有具體說明。\n- 字幕中提到了可以到 github.com 網址裡面找到更多的應用功能。 END"}
{"prompt": "在5-6-3的00:13的重點是什麼 \n\n###\n\n", "completion": " - 寫一個理財機器人，用 line 傳送即時的股價。\n- 用 Python 抓取台灣的股價。\n- 監控股價的高低，並即時傳送訊息給自己的 line 帳號。\n- 透過 IFTTT 服務呼叫 line 的 API，而不是直接用程式呼叫。\n- 示範設定花仙子股價在 50，如果股價高於 50，就用 line 通知自己。 END"}
{"prompt": "在5-6-3的01:16的重點是什麼 \n\n###\n\n", "completion": " - 程式執行完會出現訊息\n- 程式為小小的理財機器人\n- 花仙子的股價為 68.8\n- IFTTT 是一個服務，可以幫助呼叫 line 的 api 傳送訊息\n- IFTTT 就像代理人或代書，可以幫忙處理事情 END"}
{"prompt": "在5-6-3的02:21的重點是什麼 \n\n###\n\n", "completion": " - IFTTT 是一個可以幫助使用者自動化處理瑣事的服務\n- IFTTT 的全名是 IF This Then That\n- IFTTT 可以整合多種帳號，例如 Google、Facebook 等\n- IFTTT 的小應用程式稱為 Applets\n- Applets 可以透過設定來完成自動化處理 END"}
{"prompt": "在5-6-3的03:18的重點是什麼 \n\n###\n\n", "completion": " - IFTTT 是一個可以幫助使用者自動化工作流程的服務\n- IFTTT 會用到兩個服務，左上角是條件，右下角是結果\n- This 跟 That 都是一些服務所構成的\n- IFTTT 可以用來自動發送 Email、簡訊、通知等等\n- 使用者可以自己設定條件，例如時間、天氣等等 END"}
{"prompt": "在5-6-3的04:25的重點是什麼 \n\n###\n\n", "completion": " - Service 包含 Email、IFTTT、Line、Notification、Space 和天氣相關的\n- Webhooks 可以想像成一個網頁的微接口\n- 在 IF This 的 This 設定一個事件，程式呼叫事件後 This 滿足並做 That 的部分\n- 建立一個 applet，透過 webhook 來幫忙做事情 END"}
{"prompt": "在5-6-3的05:33的重點是什麼 \n\n###\n\n", "completion": " - 建立一個名為 stockLine 的程式\n- 建立一個觸發器，設定 This 部分\n- 設定觸發器的 That 部分，傳送 line 訊息\n- 設定 line 的 notify，相當於一個機器人，可以發送訊息\n- 可以邀請 notify 到其它群組中。 END"}
{"prompt": "在5-6-3的06:36的重點是什麼 \n\n###\n\n", "completion": " - 傳送 line 的訊息時可以帶參數，例如股價。\n- [[ ]] 中的 value1 會存儲股價。\n- 可以在提示字前加上股價為：。\n- 完成後點擊 finish。\n- 建立完程式後需要進行綁定。 END"}
{"prompt": "在5-6-3的07:42的重點是什麼 \n\n###\n\n", "completion": " - 這個範例中會用到兩個服務：webhook 和 line。\n- 在 service 中點選 line 進行綁定，也可以在 setting 中解除綁定。\n- 在 webhook 中設定後會得到一個 id，程式碼中會用到。\n- 接下來會開始介紹程式碼。 END"}
{"prompt": "在5-6-3的08:41的重點是什麼 \n\n###\n\n", "completion": " - 需要 import 台灣股票和 request\n- 建構 webhook 的網址，格式為 https://maker.ifttt.com/trigger/{event_name}/with/key/{webhook_id}\n- webhook_id 是在 IFTTT 上建立 webhook 時所產生的\n- 可以在 IFTTT 的 webhook service 中找到 documentation，複製 webhook 網址 END"}
{"prompt": "在5-6-3的09:54的重點是什麼 \n\n###\n\n", "completion": " - 設定 IFTTT 的 Webhook 服務，以便程式可以透過它傳送訊息。\n- 在程式中設定 Webhook 的 URL，並將股票價格等資訊帶入 URL 中。\n- 使用 request.get 函式發送 URL，以觸發 IFTTT 的 Webhook 服務。\n- 透過 IFTTT 的 Line 服務，即時收到股票價格的資訊。 END"}
{"prompt": "在5-7-1的00:13的重點是什麼 \n\n###\n\n", "completion": " - 這是一個電影推薦的迷你程式\n- 對初學者來說，這個程式已經算是蠻複雜的\n- 題目是要做一個推薦，給一個人推薦其他的電影\n- 推薦的方法是找出跟這個人最接近的人，然後從那個人看過的電影中推薦\n- 整個的運作流程是透過讀入姓名，呼叫 recommend 函式，代入 rank 資料，最後印出推薦的電影 END"}
{"prompt": "在5-7-1的02:29的重點是什麼 \n\n###\n\n", "completion": " - 設計測試案例是解題的第一步\n- 分解問題是解題的第二步\n- 技巧包括印出階段性成果、使用中斷點和觀看變數、函式註解、不害怕錯誤訊息\n- 設計測試案例需要考慮 input 和期望的 output\n- 測試案例的 input 可以有變化，例如有人看過的電影不同\n- 測試案例的變化可以幫助我們找出程式的邊界條件 END"}
{"prompt": "在5-7-1的04:34的重點是什麼 \n\n###\n\n", "completion": " - 模型善於從字幕中獲取程式相關重點\n- 字幕中提到了 Cold War 電影的評分\n- 推薦給 Loe 的電影是 Tiger\n- 測試案例不夠，需要定義一些\n- 需要寫一個 recommend function\n- 推薦演算法的第一步是找出喜好最接近 p 的人\n- 找出喜好最接近的人需要用 for 迴圈和距離計算\n- recommend function 不是兩三行就能解決的事情\n- 建議將 recommend function 封裝成一個 function END"}
{"prompt": "在5-7-1的06:26的重點是什麼 \n\n###\n\n", "completion": " - 要找最接近的人，使用 nearest function\n- 將資料代入 nearest function，找到最接近的人 q\n- 從 q 的 like_list 中找到他最喜歡的影片列表 like_list\n- 將 like_list 排序，找到 p 還沒評價過的電影\n- 將找到的電影放入 not_watched 變數中，作為推薦給使用者的電影\n- 推薦的過程會分解成 nearest 和 my_favoriate 兩個 function\n- nearest function 的演算法是假設一個最大的值，從迴圈中一個一個比較找到最小距離 END"}
{"prompt": "在5-7-1的08:31的重點是什麼 \n\n###\n\n", "completion": " - 程式中的迴圈可以用來找到距離最短的人\n- 距離的計算需要抓取 rank，相減、平方、相加、開根號\n- 程式中的 function 可以封裝功能，讓程式更易讀、易懂\n- 將大問題分解成小問題，各個擊破\n- 在程式開發中，印出階段性的成果可以幫助除錯 END"}
{"prompt": "在5-7-1的10:53的重點是什麼 \n\n###\n\n", "completion": " - 印出階段性的成果或變數有助於除錯。\n- 善用中斷點和觀看變數來除錯。\n- 程式碼中 function 必須先定義。\n- MAIN 通常會寫在程式碼最下面。 END"}
{"prompt": "在5-7-1的12:56的重點是什麼 \n\n###\n\n", "completion": " - 程式會從字幕中獲取程式相關重點。\n- 程式會呼叫 recommend 這個 function。\n- 推薦給 Jie 和 Jie 喜好接近的人是 John。\n- recommend 這個 function 的程式碼。\n- 在做 nearest 的這個 function 的時候會出現的一些錯誤。\n- 中斷點的使用。\n- Debug 模式的使用。 END"}
{"prompt": "在5-7-1的15:06的重點是什麼 \n\n###\n\n", "completion": " - 切換到 Variable explorer 觀察變數狀況。\n- 一步一步跑程式碼，觀察變數的變化。\n- 在需要時使用 stepinto 進入 function 中觀察。\n- 先跳過 function，觀察算出來的值是否正確。\n- 觀察 rank 資料，找出共通的電影。\n- 確認算出來的距離是否正確。 END"}
{"prompt": "在5-7-1的17:00的重點是什麼 \n\n###\n\n", "completion": " - min_dis 等於 d\n- d 是 4\n- 4 小於 10 所以進入該區塊\n- nearest_p 設為 people，即 Nick\n- 使用 step into 檢查 dis 函數\n- 使用 step over 跳出迴圈\n- 使用 continue 跳到下一個中斷點\n- people 變成 Jie，p 為 true\n- people 變成 John，距離應為 0 END"}
{"prompt": "在5-7-1的19:04的重點是什麼 \n\n###\n\n", "completion": " - 模型善於從字幕中獲取程式相關重點\n- 程式碼架構跟解題的方法需要自己寫\n- 需要把 rank 的資料改成 s2\n- s3 推薦了一個電影\n- s4 推薦了 Cold War，但應該是 Coco\n- 問題在於為什麼跑出 Nick，需要解決 END"}
{"prompt": "在6-0-1的00:13的重點是什麼 \n\n###\n\n", "completion": " - 資料處理介紹\n- 四個章節: pandas 簡介、進階資料處理、圖表繪製及應用\n- pandas 是什麼\n- 沒有用過 pandas END"}
{"prompt": "在6-0-1的00:32的重點是什麼 \n\n###\n\n", "completion": " - Excel 是一個簡單但功能強大的工具。\n- Excel 的基本結構是將資料一筆一筆儲存下來。\n- 資料之間有共同的欄位，即 column 或 feature。\n- 可以對儲存的資料進行操作。 END"}
{"prompt": "在6-0-1的00:56的重點是什麼 \n\n###\n\n", "completion": " - 可以從字幕中獲取程式相關重點。\n- Excel 和 Python 都可以計算加總、平均和標準差。\n- 在 Python 中，可以使用 pandas 套件處理這些問題。\n- pandas 可以處理包含水果名稱和價格的資料。 END"}
{"prompt": "在6-0-1的01:21的重點是什麼 \n\n###\n\n", "completion": " - 一筆資料的特性和 feature 是相關的\n- 可以計算出平均值、標準差等結果\n- 可以用 pandas 快速算出這些值\n- 第二個部分是進階 pandas 的資料處理 END"}
{"prompt": "在6-0-1的01:45的重點是什麼 \n\n###\n\n", "completion": " - 資料跨表格時，如何進行合併(join)。\n- 如何處理缺失資料(missing data)。\n- 第三部分是關於圖表繪製。 END"}
{"prompt": "在6-0-1的02:07的重點是什麼 \n\n###\n\n", "completion": " - 大家都承認字幕非常重要。\n- 設計好的圖表可以解釋很多現象和數據。\n- 本章節介紹各種表格，包括長條圖和圓餅圖等。\n- 學習如何使用 pandas 繪製這些圖表。\n- 第四部分是應用。 END"}
{"prompt": "在6-0-1的02:32的重點是什麼 \n\n###\n\n", "completion": " - 介紹三個應用\n- 第一個是新北市的 ubike\n- 已經有用台中市的 ibike 做範例\n- 範例中使用 JSON file\n- 現在直接從 csv 讀取資料\n- csv 是表格式的資料 END"}
{"prompt": "在6-0-1的02:59的重點是什麼 \n\n###\n\n", "completion": " - 可以從字幕中獲取程式相關重點。\n- 直接將字幕讀入程式中進行處理。\n- 第二個資料是大專院校校別學生數，對於在校學生非常重要。\n- 可以利用這個數據進行計算。 END"}
{"prompt": "在6-0-1的03:20的重點是什麼 \n\n###\n\n", "completion": " - 男女比例最懸殊的幾所學校\n- 可以用程式快速計算\n- 台北市不動產買賣實價登錄\n- 注意一筆資料\n- 透過三個範例的講解，可以提升對Python和Pandas的理解\n- 加強資料處理能力 END"}
{"prompt": "在6-0-1的03:51的重點是什麼 \n\n###\n\n", "completion": " - 模型善於從字幕中獲取程式相關重點。\n- 介紹一個 open data 的網站。\n- 三筆資料都是從 open data 中取得。\n- 找到自己有興趣的資料，實際讀取並進行運算和圖形表現。\n- 跨越了資料處理方面的一大步。 END"}
{"prompt": "在6-1-1的00:13的重點是什麼 \n\n###\n\n", "completion": " - pandas 是用來做資料分析的工具。\n- 2D 資料表是常被應用的一種資料處理方式。\n- 資料表可以做很多應用，如查詢、彙總資料、對某一筆資料做運算等。\n- 可以用圖表的方式呈現資料，如圓餅圖、長條圖等。 END"}
{"prompt": "在6-1-1的01:40的重點是什麼 \n\n###\n\n", "completion": " - 比較水果價格與數量差異\n- 表示價格與產量之間的關係\n- 在 Excel 中可以輕易得到資料\n- 小計等於價格乘以數量\n- 可以用 Python 的 Pandas 達到相同效果\n- 認識 column 或 feature 的概念 END"}
{"prompt": "在6-1-1的03:02的重點是什麼 \n\n###\n\n", "completion": " - 可以從字幕中獲取程式相關重點的模型\n- 重點在於從字幕中獲取程式相關重點\n- 字幕中提到了程式相關的重點，如價格、數量、data row、pandas等\n- pandas有相關的api可以查看，網址為pandas.pydata.org\n- pandas可以透過dict建立資料表\n- 建立資料表時，可以設定column和features，以及對應的值 END"}
{"prompt": "在6-1-1的04:09的重點是什麼 \n\n###\n\n", "completion": " - pd 是 pandas 的物件\n- pd.dataframe 可以產生一個 dataframe 的物件\n- 可以透過索引值來取得資料\n- 可以自己指定索引值\n- 可以透過指定欄位來當作索引值 END"}
{"prompt": "在6-1-1的05:08的重點是什麼 \n\n###\n\n", "completion": " - 透過索引值來印出特定欄位的資料，例如 df.price。\n- 使用 loc 方法來抓取特定索引值的資料，例如 loc['apple']。\n- 索引值可以是任何值，不一定是數字，例如可以是水果名稱。\n- 透過 loc 方法抓取資料時，要在中括號內放入索引值。 END"}
{"prompt": "在6-1-1的06:02的重點是什麼 \n\n###\n\n", "completion": " - 可以從字幕中獲取程式相關重點\n- loc 可以抓取指定索引值的資料\n- 如果要抓取多筆資料，可以用 list 或是指定位置\n- loc 代表索引值，iloc 代表位置\n- 在資料處理時，有時需要先處理資料再進行操作 END"}
{"prompt": "在6-1-1的07:12的重點是什麼 \n\n###\n\n", "completion": " - 透過 `show` 函數來查看資料內容。\n- 資料量大時，可以使用 `head` 函數來查看前幾筆資料。\n- 使用 `tail` 函數來查看後幾筆資料。\n- 使用 `sample` 函數來隨機查看幾筆資料。\n- 使用 data slicing 技術來選取部分欄位。 END"}
{"prompt": "在6-1-1的08:17的重點是什麼 \n\n###\n\n", "completion": " - 操作 DataFrame 的方式可以透過中括號或是 . 符號\n- 可以透過中括號或是 . 符號來選取 DataFrame 中的欄位\n- 如果要選取多個欄位，可以使用 list 的方式將欄位名稱包起來\n- 可以透過條件篩選來選取 DataFrame 中符合條件的資料\n- 條件篩選會回傳一個布林值的 DataFrame\n- 可以使用 df.loc 來選取符合條件的資料 END"}
{"prompt": "在6-1-1的09:35的重點是什麼 \n\n###\n\n", "completion": " - 可以透過 df[g] 來篩選資料\n- 可以使用簡約的寫法 df[c1 > 10] 來篩選資料\n- 可以使用 df.sort_values(by='c1') 來排序資料\n- 可以使用 df.mean() 和 df.median() 來計算平均數和中位數 END"}
{"prompt": "在6-1-1的10:47的重點是什麼 \n\n###\n\n", "completion": " - 可以使用加總或累加來處理資料\n- 可以使用標準差來描述資料的分佈情況\n- 使用 describe 函數可以對整個資料表進行概括性描述\n- 可以使用 group by 函數對資料進行分組，並對每組進行彙總統計 END"}
{"prompt": "在6-1-2的00:13的重點是什麼 \n\n###\n\n", "completion": " - 首先要 import pandas。\n- 宣告一個 dictionary。\n- 透過 dataframe 產生資料表。\n- 取得某個欄位的所有資料。\n- 索引值是從 0 開始遞增的。\n- 使用 loc 取得某一筆資料。\n- 取得某一欄位的第幾筆資料。\n- 取得某一筆資料裡面的某一個欄位。 END"}
{"prompt": "在6-1-2的01:33的重點是什麼 \n\n###\n\n", "completion": " - 程式中的結果可以透過字幕獲取相關重點。\n- 在應用中，通常是從資料庫或檔案中讀取資料，而不是使用 dict。\n- 使用 read_csv 函式可以從 csv 檔案中讀取資料。\n- 使用 sample 或 head 函式可以顯示部分資料。\n- 可以使用自訂的 index 來替代系統預設的 index。 END"}
{"prompt": "在6-1-2的03:02的重點是什麼 \n\n###\n\n", "completion": " - 可以從字幕中獲取程式相關重點\n- 使用 list 作為索引值\n- 使用欄位當成索引值\n- 使用 index 挑選欄位當成索引值 END"}
{"prompt": "在6-1-2的04:10的重點是什麼 \n\n###\n\n", "completion": " - 操作 DataFrame 的 index 可以使用 set_index 方法\n- 可以自訂 index，並使用 list 來宣告\n- 可以使用 reset_data 方法來重設資料\n- 使用 df[欄位名稱] = 新值 來改變 DataFrame 的值 END"}
{"prompt": "在6-1-2的05:16的重點是什麼 \n\n###\n\n", "completion": " - 可以用 list 來選取資料表中的欄位\n- 可以用點來選取資料表中的欄位\n- 可以用點來將所有欄位的值設為相同的值\n- 可以使用彙總函數來計算欄位的加總 END"}
{"prompt": "在6-1-2的06:29的重點是什麼 \n\n###\n\n", "completion": " - 可以從字幕中獲取程式相關重點。\n- cumsum 函數可以用來做累加。\n- describe 函數可以用來計算數值相關的統計量。\n- 可以透過指定 columns 參數，只抓取需要的欄位。 END"}
{"prompt": "在6-1-2的07:39的重點是什麼 \n\n###\n\n", "completion": " - 從字幕中獲取程式相關重點的模型。\n- 抓取 dataframe 中價格和數量欄位。\n- 透過篩選方式只選取價格和數量欄位。\n- 添加一個欄位，使用 pandas 中的 series 物件，series 是一維的，等於是一個 column。 END"}
{"prompt": "在6-1-2的09:02的重點是什麼 \n\n###\n\n", "completion": " - 新增欄位的方法是使用 `df['欄位名稱'] = 欄位值` 的方式。\n- 可以從其他欄位計算出新的欄位值，例如 `df['累計'] = df['數量'].cumsum()`。\n- 可以新增多個欄位，例如 `df['品質']` 和 `df['產地']`。\n- 資料表的欄位可以是數值、文字或其他資料型態。 END"}
{"prompt": "在6-1-2的10:17的重點是什麼 \n\n###\n\n", "completion": " - 可以透過 df.append 增加一個 dataframe。\n- 可以透過 loc 選擇部分的資料，如果資料本身的索引是很多的話，可以用一個 list 來表示。\n- 可以先選擇欄位，這些欄位可以是多欄位的。 END"}
{"prompt": "在6-1-2的11:36的重點是什麼 \n\n###\n\n", "completion": " - 資料篩選可以使用 `loc` 方法\n- 使用 `condition` 來篩選資料\n- 篩選後的資料是一個布林值，需要再次使用 `condition` 將其包裝成資料表\n- 使用 `sort_values` 方法對資料進行排序\n- 可以指定排序的欄位以及排序方式（遞增或遞減） END"}
{"prompt": "在6-2-1的00:13的重點是什麼 \n\n###\n\n", "completion": " - 介紹資料處理的方法\n- 偏向前置處理的部分\n- 資料可能不整齊，有 missing data\n- 以水果為例，其中一個水果的價格不明。 END"}
{"prompt": "在6-2-1的00:45的重點是什麼 \n\n###\n\n", "completion": " - D 的數量\n- 資料集不完整\n- 處理方式：刪除或用其他資料頂替 END"}
{"prompt": "在6-2-1的01:09的重點是什麼 \n\n###\n\n", "completion": " - 這個地方已經定義了一個名為 reset data 的 function。\n- 我們要執行這個 function。\n- 執行完後，我們要印出結果。\n- 在這個地方，我們看到的是 None，代表空值。\n- 在 pandas 中，None 也代表空值。 END"}
{"prompt": "在6-2-1的01:33的重點是什麼 \n\n###\n\n", "completion": " - NaN 代表空值的符號。\n- dropna 是一個函數，可以刪除含有空值的資料。\n- C 和 E 的含有空值的資料已被刪除。 END"}
{"prompt": "在6-2-1的02:08的重點是什麼 \n\n###\n\n", "completion": " - 刪除具有空值的欄位\n- 可以刪除整個欄位或是指定欄位\n- 軸是1代表column的資料\n- 刪除後印出df觀察 END"}
{"prompt": "在6-2-1的02:43的重點是什麼 \n\n###\n\n", "completion": " - 這個模型善於從字幕中獲取程式相關重點。\n- 在02:43-02:46的字幕中，提到已經刪除了兩個欄位。\n- 在02:46-02:49的字幕中，提到印出來的 dataframe 還是完整無缺的。\n- 在02:51-02:54的字幕中，提到這個 function 本身並不會傷害 dataframe。\n- 在02:56-02:58的字幕中，提到 dataframe 這一個資料。\n- 在02:59-03:01的字幕中，提到它會回傳另外一個 dataframe。\n- 在03:02-03:05的字幕中，提到預設值的話這個都是用 0。\n- 在03:05-03:08的字幕中，提到如果不寫的話也是沒關係的。\n- 在03:08-03:12的字幕中，提到如果是這個 default 的 dropna 的話，那它會把兩筆資料把它做一個刪除。 END"}
{"prompt": "在6-2-1的03:15的重點是什麼 \n\n###\n\n", "completion": " - 第二種情況是填補 NaN 值。\n- 使用 dict 宣告。\n- 價格為 10，數量為 40。\n- 如果價格為 NaN，則用 10 來頂替。\n- 如果數量為 NaN，則用 40 來頂替。\n- 程式執行後，NaN 值已被頂替。 END"}
{"prompt": "在6-2-1的03:45的重點是什麼 \n\n###\n\n", "completion": " - 資料用40來頂替\n- 取一個隨機值來填值\n- 範圍內填一個固定值\n- 往前或往後參考 END"}
{"prompt": "在6-2-1的04:21的重點是什麼 \n\n###\n\n", "completion": " - 資料中有一個欄位代表時間，具有連續性。\n- 有些資料可能會缺失，但與前一筆資料相差不大，對整個資料的運算影響不大。\n- 可以將缺失的資料用前一筆資料的值來代替。 END"}
{"prompt": "在6-2-1的04:54的重點是什麼 \n\n###\n\n", "completion": " - 資料會 follow 前面的資料或後面的資料\n- 如果是往前參考，則資料會 follow 前面的資料\n- 如果是往後參考，則資料會 follow 後面的資料\n- 如果沒有後面的資料，則保持原來的 NaN 值 END"}
{"prompt": "在6-2-2的00:12的重點是什麼 \n\n###\n\n", "completion": " - 介紹資料的整併\n- 資料來源可能有很多，包括不同的表格\n- 需要先把資料做整併才能進行分析\n- 整併有兩種方式：橫向和縱向\n- 以學年度和收入狀況的資料為例，介紹資料結構相同但來源不同的情況 END"}
{"prompt": "在6-2-2的00:51的重點是什麼 \n\n###\n\n", "completion": " - 可以從字幕中獲取程式相關重點。\n- 整併資料有縱向和橫向兩種方式。\n- 縱向整併後欄位不變，資料量增加。\n- 橫向整併後欄位名稱會變，欄位數量增加，但資料本體不變。\n- 整併資料的方式是使用 merge。 END"}
{"prompt": "在6-2-2的01:44的重點是什麼 \n\n###\n\n", "completion": " 這段字幕主要在介紹一個範例，講解如何透過縱向整併和 merge 來整合兩個表格的資料。其中，縱向整併是指將兩個表格的資料沿著垂直方向合併，而 merge 則是指將兩個表格的資料根據某些共同的欄位進行合併。透過這個範例，可以讓觀眾更加了解這兩種整合方式的應用。 END"}
{"prompt": "在6-2-2的02:38的重點是什麼 \n\n###\n\n", "completion": " - df1 與上面的表格相同。\n- df3 與上面的表格不同。\n- df3 多了學號、cs、資料結構兩個欄位。\n- 要把 df1、df2、df3 整併成一個新的表格。\n- 新的表格總共有 6 個欄位，包含學號。\n- 新的表格欄位變多了。\n- 觀念：減號條列重點。 END"}
{"prompt": "在6-2-2的03:22的重點是什麼 \n\n###\n\n", "completion": " - df1 和 df4 都有一個學號、英文和數學欄位。\n- df4 多出一個 cs 欄位。\n- df4 的資料內容有一些重疊和新增。 \n- df1 和 df4 的交集是 inner 的 merge。 END"}
{"prompt": "在6-2-2的03:58的重點是什麼 \n\n###\n\n", "completion": " - 001、008、9 是學生資料的編號。\n- 008、9 是左邊沒有的學生資料。\n- 001 是共同有的學生資料。\n- Merge 這兩筆資料會產生交集。\n- 交集的共同點是 001 的這個學生。\n- 001 的英文、數學、物理和 CS 的成績都會呈現在這個地方。 END"}
{"prompt": "在6-2-2的04:38的重點是什麼 \n\n###\n\n", "completion": " - 比較欄位名稱是否一樣，相同的話就合併進來。\n- 如果有交集，就會有所謂的聯集，稱為 outer 的 merge 或 outer 的 join。\n- outer 的 merge 或 outer 的 join 會把兩個表格整併在一起。 END"}
{"prompt": "在6-2-2的05:21的重點是什麼 \n\n###\n\n", "completion": " - 使用 outer merge 可以將所有資料呈現出來。\n- 但是有些資料可能會缺少某些值，例如 002 的成績。\n- 因此在整併後，需要注意缺失值的處理。 END"}
{"prompt": "在6-2-2的05:52的重點是什麼 \n\n###\n\n", "completion": " - 這個地方它就不曉得要填什麼。\n- 就填上一個 nan，就是空值的意思。\n- 那同理啦，這個 003 跟 004 也都是填上 nan。\n- 對 008 的這筆資料來講，他是有 cs 的這個資料的，沒有的是這個 nan。\n- 所以這個地方就填上這樣的值。\n- 我們採取 outer 這個 merge 的時候，記得資料全部都會呈現。\n- 現在我們再來看另外一種叫做 left 的這個 outer。\n- 我左邊的資料都一定要保有，左邊有 1 到 4 嘛，所以 1 到 4 全部都有。 END"}
{"prompt": "在6-2-2的06:38的重點是什麼 \n\n###\n\n", "completion": " - 左邊的資料是主體，右邊的資料是要合併進來的。\n- 左邊的 inner merge 只會呈現兩邊都有的資料。\n- 左邊的 outer merge 會呈現左邊所有的資料，右邊沒有的資料會填上空值。\n- 右邊的 outer merge 會呈現右邊所有的資料，左邊沒有的資料會填上空值。 END"}
{"prompt": "在6-3-1的00:13的重點是什麼 \n\n###\n\n", "completion": " - 資料視覺在資料分析中非常重要，好的圖表可以幫助我們理解資料的含意。\n- 在 Python 中，常用的資料視覺化套件是 Matplotlib 中的 pyplot。\n- Matplotlib 可以畫出各種圖表，但使用起來比較瑣碎。\n- Pandas 的 DataFrame 在畫圖時會呼叫 Matplotlib 來幫助畫圖。\n- 常用的圖表包括折線圖、柱狀圖、散佈圖、箱形圖等。 END"}
{"prompt": "在6-3-1的01:27的重點是什麼 \n\n###\n\n", "completion": " - 折線圖可以比較資料的大小和呈現趨勢。\n- Bar chart 是一個條狀圖，主要用來比較資料的大小。\n- 圓餅圖可以比較資料所佔比例的多寡。\n- 直方圖用來表示某一個資料或一個區段的資料，密度表示多少個資料的量落在該區間。 END"}
{"prompt": "在6-3-1的02:32的重點是什麼 \n\n###\n\n", "completion": " - 大部分的資料都是落在大概 100 左右的。\n- 140 或者是 60 他的資料量就會比較少一點。\n- 我們常看到這個 normal distribution 就是用直方圖了來去做呈現。\n- Scatter plots 這個散佈圖可以用來呈現兩個數值大小之間的關係。\n- Boxplot 又叫做盒鬚圖，他也是用來比較資料的分佈。 END"}
{"prompt": "在6-3-1的03:32的重點是什麼 \n\n###\n\n", "completion": " - 每一個資料都有五個比較重要的點，分別是極小值、中位數、q3、極大值。\n- 極小值以下或極大值以上的資料代表著一個離群值。\n- 中位數代表這一筆資料中間大的那一個值，贏過百分之五十的人。\n- q1代表在四分之一的位置，贏過 25% 的人。\n- q3代表在四分之三的位置，贏過 75% 的人。 END"}
{"prompt": "在6-3-1的04:34的重點是什麼 \n\n###\n\n", "completion": " - 箱型圖中的箱子佔了50%的資料，中位數越低代表中間的值越偏低，箱型圖越窄代表中間的值越緊密集中在箱子裡面。\n- pandas常用的觀念包括title(圖表名稱)、legend(圖例名稱)、軸名稱。 END"}
{"prompt": "在6-3-1的05:40的重點是什麼 \n\n###\n\n", "completion": " - xlabel 跟 ylabel 可以用來表示圖表的標籤。\n- tick 代表刻度。\n- 使用兩個表格來呈現圖表。\n- s 代表一群學生，共有 50 個學生，他們的成績包括英文、數學和物理。\n- sg 代表三個班級 C1、C2、C3，男女生的數量。\n- 使用 plot 指令畫折線圖。\n- s 是一個 dataframe 的物件，使用 .plot 方法畫圖。\n- title 可以用來設定圖表的標題。 END"}
{"prompt": "在6-3-1的06:41的重點是什麼 \n\n###\n\n", "completion": " - 字幕中有 title 的設定，可以讓圖表呈現出標題。\n- 使用 matplot 來繪製圖表，需要先 import 相關套件。\n- 設定 x 軸與 y 軸的方法在 matplot 與 dataframe 中不同。\n- 在 dataframe 中沒有直接的物件可以設定 x 軸與 y 軸，需要先進行處理。 END"}
{"prompt": "在6-3-1的07:42的重點是什麼 \n\n###\n\n", "completion": " - 可以從字幕中獲取程式相關重點\n- 要繪製 histogram 只需要一個指令 s.hist()\n- 物理科目成績分布不佳，0分到十幾分的數量較多\n- 繪製 Bar chart 只需要一行指令 s.plot.bar\n- 可以指定 Bar chart 的大小 END"}
{"prompt": "在6-3-1的08:43的重點是什麼 \n\n###\n\n", "completion": " - figsize 可以設定圖表的大小，10 代表寬度，5 代表高度。\n- 若要製作橫向的 bar chart，可以在 bar 右邊加上一個 h，代表 horizon 水平的意思。\n- Bar chart 可以清楚地呈現資料，例如男女生人數的比較。\n- 如果有多筆資料需要呈現，可以使用 subplots=True 參數，讓圖表自動分開呈現。 END"}
{"prompt": "在6-3-1的09:44的重點是什麼 \n\n###\n\n", "completion": " - 要呼叫 plot 再呼叫 pie 來呈現 pie chart。\n- y=boy 代表要分析 y 的資料。\n- autopct pct 是代表 percent 就是百分比的意思，並用百分制的方式呈現。\n- .2f 是代表小數點下兩位。\n- figsize 是圖形的大小。\n- subplots=True 可以呈現多筆資料。 END"}
{"prompt": "在6-4-1的00:00的重點是什麼 \n\n###\n\n", "completion": " - 這個章節要講的是新北市youbike相關資訊應用。\n- 資料的結構包含了每一個站點的代碼、名稱、總共有多少個停車格、目前還有多少車子在這個station裡面、所在的區域、坐標等等。\n- 可以使用dataframe的方式來讀進台中市youbike的資訊，效果比使用dictionary更方便。\n- 資料可以從data.gov.tw下載，下載csv的檔案，使用dataframe去讀取。\n- 要使用視覺化的方式來畫圖。 END"}
{"prompt": "在6-4-1的01:58的重點是什麼 \n\n###\n\n", "completion": " - 可以從字幕中獲取 youbike 的 station 數量和分佈情況。\n- 可以用圓餅圖和分佈圖呈現 youbike 的分佈情況。\n- 可以畫出借出率，了解每個 station 的受歡迎程度。 END"}
{"prompt": "在6-4-1的03:35的重點是什麼 \n\n###\n\n", "completion": " - 透過借出率大小繪製圈圈大小\n- 宣告三個 function，分別是設定字型、處理中文字型、初始化資料\n- 設定資料目錄為 data/youbike，透過 pd.read_csv 讀取資料\n- header=0 表示第一列是欄位名稱 END"}
{"prompt": "在6-4-1的04:58的重點是什麼 \n\n###\n\n", "completion": " - 檔案中的表頭是欄位名稱的說明，不是一筆資料。\n- 在讀取資料時，需要將 header 設為零，以避免誤認表頭為資料。\n- 在 dtype 中指定欄位的資料型態，避免誤判資料型態。\n- 設定字型。\n- 讀取資料。 END"}
{"prompt": "在6-4-1的06:15的重點是什麼 \n\n###\n\n", "completion": " - 資料已經被讀進來，可以到 Variable explorer 中查看。\n- 在 dataframe 中，每一筆資料包含站亭代碼、站名、總位置數、目前停車數、所在區域等資訊。\n- 可以點擊 sarea 欄位進行排序，觀察各區域的站數分布。\n- 在 total 欄位中，數字會以背景顏色標示，點擊 total 欄位可以進行排序。 END"}
{"prompt": "在6-4-1的07:26的重點是什麼 \n\n###\n\n", "completion": " - 這段字幕中提到的模型擅長從字幕中獲取程式相關的重點。\n- 字幕中提到了一個表格，其中使用不同的顏色表示不同的數字大小。\n- 程式中使用了 groupby 函數來將資料分群，並使用長條圖呈現每個區域的數量。 END"}
{"prompt": "在6-4-1的08:38的重點是什麼 \n\n###\n\n", "completion": " - 使用 sarea 做分群\n- 要算出分群後的數量，使用 count\n- count 的結果會儲存在所有欄位中\n- 取得 sno 的值即為分群後的數量\n- 使用 plot.bar 畫出長條圖\n- 設定 figsize 參數調整圖片大小 END"}
{"prompt": "在6-4-1的09:46的重點是什麼 \n\n###\n\n", "completion": " - 透過 x 軸和 y 軸分別呈現資料的名稱和 count 值\n- 使用 groupby 函數將資料按照 sarea 分群\n- 將分群後的資料進行排序，並使用 rename 函數重新命名資料\n- 將排序後的資料儲存至 station count 變數中 END"}
{"prompt": "在6-4-1的10:57的重點是什麼 \n\n###\n\n", "completion": " - 資料中的欄位名稱可能不太好，需要進行 rename。\n- 使用 pandas 的 rename function 進行欄位名稱的修改。\n- rename function 的參數是一個 dictionary，將原本的欄位名稱當作 key，新的欄位名稱當作 value。\n- inplace 參數設為 True，代表在原本的 DataFrame 上進行修改，而不是回傳一個新的 DataFrame。\n- 修改完欄位名稱後，將結果儲存在一個新的變數中。 END"}
{"prompt": "在6-4-1的11:56的重點是什麼 \n\n###\n\n", "completion": " - 進行程式碼執行\n- 觀察 station count 欄位名稱修改\n- 進行排序，依照 count 由小到大排序\n- 畫出 bar chart，由小而大的一筆資料 END"}
{"prompt": "在6-4-2的00:00的重點是什麼 \n\n###\n\n", "completion": " - 延續之前的 bar chart。\n- 使用 pie chart 呈現資料。\n- 先觀察 station count 資料。\n- station count 是每個區域的 station 數量。\n- 使用一行程式碼即可畫出 pie chart。\n- 直接對 dataframe 使用 plot.pie()。 END"}
{"prompt": "在6-4-2的00:42的重點是什麼 \n\n###\n\n", "completion": " - 資料是 count。\n- y 等於 count，autopct 是小數點下一位。\n- 制定 title。\n- 執行程式碼。\n- 資料有排序過。\n- 排序是由小而大的。 END"}
{"prompt": "在6-4-2的01:18的重點是什麼 \n\n###\n\n", "completion": " - 資料已經排序過，最小的深坑區佔了百分之十五點三。\n- 接下來要看地理分布，把所有的 station 用地理方式呈現出來。\n- 執行後呈現的結果中，中間空的地方是台北市，x 軸代表經度。 END"}
{"prompt": "在6-4-2的01:53的重點是什麼 \n\n###\n\n", "completion": " - 這個地方相對於是我的緯度\n- 所以要畫出這樣子的一筆資料的話\n- 其實我們只需要兩個欄位\n- 一個就是他的經度 一個就是他的緯度\n- 這個在 df 裡面本來就有這兩筆資料了\n- 所以我們就去選擇這兩個欄位\n- lng 跟 lat 把他們放在 df2 裡面\n- 然後你要去畫這一個散佈圖的話就是 scatter\n- x 軸我們去讓他設定是lng  y 軸的話是lat END"}
{"prompt": "在6-4-2的02:26的重點是什麼 \n\n###\n\n", "completion": " - 設定大小可以呈現出一個結果\n- 觀察 df2 的這一筆資料\n- 觀察借出率\n- 只算有在營運的\n- act 欄位等於1代表有在營運 END"}
{"prompt": "在6-4-2的03:00的重點是什麼 \n\n###\n\n", "completion": " - 最右邊的1代表營運中\n- 借出率 = 站內車輛數 / 總車輛數\n- 目前有在站內的比例 = 1 - 借出率 END"}
{"prompt": "在6-4-2的03:37的重點是什麼 \n\n###\n\n", "completion": " - 借出去的物品需要計算百分比。\n- 計算完百分比後，需要求小數點下一位。\n- 使用 round 1 函數來計算小數點下一位。\n- df2 的資料中新增了一個 rate 欄位，用來表示借出去的比例。 END"}
{"prompt": "在6-4-2的04:16的重點是什麼 \n\n###\n\n", "completion": " - 資料是一百所以借出率百分之百的 station，資料筆數為577筆。\n- 使用describe函數可以看到這一筆資料相關的統計，包括平均值、標準差、最小值、中位數、最大值等。\n- 如果覺得describe函數不夠視覺化，可以使用boxplot函數呈現資料分布情況。 END"}
{"prompt": "在6-4-2的04:56的重點是什麼 \n\n###\n\n", "completion": " - 資料中有50%的數值落在82到50之間。\n- 中位數大約是70。\n- 接下來回到散布圖的分佈。\n- 透過改變顏色和添加一個變數，可以更清楚地看到散布圖的分佈。 END"}
{"prompt": "在6-4-2的05:32的重點是什麼 \n\n###\n\n", "completion": " - s 代表 size 的大小，與 rate 相關。\n- 借出率越高，s 值就越大，反之則越小。\n- 圈圈大小代表 s 值的大小。\n- 少數借出率比較低的資料，圈圈大小較小。\n- 視覺化可以幫助我們更好地理解資料。 END"}
{"prompt": "在6-4-3的00:00的重點是什麼 \n\n###\n\n", "completion": " - 介紹107學年度大專院校學生的人數資料。\n- 資料可以在data.gov.tw網站找到。\n- 需要先下載資料並放在指定目錄下。\n- 資料包含學校代碼、名稱、日間部或進修部、各年級學生數量等欄位。\n- 包含一年級到五六年級、研究生等等的學生數量。 END"}
{"prompt": "在6-4-3的01:10的重點是什麼 \n\n###\n\n", "completion": " - 最後呢 有縣市的名稱還有他的體系別等等...\n- 所以我們就是先寫一個 function 把他這個資料讀進來\n- 然後學校的代碼 因為他都是是一個數字型的\n- 所以我們把他強制的告訴 pandas 說他是一個字串\n- 另外有一個我們要特別注意的，就是他原始的資料裡面 他會把這個數量是零個，他用一個 dash 來做一個表示\n- 這一個 dash 等一下我們在做加總的時候會出現問題\n- 所以這裡我們要先做一個處理，我們就跑一個迴圈，把那些欄位，只要看到 dash 的，我就把他 replace 變成是 0 END"}
{"prompt": "在6-4-3的02:08的重點是什麼 \n\n###\n\n", "completion": " - 要找出哪些欄位是數值欄位。\n- 數值欄位的範圍是從第四個 column 開始到最右邊的 -1、-2、-3。\n- 要將資料轉成字串型態，再將 dash（-）替換成 0，最後再轉成整數型態。 END"}
{"prompt": "在6-4-3的03:21的重點是什麼 \n\n###\n\n", "completion": " - 主程式\n- 資料表 df107\n- 使用 variable explorer 查看資料\n- 資料包含學校代碼、學校名稱、進修別等等\n- 分析每一間學校的人數\n- 資料包含不同學制、等級\n- 需要將同一間學校的不同資料加總 END"}
{"prompt": "在6-4-3的04:25的重點是什麼 \n\n###\n\n", "completion": " - 資料中有不同年級的資料，需要加總\n- 使用 groupby 將學校名稱相同的資料分組\n- 使用 sum 函數將分組後的資料加總\n- 新增一個名為 tot 的欄位，將所有欄位加總 END"}
{"prompt": "在6-4-3的05:35的重點是什麼 \n\n###\n\n", "completion": " - sum 預設是縱向加總，要橫向加總需要加上參數 axis=1。\n- 排序可以使用 sort_value，並且可以指定排序的欄位。\n- 排序後的結果可以再次存回原本的 DataFrame。 END"}
{"prompt": "在6-4-3的06:35的重點是什麼 \n\n###\n\n", "completion": " - 法鼓文理學院報到人數最少。\n- 台灣戲曲學院報到人數次少。\n- 可以透過 describe 看相關統計數據。\n- 法鼓文理學院報到人數最少，只有 280 人。\n- 台大報到人數最多。\n- 可以透過 head 跟 tail 看前面幾所人數比較少的學校。\n- 台大是國立大學，私立大學的數量需要計算。 END"}
{"prompt": "在6-4-3的07:39的重點是什麼 \n\n###\n\n", "completion": " - 透過學校名稱中是否包含「國立」來判斷學校是國立還是私立。\n- 在 groupby 時，將 as_index 設為 False，避免 index 影響搜尋。\n- 以上兩點是在處理一個資料集，目的是進行搜尋。 END"}
{"prompt": "在6-4-3的08:31的重點是什麼 \n\n###\n\n", "completion": " - 可以從字幕中獲取程式相關重點。\n- df 的 index 會自動排列，從 0 到最後一筆。\n- 學校的名稱會保持在 df 中，方便進行搜尋。\n- df_n 中的 n 代表國立。\n- df 後面的條件句是判斷學校名稱是否包含國立這個字，並產生出 boolean 值。\n- 將 boolean 值丟到 df 中，就可以列出所有國立大學。\n- 在條件句前面加上波浪號，就可以列出所有私立大學。 END"}
{"prompt": "在6-4-3的09:31的重點是什麼 \n\n###\n\n", "completion": " - 波浪代表 not 的意思，這樣子出來的會是沒有包含國立的就是私立的學校。\n- 如果對長的敘述有點困惑，可以先把條件複製到前面，執行一遍。\n- 緊接著條件句是 True 跟 False，代到 df 裡面就會把相對應的資料印出來。\n- 透過 len 可以知道國立大學跟私立大學的資料表的長度。\n- 國立大學的數量為 47 所，私立大學的數量為 106 所，總共為 153 所。 END"}
{"prompt": "在6-4-4的00:00的重點是什麼 \n\n###\n\n", "completion": " - 資料中有男女比例的資訊，但是分散在不同欄位中。\n- 需要寫一個 function 來處理男女比例的資訊。\n- 使用 `df.copy` 複製一個表格，以便進行後續的操作。 END"}
{"prompt": "在6-4-4的00:56的重點是什麼 \n\n###\n\n", "completion": " - 使用複製副本的方式避免原始資料被破壞。\n- 使用技巧將男生和女生的資料進行加總。\n- 將欄位名稱轉換為字串，並使用 .split() 方法將其切割成 list。\n- 新增一個 male 欄位，並將初始值設為 0。 END"}
{"prompt": "在6-4-4的01:46的重點是什麼 \n\n###\n\n", "completion": " - 主程式中有一個函式可以計算男女生的人數\n- 該函式會從一個包含學生資料的 DataFrame 中篩選出男女生的資料\n- 該函式會使用迴圈來計算男女生的人數\n- 該函式會將計算結果存入一個新的 DataFrame 中\n- 該函式會返回新的 DataFrame END"}
{"prompt": "在6-4-4的02:43的重點是什麼 \n\n###\n\n", "completion": " - 算出男女生的人數以後就可以去算一下這個比例\n- 比例的話就等於男生去除於女生\n- 然後是到小數點下兩位 那我們執行一下\n- 得到這個表以後呢 我們首先來看一下就是男女生比例\n- 還蠻均勻的這個學校\n- 那我們就把他定義成說這個比例是在於 0.9 到 1.1 之間的\n- 他的值是 between 0.9 到 1.1 之間的\n- 那我就是先產生這個條件\n- 再把這個條件放到我們這一個 dataframe 裡面做過濾 END"}
{"prompt": "在6-4-4的03:27的重點是什麼 \n\n###\n\n", "completion": " - balance\n- 滿足條件的學校\n- 排序\n- 印出前幾個學校\n- 遞減排序\n- 男生人數較多的學校 END"}
{"prompt": "在6-4-4的04:22的重點是什麼 \n\n###\n\n", "completion": " - tail 是指比較尾端的幾個學校，包含的像是護專，女生比較多。\n- 可以透過 describe 去看一下這一個狀況。\n- 平均大概是 1.1，balance 的地方大概是在 0.9。\n- df_gender 是一張大表，增加了三個欄位。\n- 可以透過 df_gender 只取這三個欄位，產生一個新的表 df_rate。\n- df_rate 比較簡潔，可以畫出 boxplot。 END"}
{"prompt": "在6-4-4的05:23的重點是什麼 \n\n###\n\n", "completion": " - df_rate 只有三個欄位，比較簡潔。\n- 分析每個縣市有多少大學。\n- 資料除了學校名稱外，還有縣市資訊。\n- 如果只用縣市名稱做 groupby，學校名稱就不見了。\n- 如果用學校名稱做 groupby，縣市名稱就不見了。\n- 有一個小技巧可以解決縣市名稱不見的問題。 END"}
{"prompt": "在6-4-4的06:21的重點是什麼 \n\n###\n\n", "completion": " - 這個模型善於從字幕中獲取程式相關重點。\n- 這段程式碼是在進行 groupby 的操作。\n- 該操作是基於縣市名稱和學校名稱兩個欄位進行的。\n- 該操作的目的是計算每個縣市有多少個學校。\n- 為了達到目的，需要將 as_index 設為 False，以保留兩個欄位。\n- 最終的結果是一個以縣市名稱為索引的 DataFrame，其中包含每個縣市有多少個學校的資訊。 END"}
{"prompt": "在6-4-4的07:09的重點是什麼 \n\n###\n\n", "completion": " - 用縣市名稱做 groupby，計算數量\n- 產生新的表，只抓學校名稱\n- 學校名稱對於這個表的意義不同 END"}
{"prompt": "在6-4-4的08:57的重點是什麼 \n\n###\n\n", "completion": " - 透過 .colors 等於學校個數\n- 把這個名稱做一次的修訂\n- 看這個 df_city，可以看到這個地方是縣市的名稱，然後接下來是學校的這個個數\n- 可以在這個地方畫出一個 bar chart 把他畫出來\n- 台北市、金門的學校個數比較少一點\n- 留著讓大家自己來練習看看，總共學生人數是多少，然後他們佔全國多少比例 END"}
{"prompt": "在4-0-1的00:13的重點是什麼 \n\n###\n\n", "completion": " - 介紹集合物件\n- 分別介紹4個不同的集合物件\n- ibike 的資料應用範例 END"}
{"prompt": "在4-0-1的00:28的重點是什麼 \n\n###\n\n", "completion": " - 使用 list 資料結構的必要性。\n- 用 list 儲存多個學生的成績。\n- 用變數儲存學生成績的不足之處。\n- 用 list 做加減乘除的運算。\n- 資料膨脹到50筆時，使用 list 的優勢。 END"}
{"prompt": "在4-0-1的00:49的重點是什麼 \n\n###\n\n", "completion": " - 模型善於從字幕中獲取程式相關重點\n- 無法處理一萬個變數，需要引入索引值的概念\n- 變數加上索引值可以豐富變化 END"}
{"prompt": "在4-0-1的01:08的重點是什麼 \n\n###\n\n", "completion": " - 方便存取任何想要的資料\n- 其他資料結構如 tuple、set、dictionary 也有類似的架構\n- 但它們可能會有些不同 END"}
{"prompt": "在4-0-1的01:24的重點是什麼 \n\n###\n\n", "completion": " - 資料在集合文件中是否可以重複\n- 資料是否有順序性\n- 資料是否可以修改\n- 資料是否可以放不同的資料型態 END"}
{"prompt": "在4-0-1的01:37的重點是什麼 \n\n###\n\n", "completion": " 這段字幕提到了處理資料時的四種方式，分別是索引值、索引方法、索引器和索引器類型。 END"}
{"prompt": "在4-0-1的01:50的重點是什麼 \n\n###\n\n", "completion": " - 新增、刪除、修改和查詢是程式相關的重點。\n- 指令和觀念可能因程式而異。\n- 學習時要特別注意差異。\n- 台中 ibike 開放資料是一個例子。 END"}
{"prompt": "在4-0-1的02:07的重點是什麼 \n\n###\n\n", "completion": " - Demo\n- ibike 方便\n- ibike 是台灣之光\n- ibike 的站點資料可以在網路上下載應用\n- 可以做很多有趣的運算 END"}
{"prompt": "在4-0-1的02:26的重點是什麼 \n\n###\n\n", "completion": " - 學習如何下載資料並進行處理。\n- 學習處理群體資料的能力。\n- 配合 if else、for 迴圈進行資料處理。\n- 能力會大幅提升。\n- 可以依據不同需求採取不同的資料結構。 END"}
{"prompt": "在4-0-1的02:53的重點是什麼 \n\n###\n\n", "completion": " - 字幕中提到了「讓你程式的運算變得更順利」，這暗示了模型能夠從字幕中獲取程式相關的重點。\n- 第三個部分中，模型具備開放資料處理的基本能力。\n- 字幕中提到了網路上有很多開放資料，這可能是模型所處理的資料來源之一。\n- 最後，字幕中提到了大家對於這些能力都很興奮，暗示了這些能力對於使用者來說是非常有價值的。 END"}
{"prompt": "在4-1-1的00:12的重點是什麼 \n\n###\n\n", "completion": " - 集合物件是一群物件的集合，並且有一定的管理方法。\n- 管理方法包括新增、修改、刪除、查詢、擷取這群的資料。\n- 在Python中有四個重要的物件型態：List、Tuple、Set、Dictionary。\n- 我們必須要考量幾個因素，例如資料內部是否可以重複、是否有順序、是否可以修改等。 END"}
{"prompt": "在4-1-1的00:48的重點是什麼 \n\n###\n\n", "completion": " - 可以從字幕中獲取程式相關重點。\n- 可以從字幕中得知集合物件型態的不同特色。\n- List是最常被使用的集合物件，具有順序性、資料可以重複、可以瀏覽、可以修改，且可以放不同型態的資料。 END"}
{"prompt": "在4-1-1的01:19的重點是什麼 \n\n###\n\n", "completion": " - List使用中括號來代表資料型態。\n- List可以放置不同的資料型態，例如字串和整數。\n- List中的元素可以是另一個List。\n- List是一個非常靈活的資料型態。 END"}
{"prompt": "在4-1-1的01:55的重點是什麼 \n\n###\n\n", "completion": " - 資料必須有意義\n- 程式設計時需要賦予資料意義\n- 第0筆資料代表學生姓名，第1筆代表學號，接下來是成績資料\n- List的四個功能：新增、刪除、修改、查詢\n- 新增使用append，刪除使用remove END"}
{"prompt": "在4-1-1的02:41的重點是什麼 \n\n###\n\n", "completion": " - 可以從字幕中獲取程式相關重點。\n- 修改資料的方式可以直接指定要修改資料的索引值，例如 A[0]=100。\n- 有時候也會用一些函式幫助修改資料，例如排序。\n- 資料在擷取的時候可以直接給一個索引值或用切片的方式。 END"}
{"prompt": "在4-1-1的03:21的重點是什麼 \n\n###\n\n", "completion": " - 這個模型善於從字幕中獲取程式相關重點。\n- 字幕中介紹了三個新增資料的函式：append、extend、insert。\n- append只是加上一個元素，extend則是extend一個list。\n- 這個模型也提到了一個範例，說明了append和extend的差異。 END"}
{"prompt": "在4-1-1的04:04的重點是什麼 \n\n###\n\n", "completion": " - students裡面有三個學生。\n- 我們額外宣告了一個List，裡面放了兩個學生。\n- append()方法可以在List的最後面加入一個資料。\n- 使用append()方法後，students會多一筆Lisa的資料。\n- extend()方法可以在List的最後面加入一個List。\n- 使用extend()方法後，jason、allen會在這組資料的後面。\n- insert()方法可以在List的指定位置加入一個資料。\n- 使用insert()方法後，可以在0的位置加上maggie。 END"}
{"prompt": "在4-1-1的04:52的重點是什麼 \n\n###\n\n", "completion": " - 將元素插入列表中，可以使用insert()方法，並指定要插入的位置。\n- 刪除列表中的元素，可以使用remove()方法或pop()方法，其中remove()方法會直接刪除元素，而pop()方法則會將刪除的元素返回。 END"}
{"prompt": "在4-1-1的05:32的重點是什麼 \n\n###\n\n", "completion": " - remove後面帶的元素(e)會移除第一個元素(e)\n- 在這個範例中我們要移除nick\n- pop如果我們沒有給他一個參數的話，他就會把最後一筆資料抓出來\n- 我們可以在pop後面加上一個索引值，意思就是要把那個索引值的元素移除並且回傳\n- 排序是我們經常會使用到的資料修改，他的語法很簡單 END"}
{"prompt": "在4-1-1的06:19的重點是什麼 \n\n###\n\n", "completion": " - 可以使用 `data.sort` 將資料由小到大排序。\n- 若要由大到小排序，可以加上 `reverse=True` 參數。\n- 排序後，原本的資料會被修改。\n- `sorted` 函式不會修改原本的資料，而是回傳一個新的排序後的資料。 END"}
{"prompt": "在4-1-2的00:13的重點是什麼 \n\n###\n\n", "completion": " - List的擷取相當的直覺\n- 我們可以用[i]來取得位置i的值\n- 當我們宣告一筆這樣的資料的時候，系統就會幫我們建立一個空間來儲存這5筆資料，並且給他們索引值從0一直到4\n- 我們要抓取第0筆資料的時候，就用 grade[0],grade[1] 以此類推\n- 我們也可以用data slicing的方式來擷取一段資料，例如我們要擷取22跟99，他的位置是在1跟2，所以我們就可以用 grade[1:3]，各位要注意第二個參數代表要擷取的終點的下一個，所以要擷取到2的時候參數必須要用3 END"}
{"prompt": "在4-1-2的01:19的重點是什麼 \n\n###\n\n", "completion": " - 可以用[start:end]的方式來抓取list中的資料，其中start代表開始的位置，end代表結束的位置。\n- 如果end沒有寫，代表從start開始抓取資料到最後。\n- 如果start沒有寫，代表從最前面開始抓取資料。\n- 可以用負數的方式來代表倒數的觀念，例如[-2:-1]代表抓取倒數第2個到倒數第1個的資料。\n- for list是一個常用的技巧，用來走訪整個資料，因為list的資料型態是屬於可瀏覽的。 END"}
{"prompt": "在4-1-2的02:23的重點是什麼 \n\n###\n\n", "completion": " - 進入到迴圈以後\n- 每一次去抓取st\n- 代表的就是這個list中的每個元素\n- 第一次進到這個迴圈st指的是第0個值也就是'nick'\n- 這對於我們再做整體資料的運算十分方便\n- 例如我們現在要加總 grade 這個list\n- 透過sum去做加總\n- 加總完之後再去除以這個資料的個數\n- 前面我們看到len就是要檢查這個List它裡面有多少元素\n- 但有時候我們還是需要這個索引值i\n1- 這時候我們就可以用enumerate這個涵式 END"}
{"prompt": "在4-1-2的03:29的重點是什麼 \n\n###\n\n", "completion": " - 可以使用enumerate()函式來取得索引值和元素\n- list內有許多的函式可以幫助查詢，例如count()和index()\n- count()可以計算元素在list中出現的次數\n- index()可以回傳元素在list中第一次出現的索引值 END"}
{"prompt": "在4-1-2的04:29的重點是什麼 \n\n###\n\n", "completion": " - 可以使用sorted對list做排序，並可以加上reverse參數\n- sorted跟list.sort不一樣，sorted會回傳排序後的list，不會修改原本的data\n- len可以回傳list的長度，max可以回傳list中最大的元素，sum可以將list中的數值加總\n- 二維的list指的是list中的資料本身也是list，可以用來紀錄一群學生的一群成績。 END"}
{"prompt": "在4-1-2的05:49的重點是什麼 \n\n###\n\n", "completion": " - 可以從字幕中獲取程式相關重點\n- 使用二維的list\n- list裡面的元素又是一個list\n- 第零筆資料代表學生0的三個成績\n- 賦予的意義是英文數學自然\n- 第一筆資料代表學生1的這三科成績\n- 獲取學生2的成績可以用 grade[2]\n- 回傳是一個list\n- 獲取學生2的英文成績可以用 grade[2][0]\n- 抓取到77的這個成績 END"}
{"prompt": "在4-1-2的06:56的重點是什麼 \n\n###\n\n", "completion": " - grade是一個二維陣列，內部儲存的是位置的參考，指向另外一個list。\n- 用grade[1]可以抓取學生1的成績。\n- 雙重迴圈可以走訪整個二維陣列，第一層迴圈用for row in grade，第二層迴圈用for element in row。\n- 每一個row代表一個學生的所有成績，每一個element代表某一個人某一個科目的成績。 END"}
{"prompt": "在4-1-2的08:05的重點是什麼 \n\n###\n\n", "completion": " - 印出換行鍵並進到下一筆資料\n- 第二筆資料的row\n- 代表學生1的這群資料\n- 二維list的運算方法\n- 加總每一個學生的成績並儲存在一維陣列st_sum\n- 用for迴圈走訪每一個學生的成績\n- st代表學生所有科目的list\n- sum可以把所有成績加總起來\n- 把加總後的成績儲存在st_sum\n- index為i，第一次i的值為0 END"}
{"prompt": "在4-1-2的09:04的重點是什麼 \n\n###\n\n", "completion": " - 透過一維陣列儲存學生成績\n- 透過索引值存取學生成績\n- 透過for迴圈走訪整個陣列\n- 透過enumerate獲取索引值\n- 透過一維陣列儲存每個科目的總和 END"}
{"prompt": "在4-1-2的10:06的重點是什麼 \n\n###\n\n", "completion": " - 每個迴圈會抓取一個數字，並儲存在變數中。\n- 第一個迴圈抓取的數字會儲存在第一個位置，第二個迴圈抓取的數字會儲存在第二個位置，以此類推。\n- 外部的迴圈會抓取一個陣列，並將陣列中的數字與內部迴圈抓取的數字做加總，並儲存在對應的位置。\n- 重複以上步驟，直到所有的陣列都被處理完畢。\n- 最終的陣列中儲存的是所有科目的成績總和。 END"}
{"prompt": "在4-1-3的00:00的重點是什麼 \n\n###\n\n", "completion": " - 介紹排序的方法\n- 有兩種排序方式：sort 和 sorted\n- sort 和 sorted 的差別\n- 排序本身有很多種方式，如 bubble sort, selection sort, quick sort 等\n- 本節使用 bubble sort 來解說排序 END"}
{"prompt": "在4-1-3的01:19的重點是什麼 \n\n###\n\n", "completion": " - 這段影片是在介紹如何對調list中的兩個元素\n- 直接使用a[0]=a[1]和a[1]=a[0]的方式是錯誤的\n- 因為這樣會導致兩個元素的值都變成一樣的\n- 正確的方式是先用一個變數暫存其中一個元素的值，再進行對調 END"}
{"prompt": "在4-1-3的02:20的重點是什麼 \n\n###\n\n", "completion": " - 氣泡排序法會經過一連串資料的比對跟對調\n- 先比較兩筆資料 100跟200\n- 判斷100有沒有大於200，如果沒有保持不動 END"}
{"prompt": "在4-1-3的03:21的重點是什麼 \n\n###\n\n", "completion": " - 程式中有度調的動作，但此例子中沒有。\n- 接下來的比較往右移，變成比較200和50。\n- 200比50大，所以做一個對調的動作，變成50 200。\n- 再比較200和300，200不大於300，所以保持不變。\n- 第一個回合結束，最右邊的資料一定是最大的。 END"}
{"prompt": "在4-1-3的04:23的重點是什麼 \n\n###\n\n", "completion": " - 第一回合從資料的最後一筆開始，一直往左去做一個比較，最後最右邊的值一定是最大的。\n- 第二回合從資料的第0筆開始，一直往右去做一個比較，如果有比較大的就做一個對調，最後第二大的值就是第二個位置。\n- 第三回合一樣是從最前面的地方開始比較起，比較a[0]跟a[1]的值。 END"}
{"prompt": "在4-1-3的05:21的重點是什麼 \n\n###\n\n", "completion": " - 程式中使用的是選擇排序法。\n- 選擇排序法的核心是每次找到最大或最小值，並將其放到正確的位置。\n- 選擇排序法需要跑s-1個回合，其中s為資料筆數。\n- 每個回合需要比對S減掉它的回合數。 END"}
{"prompt": "在4-1-3的06:29的重點是什麼 \n\n###\n\n", "completion": " - 比較次數可以透過比較最大值來減少\n- 程式碼中的a是list，s是a的大小，r是回合數\n- 回合數為s-1，i的值從1開始，需要跑r+1個回合\n- range的第二個參數是前一個數，因此要加1 END"}
{"prompt": "在4-1-3的07:37的重點是什麼 \n\n###\n\n", "completion": " - 第幾回合的字幕出現在 07:37-07:41。\n- Round 是代表回合的意思，出現在 07:41-07:43。\n- for j in range(0, s-i) 是每一個回合內要做的比較，出現在 07:43-07:53。\n- s-i 是因為 index 是從最前面的資料開始做比較，出現在 07:53-07:59。\n- a[j] 與 a[j+1] 做比較，出現在 08:09-08:14。\n- 如果 a[j] 比 a[j+1] 大，就做對調，出現在 08:21-08:25。 END"}
{"prompt": "在4-1-3的08:39的重點是什麼 \n\n###\n\n", "completion": " - 操作的資料是一個由小到大排列的數列\n- 透過排序演算法，可以將數列由小到大或由大到小排列\n- 排序演算法的過程中，會進行多次比較和交換操作\n- 排序演算法的效率會受到資料的亂度和演算法本身的複雜度影響\n- 可以使用隨機產生的方式來測試排序演算法的效果 END"}
{"prompt": "在4-1-3的09:42的重點是什麼 \n\n###\n\n", "completion": " - 這段程式碼是在實作 bubble sort 演算法\n- 使用 random 產生亂數\n- 將亂數加入 list 中\n- 印出未排序的 list\n- 進行 bubble sort，將最大值移到最後面\n- 重複進行 bubble sort 直到排序完成\n- 可以調整 range 的大小\n- 最後印出排序後的 list END"}
{"prompt": "在4-2-1的00:00的重點是什麼 \n\n###\n\n", "completion": " - 介紹 Set\n- 前面已經介紹了 List 跟 Tuple\n- List 可以放任何型態，資料可以修改且有順序性\n- Tuple 跟 List 類似，但資料不能修改\n- List 跟 Tuple 的元素可以重複\n- Set 的元素不能重複，沒有順序性\n- Set 方便做集合運算，如聯集、交集等\n- 資料的新刪修查在 Set 上也適用 END"}
{"prompt": "在4-2-1的00:55的重點是什麼 \n\n###\n\n", "completion": " - Set不能夠做修改，因為沒有順序，也沒有取得索引值，所以也沒有辦法做修改索引值上的資料。\n- 要修改set中的元素，可以先把某個元素刪除，再新增就能達到修改的目的。\n- 宣告一個set可以用大括號{}，然後把元素依序放進去，或者是用set()這個function，裡面放list的元素，就會把list裡面的元素轉換成set的型態做回傳。 END"}
{"prompt": "在4-2-1的01:47的重點是什麼 \n\n###\n\n", "completion": " - 求集合的交集和聯集\n- 左邊是打籃球的，右邊是打棒球的\n- 交集的nick就是打棒球也打籃球的人\n- 聯集是五個人全部都包含，但nick不會出現兩次\n- 程式碼中宣告一個空白的集合set\n- 印出basketball的值 END"}
{"prompt": "在4-2-1的02:39的重點是什麼 \n\n###\n\n", "completion": " - 第5行的集合裡面放了3個元素\n- 集合是不能有重複的值\n- 執行後再把basketball印出來，會發現一樣是三個元素\n- 'nick'並不會重複出現\n- badminton裡面有3個人 END"}
{"prompt": "在4-2-1的03:33的重點是什麼 \n\n###\n\n", "completion": " - 有三個人，其中兩個nick是重複的\n- nick也是只會有一個而已\n- 嘗試要印出badminton裡面的[0]會出現type error的錯誤，因為set並沒有index\n- badminton[0]是個錯誤的語法\n- set的新增元素我們直接做.add\n- add後我們可以再把basketball印出來，會多一個alex END"}
{"prompt": "在4-2-1的04:28的重點是什麼 \n\n###\n\n", "completion": " - 可以從字幕中獲取程式相關重點\n- set裡面不能有重複的元素\n- 新增重複元素不會有錯誤訊息\n- 可以使用remove()方法刪除元素\n- 刪除不存在的元素會有KeyError END"}
{"prompt": "在4-2-1的05:23的重點是什麼 \n\n###\n\n", "completion": " - 如果找不到nick，就會跑出error\n- 使用discard function可以避免產生錯誤\n- .pop會從set裡面去任意找一個元素做回傳，並且做移除的動作\n- 先把basketball做reset的動作，再做一次的pop\n- p1的值是albert，他是隨意找一個元素回傳回來，並且會從basketball裡面移除\n- basketball變成是{'nick', 'jie'} END"}
{"prompt": "在4-2-1的06:18的重點是什麼 \n\n###\n\n", "completion": " - 可以使用 `basketball.clear()` 將整個 set 清除\n- 使用 `len()` 可以回傳 set 中元素的個數\n- 使用 `in` 可以檢查某個元素是否在 set 中 END"}
{"prompt": "在4-2-1的07:13的重點是什麼 \n\n###\n\n", "completion": " - 回傳False\n- 使用for in子句逐一印出set裡的元素\n- set的operation包括聯集\n- 可以使用\"|\"符號或union做聯集\n- 聯集後的結果是包含兩個set的所有元素 END"}
{"prompt": "在4-2-1的08:04的重點是什麼 \n\n###\n\n", "completion": " - 可以用差集來找出兩個集合之間的不同之處。\n- 差集的符號是「-」。\n- 如果是A集合減掉B集合，得到的結果是A集合中有但B集合中沒有的元素。\n- 如果是B集合減掉A集合，得到的結果是B集合中有但A集合中沒有的元素。 END"}
{"prompt": "在4-3-1的00:13的重點是什麼 \n\n###\n\n", "completion": " - Tuple跟List很像，但是Tuple的資料是不能夠修改的。\n- Tuple比起List省空間，速度也比較快，且可以避免程式上的失誤。\n- Tuple可以做Dictionary的key。\n- Tuple的宣告是用小括號()來表示，而List是用中括號[]來表示。 END"}
{"prompt": "在4-3-1的01:00的重點是什麼 \n\n###\n\n", "completion": " - Tuple 只能做查取，不能新增、刪除、修改元素。\n- 程式碼中宣告了兩個變數，一個用 List 建立資料，一個用 Tuple 建立資料。\n- Tuple 的建立方式有幾種。 END"}
{"prompt": "在4-3-1的01:46的重點是什麼 \n\n###\n\n", "completion": " - 第一個例子使用小括號表示Tuple\n- Tuple 可以允許不同的資料型態，例如字串和整數\n- 第二個例子是一堆整數的Tuple\n- 第三個例子使用逗號分割元素，也是一個Tuple\n- 第四個例子是從一個已知的List建立Tuple END"}
{"prompt": "在4-3-1的02:30的重點是什麼 \n\n###\n\n", "completion": " - 模型善於從字幕中獲取程式相關重點\n- 轉型成Tuple的動作\n- tup4的值是(1,2,3,4,5)\n- 寫兩個錯誤的程式碼\n- 改變tup2的位置0的值會產生錯誤訊息\n- Tuple比較省空間\n- 使用sys的getsizeof function獲得Tuple的大小 END"}
{"prompt": "在4-3-1的03:25的重點是什麼 \n\n###\n\n", "completion": " - li_grade和tu_grade的size\n- li_grade的size比tu_grade大\n- Tuple的執行速度比List快\n- 引用timeit模組可以重複執行某一個敘述句\n- stmt是要執行的動作，number是要執行的次數 END"}
{"prompt": "在4-3-1的04:22的重點是什麼 \n\n###\n\n", "completion": " - 用一個很大的數據來檢驗程式執行需要多少時間\n- 第二個程式跟第一個程式幾乎一模一樣，但是宣告成用Tuple來執行\n- 用Tuple的執行速度比List快很多\n- Tuple的資料存取跟List幾乎是一模一樣的，因為Tuple一樣是有順序的 END"}
{"prompt": "在4-3-1的05:15的重點是什麼 \n\n###\n\n", "completion": " - tup1 是一個 tuple\n- tup1 中第一個元素的值是 \"Nick\"\n- 在宣告 tuple 時使用小括號，但在取值時不要使用小括號\n- 正確的用法是使用中括號進行 data selection\n- 可以使用 len() 函數取得 tuple 的大小\n- 可以使用 count() 函數計算 tuple 中某個元素出現的次數 END"}
{"prompt": "在4-3-1的06:06的重點是什麼 \n\n###\n\n", "completion": " - count(1)代表出現1次\n- index代表這筆資料是在索引值的第幾個\n- 結果顯示是第0個\n- tuple2的1是在第0個位置\n- 宣告一個List，裡面的元素是一個二維的Tuple\n- 可以對這個List做排序的動作\n- 排序的結果會是依照每一個tuple的大小去做排序\n- 因為這個tuple是二維的陣列，所以會用陣列裡面的第一個元素去比大小\n- 資料中最小的是10，所以結果s2執行以後第一個值就會是(10,40) END"}
{"prompt": "在4-3-1的07:09的重點是什麼 \n\n###\n\n", "completion": " - 這段程式碼中有一個tuple，裡面有三個元素：性別、年齡、姓氏。\n- 可以使用tuple的unpacking方式，將tuple中的值分別assign到不同的變數中。\n- 在排序時，如果第一個元素相同，就會比較第二個元素，以此類推。\n- 在這個例子中，(20,30)比(20,60)小，所以會排在前面。 END"}
{"prompt": "在4-3-1的07:54的重點是什麼 \n\n###\n\n", "completion": " - 可以用小括號來建立tuple。\n- tuple可以包含不同型別的元素。\n- tuple的元素是不可變的，無法修改。\n- 可以使用索引來訪問tuple中的元素。\n- 可以使用切片來訪問tuple中的子集。\n- 可以使用for迴圈來遍歷tuple中的元素。\n- 可以使用len()函數來獲取tuple中元素的數量。\n- 可以使用+運算符來連接兩個tuple。\n- 可以使用*運算符來重複tuple中的元素。\n- 可以使用=運算符來將tuple中的元素分配給變量。\n1- 可以使用tuple()函數來將其他序列轉換為tuple。\n1- tuple的速度跟空間會比較省一點。\n1- tuple的元素無法修改。 END"}
{"prompt": "在4-4-1的00:08的重點是什麼 \n\n###\n\n", "completion": " - Dictionary是一種特殊的集合，由key和value所形成的\n- Dictionary的key必須是唯一的，不可重複\n- Dictionary沒有順序性，但可以透過key來取得value\n- Dictionary可以用不同的型態當作key和value，例如整數、字串、複雜的物件等等 END"}
{"prompt": "在4-4-1的01:54的重點是什麼 \n\n###\n\n", "completion": " - Dictionary是在Python裡面非常常用，非常重要的一種資料型態。\n- 我們可以用大括號{}來宣告一個空的Dictionary，或者是用dict() function來宣告。\n- Dictionary的每一筆資料都是由key和value組成，用冒號:來區隔。\n- 可以透過key來取得對應的value。\n- 用逗號,來區隔不同的key-value組合。\n- 可以透過len() function來取得Dictionary的大小。 END"}
{"prompt": "在4-4-1的03:32的重點是什麼 \n\n###\n\n", "completion": " - 可以用 function 宣告 dictionary。\n- key 的值可以是 int、string 或 tuple 等不可修改的型態。\n- list 本身是屬於一個 immutable 的 object，不能當成 key 值。\n- 可以宣告一個 list，其中每一個元素都是一個 tuple，並將 tuple 的第一個元素當成 key 值，第二個元素當成 value。 END"}
{"prompt": "在4-4-1的05:14的重點是什麼 \n\n###\n\n", "completion": " - 透過dict轉型可以將list轉成dictionary\n- 新增資料的方法是透過指定key和value\n- 刪除資料的方式有兩種，第一種是使用delete，後面加上dictionary的變數名稱，再指定key值\n- 刪除資料的方式有兩種，第二種是使用pop，後面加上dictionary的變數名稱，再指定key值 END"}
{"prompt": "在4-4-1的06:40的重點是什麼 \n\n###\n\n", "completion": " - 刪除 dictionary 中的資料可以使用 del 或 pop 方法。\n- 修改或新增 dictionary 中的資料也是使用指定 key 值的方式。\n- 使用 del 刪除資料時，直接指定 key 值即可。\n- 使用 pop 刪除資料時，需要指定 key 值，並且會回傳被刪除的值。\n- 修改或新增資料時，直接指定 key 值，並賦予新的值即可。如果 key 值已經存在，則會覆蓋原本的值。 END"}
{"prompt": "在4-4-1的08:07的重點是什麼 \n\n###\n\n", "completion": " - 可以透過 key 的方式去找到 dictionary 中的值。\n- 用中括號裡面放一個 key 的值，就可以獲得它的值。\n- len() 可以查詢 dictionary 中有幾筆資料。\n- in 可以檢查某一個 key 的值是否在 dictionary 中。 END"}
{"prompt": "在4-4-1的09:27的重點是什麼 \n\n###\n\n", "completion": " - 可以從字幕中獲取程式相關重點\n- 檢查dictionary的key值而非value的值\n- 取得dictionary的key、value、item的方法\n- keys方法可以取得dictionary所有的key值\n- keys方法回傳的資料型態為dict_key\n- values方法可以取得dictionary所有的value值 END"}
{"prompt": "在4-4-1的11:10的重點是什麼 \n\n###\n\n", "completion": " - 印出 dictionary 的 value\n- 檢查 key 是否存在於 dictionary 中\n- dictionary 的 items 是由 key-value 組成的 tuple\n- dictionary comprehension 可以用一行指令創造 dictionary END"}
{"prompt": "在4-4-1的12:38的重點是什麼 \n\n###\n\n", "completion": " - 建立一個dictionary，以水果名字當成key，以字串長度當成value\n- 只需要一行程式碼就可以完成\n- fruit_len是一個dictionary\n- f是每個水果的名字\n- for迴圈用來遍歷fruit中的每個水果\n- 印出fruit_len的結果，順序不重要 END"}
{"prompt": "在4-4-1的13:56的重點是什麼 \n\n###\n\n", "completion": " - 可以計算每個班級的人數\n- 用dictionary來描述\n- allclass是一個list，包含多個班級\n- class_count是一個dictionary，key是班級名稱，value是班級人數\n- 班級名稱用tuple表示\n- 要將list轉成tuple才能當作key\n- 班級人數是班級list的長度 END"}
{"prompt": "在4-5-1的00:00的重點是什麼 \n\n###\n\n", "completion": " - 網路上有很多的開放資料。\n- 透過集合物件做分析。\n- 選用的例子是台中市政府的開放資料。\n- 台中市政府開放資料平臺有1800多個資料集，資料筆數有17萬筆。\n- 有一些有 Open API，由29個組織所提供的，服務則有18種分類。\n- 比較有興趣的是 iBike。\n- 到台中市政府開放資料平臺找資料。\n- 台中市政府開放資料平臺有很多分類，包括交通、休閒、公共、出生、婚姻、老年安養等。\n- iBike 資料集有三個。 END"}
{"prompt": "在4-5-1的01:46的重點是什麼 \n\n###\n\n", "completion": " - 可以從字幕中獲取程式相關重點\n- 資料格式包含 JSON、XML、CSV 等\n- JSON 格式和 dictionary 格式相似\n- 資料中有主要欄位說明和 meta data\n- 資料中包含多筆資料，包括逢甲大學、秋紅谷等站點的資料。 END"}
{"prompt": "在4-5-1的03:06的重點是什麼 \n\n###\n\n", "completion": " - 可以從字幕中獲取程式相關重點\n- 資料下載、解壓縮、放在程式目錄下的 data 資料夾中\n- 資料格式為 json\n- retCode 等於 1，retValue 等於 3001\n- 資料結構為 dict，value 為 dict\n- 使用線上的 json formatter 可以讓資料格式更好看 END"}
{"prompt": "在4-5-1的04:25的重點是什麼 \n\n###\n\n", "completion": " - 可以透過 Ctrl V 貼上資料並按 Process 來處理資料\n- 處理後可以在下方看到結構化的資料呈現\n- 資料中的 3001, 3002 是站別的資料\n- 資料中的 retValue 是一個 key value，其中 value 是站別資訊\n- 資料中的 sno 是站別的代碼\n- 資料中的 sna 是站別的中文名稱\n- 資料中的 tot 是該站別總共的停車格數\n- 資料中的 sbi 是目前還在該站別的車輛數量\n- 資料中的 sarea 是該站別所在的區域\n- 資料中的 mday 是資料更新的日期\n- 資料中的 lat 和 lng 是該站別的緯度和經度 END"}
{"prompt": "在4-5-1的05:48的重點是什麼 \n\n###\n\n", "completion": " - 準備讀取 iBike.json 資料\n- 資料放在 data 目錄下\n- 使用 with ... open 讀取資料\n- 使用 file.read 讀取資料\n- 使用 json.loads 將資料轉換成 json 格式\n- 讀取 json 格式的資料 END"}
{"prompt": "在4-5-1的07:15的重點是什麼 \n\n###\n\n", "completion": " - 讀進來的資料放到 jdata 物件中\n- 需要 import json\n- 用 pprint 印出來會比較有結構性的呈現\n- 把 key 為 retVal 的所有資料抓出來，放到 d 變數中\n- 題目一：由北到南列出所有的車站，包含位置和緯度\n- 題目二：每個區域的 iBike station 數量\n- 題目三：當時車站被借出率最高的前三個，被借出率是空位數除以總停車格數量 END"}
{"prompt": "在4-5-1的08:56的重點是什麼 \n\n###\n\n", "completion": " - 第一個需求是要由北到南印出所的車站，位置和緯度。\n- 我們需要篩選出資料中的站名、位置和緯度。\n- 我們使用一個 list `station` 存放篩選後的資料。\n- 我們使用迴圈把資料一個個叫出來，並把需要的欄位存到 `name`、`addr`、`lat` 中。\n- 我們把 `name`、`addr`、`lat` 組成一個 tuple `item`，再把 `item` 存到 `station` 中。\n- 最後印出 `station` 的內容。 END"}
{"prompt": "在4-5-1的10:26的重點是什麼 \n\n###\n\n", "completion": " - 模型善於從字幕中獲取程式相關重點\n- 程式中使用 sort function 進行排序\n- 使用 lambda 函數依據緯度進行排序\n- reverse = True 表示由大到小排序\n- 排序後的結果是由北到南排序\n- 可以將排序結果寫入檔案 END"}
{"prompt": "在4-5-1的11:48的重點是什麼 \n\n###\n\n", "completion": " - 倒斜線 n 是做一個換行的動作\n- 實際操作一遍\n- 資料已經寫到檔案裡面\n- iBikeSorted 的資料在台灣大道的一些資料中\n- 計算每一區域 iBike station 的數量\n- 宣告一個 dict 的資料型態，叫做 area\n- 迴圈抓取區域的名稱 sareaen，把它暫存在 ar\n- 檢查 ar 有沒有在 area 的 key 裡面，如果有的話就表示剛剛已經有讀過了，這時候要把它的數量加 1，方法是用 area[ar] 加一；如果沒有滿足的話，表示 ar 是第一次遇到。 END"}
{"prompt": "在4-5-1的13:35的重點是什麼 \n\n###\n\n", "completion": " - count 的值設為 1\n- 把數量做一個統計\n- 霧峰區有三個車站\n- 南區沒有車站\n- 依據該區域車站數量的多寡做一排序\n- 西屯區有最多的車站\n- 北屯區有 36 個車站\n- 北區有 29 個車站\n- 南屯區有 24 個車站\n- 解了兩個問題 END"}
{"prompt": "在哪裡有提到- 介紹Python程式簡介\n- 分為4個單元\n- 包含資料科學、Python程式設計、執行環境安裝、Anaconda/Spyder開發環境的安裝與介紹 \n\n###\n\n", "completion": " 在1-0-1章的00:13時候 END"}
{"prompt": "在哪裡有提到- 資料科學現在非常的重要\n- 當今的資料科學主要包含三個領域：IT的Programming、數學、統計\n- 還有這個Domain knowledge \n\n###\n\n", "completion": " 在1-0-1章的00:30時候 END"}
{"prompt": "在哪裡有提到- 介紹資料科學\n- 資料科學的應用\n- 介紹課程 \n\n###\n\n", "completion": " 在1-0-1章的00:44時候 END"}
{"prompt": "在哪裡有提到- Programming跟資料科學的主要關係\n- 第二個單元是Python的程式設計\n- 介紹程式的基本概念，包括原始程式和機器碼 \n\n###\n\n", "completion": " 在1-0-1章的00:54時候 END"}
{"prompt": "在哪裡有提到- 編譯器的定義\n- Python語言的特性\n- 手把手教學的第三部分 \n\n###\n\n", "completion": " 在1-0-1章的01:09時候 END"}
{"prompt": "在哪裡有提到- 下載 Python 系統\n- 安裝 Python 系統\n- 寫出第一個程式並執行\n- 介紹 Anaconda/Spyder 開發環境的安裝與使用 \n\n###\n\n", "completion": " 在1-0-1章的01:21時候 END"}
{"prompt": "在哪裡有提到- 開發環境和執行環境不同。\n- 執行環境只需讓程式可以執行即可。\n- 一般使用者只需要執行環境。\n- 但是... \n\n###\n\n", "completion": " 在1-0-1章的01:39時候 END"}
{"prompt": "在哪裡有提到- 修習課程，目標是成為一個Programmer。\n- 需要一個開發環境。\n- 開發環境能讓你寫程式。\n- 程式需要編譯成執行碼。 \n\n###\n\n", "completion": " 在1-0-1章的01:51時候 END"}
{"prompt": "在哪裡有提到- 讓程式可以執行\n- 介紹 Spyder 專業的開發環境\n- 提供許多方便的功能 \n\n###\n\n", "completion": " 在1-0-1章的02:01時候 END"}
{"prompt": "在哪裡有提到- 學習完這章後可以了解資料科學和程式之間的關係。\n- 可以開始完成第一支程式碼。 \n\n###\n\n", "completion": " 在1-0-1章的02:12時候 END"}
{"prompt": "在哪裡有提到- 資料科學是當紅炸子雞的工作\n- 資料科學是跨領域的學科\n- 資料科學需要結合程式能力和統計能力\n- 資料科學是現今各個公司所需要的人才之一 \n\n###\n\n", "completion": " 在1-1-1章的00:13時候 END"}
{"prompt": "在哪裡有提到- 模型善於從字幕中獲取程式相關重點\n- 使用科學的方法\n- 演算法、系統去萃取出一些知識\n- 資料的內涵從結構性跟非結構性的資料中獲取\n- 範圍廣泛，包括各個設備所收集到的非結構性資料\n- 萃取有意義的資料出來\n- 使用科學的方法去證明現象的確是這個樣子的 \n\n###\n\n", "completion": " 在1-1-1章的01:07時候 END"}
{"prompt": "在哪裡有提到- 資料科學需要用科學的方法和演算法來驗證資料的正確性。\n- 資料科學是一種觀念，統合了統計、資料分析、Machine Learning等方法，透過資料分析來了解和分析真實現象。\n- 資料科學需要多個學科的知識，包括統計、資料分析等。 \n\n###\n\n", "completion": " 在1-1-1章的02:00時候 END"}
{"prompt": "在哪裡有提到- Machine Learning 是資料科學、資料處理方面的一小部分\n- Machine Learning 的效率和精準度比其他方法高\n- 資料科學包含 Machine Learning、人工智慧相關的技術\n- Youbike 的借還車資料被儲存下來 \n\n###\n\n", "completion": " 在1-1-1章的03:06時候 END"}
{"prompt": "在哪裡有提到- 可以從租借紀錄中分析熱門車站和路徑，以及時段方面的資訊\n- 資料分析可以幫助做交通規劃和決策\n- 資料分析需要程式、統計和領域知識\n- 資料科學是指從資料中提取知識和洞見的過程 \n\n###\n\n", "completion": " 在1-1-1章的04:19時候 END"}
{"prompt": "在哪裡有提到- Programming、統計、Domain knowledge 是三個重要的知識學門\n- 線上學習的資料可以被儲存在資料庫中進行分析\n- 可以分析學習者的平均學習時間、學習困難點、觀看影片的速度等\n- 影片分析可以提供錄製教學影片的方針 \n\n###\n\n", "completion": " 在1-1-1章的05:46時候 END"}
{"prompt": "在哪裡有提到- 可以透過 AI 建立模型來做預測\n- Machine Learning 是機器學習的部分\n- 訓練資料大概是八成，驗證資料大概是兩成\n- Machine Learning 的 behavior 包含登入次數、看影片次數、跳著看等等 \n\n###\n\n", "completion": " 在1-1-1章的07:09時候 END"}
{"prompt": "在哪裡有提到- 模型可以從字幕中獲取程式相關重點\n- 資料科學中的 Machine Learning 可以透過訓練 Model 來預測結果\n- Model 可以用來做預估或預測\n- 當 Model 的精準度高到一定程度時，他就是可用的\n- 資料科學的流程包括資料收集、資料清理、資料分析、Model 訓練、驗證、預測等步驟。 \n\n###\n\n", "completion": " 在1-1-1章的08:36時候 END"}
{"prompt": "在哪裡有提到- 資料分析的流程包含資料收集、處理、清理、分析、解釋和改進。\n- 資料收集的來源有多元，包括資料庫、網路爬取和 IOT 設備等。\n- 資料的格式可能不同，需要進行格式轉換等處理。\n- 資料清理是必要的，需要清除缺失的資料。\n- 分析後需要與領域專家溝通，進行改進。\n- 資料分析涉及 IT/Programming、數學、Machine Learning Model 和 Domain knowledge。\n- 本系列課程將在第二門課、第三門課介紹數學、Machine Learning Model 和 Domain knowledge。 \n\n###\n\n", "completion": " 在1-1-1章的10:05時候 END"}
{"prompt": "在哪裡有提到- Programming 在資料科學中非常重要\n- 資料的來源非常多元，需要進行清理\n- Machine Learning 和統計知識在分析階段非常重要\n- Domain expert 領域專家在 Interpret 解釋資料時扮演重要角色\n- 資料科學是一門跨領域學科，需要協同合作\n- Programming 是整個資料科學的第一門課，是打先鋒、打基礎的\n- 希望學生能夠把 Programming 基礎打好，成為資料分析的專家 \n\n###\n\n", "completion": " 在1-1-1章的11:36時候 END"}
{"prompt": "在哪裡有提到- 程式的基本概念\n- 程式編譯成機器語言\n- 機器語言難以閱讀\n- 電腦能夠依照指令運行 \n\n###\n\n", "completion": " 在1-2-1章的00:15時候 END"}
{"prompt": "在哪裡有提到- 程式語言是軟體工程師所撰寫的程式語言。\n- 程式語言是高階的程式語言，比較好維護跟撰寫。\n- 程式語言跟英文相近，但系統不同。\n- 需要編譯器來編譯成機器語言，讓機器能夠看得懂。\n- 編譯器分為兩種。 \n\n###\n\n", "completion": " 在1-2-1章的01:01時候 END"}
{"prompt": "在哪裡有提到- Compiler和Interpreter是兩種不同的程式編譯方式\n- Compiler會先掃描整個程式碼，再一次轉譯成程式碼\n- Interpreter則是一行一行的轉譯程式碼\n- Compiler和Interpreter的轉譯方式就像翻譯英文小說和口譯英文演講的差別\n- Interpreter無法事先知道整個程式碼的前後關係 \n\n###\n\n", "completion": " 在1-2-1章的01:35時候 END"}
{"prompt": "在哪裡有提到- Python是一種Interpreter\n- Python在效能上不如編譯器，但比較容易撰寫和學習\n- Python有兩種模式：互動模式和腳本模式 \n\n###\n\n", "completion": " 在1-2-1章的02:12時候 END"}
{"prompt": "在哪裡有提到- 互動模式可以讓使用者在介面上輸入指令，並得到回應。\n- 互動模式適合處理較小的程式碼。\n- 腳本模式和檔案模式是常見的程式碼編寫方式。 \n\n###\n\n", "completion": " 在1-2-1章的02:45時候 END"}
{"prompt": "在哪裡有提到- 程式碼會被存成檔案，再執行它。\n- 展示了一個Python程式碼，詢問使用者名字，加上Hello後印出來。 \n\n###\n\n", "completion": " 在1-2-1章的03:15時候 END"}
{"prompt": "在哪裡有提到- 程式碼容易理解\n- Python程式語言與英文系統相似\n- Python程式語言容易閱讀\n- Python程式語言簡單卻強大\n- Python程式語言是直譯的語言 \n\n###\n\n", "completion": " 在1-2-1章的03:44時候 END"}
{"prompt": "在哪裡有提到- Python非常容易入門\n- 可以寫一段程式碼就去執行它，並修正錯誤\n- Python在學習上非常方便\n- Python使用物件導向方式開發，功能強大 \n\n###\n\n", "completion": " 在1-2-1章的04:05時候 END"}
{"prompt": "在哪裡有提到- Python有很多現成的套件和框架可以使用。\n- 想要學習機器語言或應用機器語言，Python已經有很多相對應的套件和框架。\n- 網路爬蟲和網頁設計等問題，Python也有相對應的套件和框架。\n- Python是一種問題導向的語言。 \n\n###\n\n", "completion": " 在1-2-1章的04:33時候 END"}
{"prompt": "在哪裡有提到- Python是一個設計用來解決各種問題領域的程式語言。\n- Python是跨平台的，可以在Windows、Mac、Unix等平台上執行。\n- 本節的重點包含高階的Source code和低階的機器碼的差別、Compiler和Interpreter的差別、互動的模式和檔案模式的差別。\n- Python的優點。 \n\n###\n\n", "completion": " 在1-2-1章的05:05時候 END"}
{"prompt": "在哪裡有提到- Python的程式可以在Online編輯器或自己的電腦上安裝Interpreter和開發環境執行\n- 安裝Interpreter後需要一個編輯器去寫程式\n- 編輯器分為簡易型和整合型，簡易型可以使用一般編輯器，整合型可以使用Jupyter\n- Jupyter是一個運行在瀏覽器上的編輯器，可以寫程式和筆記 \n\n###\n\n", "completion": " 在1-3-1章的00:00時候 END"}
{"prompt": "在哪裡有提到- Jupyter是一個好的工具，很多人在使用。\n- 本課程使用的是整合性的工具Spyder，是一種IDE的工具。\n- IDE是整合的開發環境的縮寫。\n- Python官方網頁上有一個線上的編輯器，可以進行練習。\n- 在Python官方網頁上點擊黃色的Icon，可以進入線上編輯器。\n- 點擊Launch Interactive Shell可以進入互動性的環境。 \n\n###\n\n", "completion": " 在1-3-1章的01:37時候 END"}
{"prompt": "在哪裡有提到- Python的版本是3.6\n- 可以在IPython的互動模式下進行程式碼編輯\n- 可以使用Online Editor進行程式碼編輯\n- 搜尋Python 3.6 online editor以獲取最新版本\n- tutorialspoint是一個可用的online editor \n\n###\n\n", "completion": " 在1-3-1章的03:04時候 END"}
{"prompt": "在哪裡有提到- 可以從字幕中獲取程式相關重點的模型\n- 在網頁上執行python的程式\n- 在自己的電腦上面來執行python的程式\n- 檢查是否已經有安裝python\n- 很多的電腦可能已經都內建、有安裝python的環境了\n- 分兩個作業系統 \n\n###\n\n", "completion": " 在1-3-1章的04:25時候 END"}
{"prompt": "在哪裡有提到- 在Mac環境下，可以透過Spotlight找到terminal應用程式。\n- 在terminal中打上python，如果已經安裝成功，會顯示版本號。\n- 在terminal中可以執行python的命令列。\n- 在terminal中打上python，按下Enter，就可以進入python的執行環境。 \n\n###\n\n", "completion": " 在1-3-1章的05:54時候 END"}
{"prompt": "在哪裡有提到- 版本是3.6.5，且是anaconda\n- 電腦裏面有多個python的interpreter\n- 可以在這個地方打上python的程式碼\n- 可以打上print和1+1的程式碼\n- 要跳開這樣子的一個環境的時候，要打上exit()\n- 在windows的環境下，可以使用cmd控制台\n- cmd代表這一個命令列 \n\n###\n\n", "completion": " 在1-3-1章的07:27時候 END"}
{"prompt": "在哪裡有提到- 可以從字幕中獲取程式相關重點\n- 在Windows中，黑底的C:\\是一個非常有名的應用程式\n- 在命令列下輸入python，如果出現python的版本號和三個大於符號，代表電腦已經安裝了python環境\n- 如果電腦沒有安裝python，可以到python官方網站下載並安裝\n- 安裝完成後，可以再次在命令列下輸入python，檢查是否安裝成功 \n\n###\n\n", "completion": " 在1-3-1章的08:54時候 END"}
{"prompt": "在哪裡有提到- 程式出現錯誤的原因可能是路徑設定不正確。\n- 在Windows下，可以在控制台的進階系統設定中的環境變數中加入Python的路徑。\n- 在Mac下，可以在terminal中使用export PATH命令加入Python的路徑。\n- 設定完後，可以在terminal中輸入python指令來執行Python程式。 \n\n###\n\n", "completion": " 在1-3-1章的10:31時候 END"}
{"prompt": "在哪裡有提到- 安裝Python直譯器\n- 使用Sublime或NotePad++等編輯器撰寫程式碼\n- 編輯器具有語法感知功能\n- 在操作台中使用python指令執行程式\n- 了解Python執行的方法\n- 檢查電腦是否已安裝Python直譯器 \n\n###\n\n", "completion": " 在1-3-1章的11:59時候 END"}
{"prompt": "在哪裡有提到- 安裝並執行Python程式\n- 使用Sublime等編輯器撰寫Python程式\n- 在Terminal中執行Python程式\n- 使用print()函式輸出文字\n- 使用Python檔案的副檔名.py\n- 使用python指令執行Python檔案\n- 使用上下鍵紀錄上一個指令\n- 儲存Python檔案後再次執行 \n\n###\n\n", "completion": " 在1-3-1章的13:32時候 END"}
{"prompt": "在哪裡有提到- 安裝Python後會有預設的編輯器IDLE。\n- 在Mac上可以在應用程式下的Python目錄找到IDLE.app。 \n\n###\n\n", "completion": " 在1-3-2章的00:00時候 END"}
{"prompt": "在哪裡有提到- 點擊程式來執行它。\n- 如果是 Windows 程式，可以在左下角的 Windows 按鈕找到 IDLE 應用程式。\n- 直接執行 IDLE 應用程式即可。\n- 重新執行程式。 \n\n###\n\n", "completion": " 在1-3-2章的00:34時候 END"}
{"prompt": "在哪裡有提到- 要跳開某個東西\n- 執行IDLE\n- 熟悉的Shell視窗\n- 在Shell視窗中打上print \n\n###\n\n", "completion": " 在1-3-2章的00:56時候 END"}
{"prompt": "在哪裡有提到- print的使用可以從字幕中獲取提示\n- 按下執行按鈕可以看到程式的執行結果\n- 可以寫有檔案的程式，使用File或Control+N開啟新檔案。 \n\n###\n\n", "completion": " 在1-3-2章的01:13時候 END"}
{"prompt": "在哪裡有提到- 可以在特定地方打上程式\n- 存檔\n- 故意讓程式多執行幾次 \n\n###\n\n", "completion": " 在1-3-2章的01:33時候 END"}
{"prompt": "在哪裡有提到- 要執行程式時，可以點選左上角的 \"run\" 按鈕。\n- 點選 \"run module\" 可以執行程式。\n- 程式執行後，可以在畫面上看到結果。 \n\n###\n\n", "completion": " 在1-3-2章的01:54時候 END"}
{"prompt": "在哪裡有提到- 介紹了使用 turtle 模組\n- 將 turtle 模組命名為 t\n- 產生一個名為 x 的物件，其值為 t \n\n###\n\n", "completion": " 在1-3-2章的02:07時候 END"}
{"prompt": "在哪裡有提到- 產生一個烏龜物件\n- 讓烏龜向前走100步\n- 讓烏龜向右轉90度 \n\n###\n\n", "completion": " 在1-3-2章的02:29時候 END"}
{"prompt": "在哪裡有提到- 讓牠做四遍\n- 看會有甚麼樣的效果\n- 把它存起來\n- 去執行它\n- 會幫我們畫出一個正方形 \n\n###\n\n", "completion": " 在1-3-2章的02:45時候 END"}
{"prompt": "在哪裡有提到- 介紹了一個小程式\n- 會在後面介紹該程式\n- IDLE是一個內附的IDE工具\n- IDLE還滿方便的 \n\n###\n\n", "completion": " 在1-3-2章的03:05時候 END"}
{"prompt": "在哪裡有提到- Google 推出了一款名為 COLAB 的線上 Python 程式碼編輯環境。\n- COLAB 可以直接在線上編寫 Python 程式碼。\n- COLAB 可以在 Google Drive 中儲存編輯過的檔案。\n- COLAB 提供 Python3 的版本。\n- 可以從範例開始編輯程式碼。 \n\n###\n\n", "completion": " 在1-3-3章的00:13時候 END"}
{"prompt": "在哪裡有提到- 模型善於從字幕中獲取程式相關重點\n- 點擊英文版可以切換語言\n- COLAB 檔案格式符合 Jupiter Notebook 檔案格式\n- COLAB 由 CODE 和 TEXT 兩個元素構成\n- 文章中的區塊被稱為 Cell \n\n###\n\n", "completion": " 在1-3-3章的01:04時候 END"}
{"prompt": "在哪裡有提到- 這是一個文字的一個 Cell\n- 它是可以來去做編輯的\n- 這段文字呢，又可以分為兩個區塊\n- 右邊這一個區塊是他真正呈現出來的樣子\n- 左邊的地方的是我們登打的這個內容\n- 每一行的最前面這個地方 \n\n###\n\n", "completion": " 在1-3-3章的01:48時候 END"}
{"prompt": "在哪裡有提到- 可以從字幕中獲取程式相關重點\n- # 字號代表大標題，## 字號代表次標題\n- Code cells 是程式碼區塊\n- Markdown 是一種語法，可以用來編寫文件 \n\n###\n\n", "completion": " 在1-3-3章的02:26時候 END"}
{"prompt": "在哪裡有提到- Markdown 是一個特殊的檔案格式。\n- Markdown 認得某些語法，可以做出不同的呈現。\n- Markdown 的呈現比程式語言的註解好看許多。\n- Markdown 格式目前很紅。\n- Jupyter Notebook 中有文字的 Cell 和程式碼的 Cell。 \n\n###\n\n", "completion": " 在1-3-3章的03:00時候 END"}
{"prompt": "在哪裡有提到- 要執行程式，點擊撥放鈕\n- 執行完程式後，可以使用print指令印出結果\n- input process output的例子中，使用input指令讓使用者輸入名字，再使用print指令印出Hello + 名字 \n\n###\n\n", "completion": " 在1-3-3章的03:40時候 END"}
{"prompt": "在哪裡有提到- 模型善於從字幕中獲取程式相關重點\n- 變數名稱為 Hello\n- 加上使用者的名字\n- 印出 Hello, Nick\n- 按 Shift + Enter 執行程式\n- 可以在程式碼下方加上文字解說\n- 可以點選 Code 按鈕查看程式碼\n- 將 print 移至程式碼下方 \n\n###\n\n", "completion": " 在1-3-3章的04:23時候 END"}
{"prompt": "在哪裡有提到- 可以從字幕中獲取程式相關重點\n- 要注意上下 Cell 之間的變數引用關係\n- 要注意執行 Cell 的順序\n- 可以在程式中加入文字說明\n- 要注意變數命名的規範 \n\n###\n\n", "completion": " 在1-3-3章的05:03時候 END"}
{"prompt": "在哪裡有提到- 模型善於從字幕中獲取程式相關重點\n- 要印出 helloToYou 的內容\n- 執行時出現找不到 helloToYou 的錯誤\n- helloToYou 沒有被定義\n- 定義 helloToYou 的程式碼為 helloToYou = 'Hello, ' + name\n- 必須執行定義 helloToYou 的程式碼才能印出 helloToYou 的內容 \n\n###\n\n", "completion": " 在1-3-3章的05:50時候 END"}
{"prompt": "在哪裡有提到- 需要再執行一次程式\n- 輸入名字為Nick\n- helloToYou的值才會是等於這一個\n- 執行完後儲存檔案到Google Drive或Github\n- Colab是一個好用的環境，建議使用 \n\n###\n\n", "completion": " 在1-3-3章的06:17時候 END"}
{"prompt": "在哪裡有提到- 介紹了一些Python的環境跟執行方法\n- 要介紹一個更快速更便利的環境安裝以及開發方法\n- Anaconda跟Spyder是要安裝的軟體\n- 它們會同時地幫我們把Python的直譯器以及整合性的開發環境一起安裝\n- Spyder是一個整合開發的環境，可以在裡面做Debug、寫程式、執行\n- Anaconda是一個Python的發行版，包含了許多常用的Python套件。 \n\n###\n\n", "completion": " 在1-4-1章的00:00時候 END"}
{"prompt": "在哪裡有提到- Anaconda是一個套件、工具跟環境整合管理系統\n- Python因為有很多的套件已經被開發出來，所以只要直接去應用這些套件就好了\n- 下載安裝套件挺花時間的，但Anaconda已經把常用的套件下載並且做版本管理\n- 很多人使用Anaconda來做系統開發 \n\n###\n\n", "completion": " 在1-4-1章的00:56時候 END"}
{"prompt": "在哪裡有提到- 安裝Spyder需要透過Anaconda\n- 安裝Anaconda很容易，只需要在官網下載對應作業系統的版本\n- 安裝完成後，可以在Anaconda介面中執行Spyder\n- 在Anaconda介面中的Enviroments標籤可以設定環境 \n\n###\n\n", "completion": " 在1-4-1章的01:47時候 END"}
{"prompt": "在哪裡有提到- 右邊有很多套件，每個套件都是一個Package。\n- 已經安裝了相當多的套件。\n- 可以uninstall不需要的套件，也可以在這裡search套件。\n- 可以在Home標籤列出相當多的工具，其中包括Spyder。 \n\n###\n\n", "completion": " 在1-4-1章的02:23時候 END"}
{"prompt": "在哪裡有提到- 安裝Spyder可以透過Anaconda Navigator進行\n- 其他常用的工具如Jupyter和R Studio也可以透過Anaconda Navigator進行安裝和管理\n- Spyder主要有三大視窗，其中第一個是程式碼編輯區域 \n\n###\n\n", "completion": " 在1-4-1章的03:08時候 END"}
{"prompt": "在哪裡有提到- 第二個部份是檔案跟變數的觀看區\n- 可以在Help標籤中查看函式的使用方法\n- 檔案的瀏覽區可以把已經寫好的程式碼拿出來使用\n- 觀看的變數區可以在執行程式碼的時候看變數的變化\n- iPython還有Output子程式，呈現程式碼執行完的結果 \n\n###\n\n", "completion": " 在1-4-1章的03:53時候 END"}
{"prompt": "在哪裡有提到- 互動區可以下指令\n- 工具列分為四大塊\n- 第一塊是跟檔案功能相關的，如存檔、開檔\n- 第二塊是跟程式碼執行相關的\n- 後面章節會介紹其餘功能 \n\n###\n\n", "completion": " 在1-4-1章的04:37時候 END"}
{"prompt": "在哪裡有提到- 第三個是除錯執行\n- 第四個是跟面板設定還有喜好設定等等\n- 檔案功能包含了開啟檔案、開啟舊的檔案、存檔還有全部存檔\n- Spyder允許一次開很多不同的檔案，同時進行編輯\n- 程式碼執行的按鈕是像三角形的按鈕 \n\n###\n\n", "completion": " 在1-4-1章的05:28時候 END"}
{"prompt": "在哪裡有提到- 可以從字幕中獲取程式相關重點的模型。\n- 可以透過最大化面板來提高寫程式的效率。\n- 右邊的五金板手圖示是喜好設定，相當重要。\n- 喜好設定可以設定字型大小，讓程式碼更容易閱讀。 \n\n###\n\n", "completion": " 在1-4-1章的06:08時候 END"}
{"prompt": "在哪裡有提到- 快速鍵的設定\n- 常用快速鍵如Control+C、Control+V\n- 一鍵執行程式碼\n- 編輯器主題設定，如黑底亮字\n- 保護眼睛，減少眼睛負擔\n- 編輯器呈現設定，如行數、變數觀看等。 \n\n###\n\n", "completion": " 在1-4-1章的06:52時候 END"}
{"prompt": "在哪裡有提到- Demo四件事情：變更喜好的設定、在IPython中寫程式、開啟新檔案並做修改、從檔案開啟舊檔執行並透過IPython觀看變數的結果。\n- 介紹Spyder的基本操作。\n- 修改Spyder的基本設定，包括General、Editor、Console、IPython Console、Variable Explorer、Help等方面。 \n\n###\n\n", "completion": " 在1-4-2章的00:00時候 END"}
{"prompt": "在哪裡有提到- 可以在設定中調整字幕大小。\n- 快速鍵是一些功能的捷徑，可以在設定中設定。\n- 右邊的快速鍵欄位可以設定執行Python程式碼的快速鍵，預設是F5。 \n\n###\n\n", "completion": " 在1-4-2章的00:50時候 END"}
{"prompt": "在哪裡有提到- 雙擊Run可以開啟快速鍵設定\n- 快速鍵衝突會出現驚嘆號\n- 可以透過Replace Text修改快速鍵\n- 可以改變視窗風格來調整syntax的coloring \n\n###\n\n", "completion": " 在1-4-2章的01:26時候 END"}
{"prompt": "在哪裡有提到- Zenburn是一種黑底淺色字的程式碼顯示方式，對眼睛有幫助。\n- Spyder有兩種預設的程式碼顯示方式，一個是Spyder，一個是Spyder Dark。\n- Editor的Show line numbers可以顯示程式碼的行數，方便閱讀。 \n\n###\n\n", "completion": " 在1-4-2章的02:11時候 END"}
{"prompt": "在哪裡有提到- 可以從字幕中獲取程式相關重點。\n- 空白的Space可以被顯示出來。\n- if else區塊在字幕中會比較明顯。\n- 在IPython的環境下可以撰寫互動式的程式。\n- 可以使用print指令顯示結果。\n- 可以使用變數並設定其值。 \n\n###\n\n", "completion": " 在1-4-2章的02:57時候 END"}
{"prompt": "在哪裡有提到- 在IPython環境下，可以直接輸入變數名稱，省略print，來顯示變數的值。\n- 使用clear可以清空IPython環境。\n- 使用快速鍵control+n或command+n可以建立新檔案。\n- 新檔案一開始會有標題，可以刪除。 \n\n###\n\n", "completion": " 在1-4-2章的03:36時候 END"}
{"prompt": "在哪裡有提到- 可以使用 `print()` 函式來輸出文字\n- 按下執行鍵可以執行程式\n- 如果程式碼還沒有儲存，執行時會提示儲存\n- 儲存程式碼時要選擇目錄和檔名\n- 條列符號為減號 \n\n###\n\n", "completion": " 在1-4-2章的04:25時候 END"}
{"prompt": "在哪裡有提到- 儲存程式\n- 執行程式\n- 編輯區的功能，如複製、貼上\n- 可以寫複雜的程式\n- 不同於IPython，可以進行變數宣告 \n\n###\n\n", "completion": " 在1-4-2章的04:59時候 END"}
{"prompt": "在哪裡有提到- 從字幕中可以獲取程式相關的重點。\n- 要記得寫完程式碼後儲存。\n- 變數區和檔案區可以在右上角找到。\n- Variable explorer 是一個很重要的區域，可以顯示變數的值。 \n\n###\n\n", "completion": " 在1-4-2章的05:38時候 END"}
{"prompt": "在哪裡有提到- 認識與安裝Anaconda和Spyder\n- 瞭解Spyder的設定與操作\n- 應用Spyder來撰寫python的程式 \n\n###\n\n", "completion": " 在1-4-2章的06:14時候 END"}
{"prompt": "在哪裡有提到- 程式能力好的人具備邏輯的觀念。\n- 本章節主要講解邏輯運算，分為四個單元。\n- 第一個單元是程式的執行流程，包括循序的執行、分支以及迴圈。 \n\n###\n\n", "completion": " 在3-0-1章的00:12時候 END"}
{"prompt": "在哪裡有提到- 本章節重點在於分支和迴圈\n- 分支是程式中的一個概念\n- 分支可以讓程式根據不同的情況執行不同的程式碼\n- 分支的概念可以用 if/else 來實現\n- 分支的概念也可以用 switch/case 來實現\n- 分支的概念可以用來處理程式中的例外情況\n- 分支的概念可以用來實現程式中的選擇功能 \n\n###\n\n", "completion": " 在3-0-1章的00:38時候 END"}
{"prompt": "在哪裡有提到- 滿足某一個條件後走另外一條路徑\n- 條件需使用 if 和 else 語法\n- 第三個單元介紹迴圈\n- 迴圈是程式會重複執行某段程式碼 \n\n###\n\n", "completion": " 在3-0-1章的01:03時候 END"}
{"prompt": "在哪裡有提到- 電腦善於從重複的程式碼中獲取重點\n- 程式碼相似性是電腦的強項\n- 電腦能夠處理大型的資料\n- 這是大型資料處理的第一步 \n\n###\n\n", "completion": " 在3-0-1章的01:23時候 END"}
{"prompt": "在哪裡有提到- 執行順序\n- 資料不重複\n- 讀取、處理、輸出\n- 迴圈處理大資料\n- 介紹三個範例\n- 第一個範例使用 turtle 套件畫圖形 \n\n###\n\n", "completion": " 在3-0-1章的01:45時候 END"}
{"prompt": "在哪裡有提到- 這個圖形看起來很複雜，但其實這個程式只有三到五行。\n- 程式之所以簡短，是因為將問題拆解成畫很多個正方形，每次稍微轉一個角度。 \n\n###\n\n", "completion": " 在3-0-1章的02:13時候 END"}
{"prompt": "在哪裡有提到- 學會將問題拆解成重複性類似的工作，可以大大降低工作的 Effort。\n- 第二個範例是\"韓信點兵\"，相信大家以前都學過。 \n\n###\n\n", "completion": " 在3-0-1章的02:32時候 END"}
{"prompt": "在哪裡有提到- 解題可以換個角度，有不同的解法。\n- 用程式的方式解答更容易。\n- 猜數字遊戲，讓電腦隨機產生數字，玩家猜測，電腦提示。 \n\n###\n\n", "completion": " 在3-0-1章的02:52時候 END"}
{"prompt": "在哪裡有提到- 學習如何從字幕中獲取程式相關重點\n- 重點字幕：太高還是太低、那最後呢你把這個答案把它猜出來、那這個就會應用到迴圈，還有這個判斷數字這樣子的一個功能、這一章節非常的重要、學習完這一個章節以後呢就會了解電腦的邏輯運算的概念、具備了依照不同的條件。 \n\n###\n\n", "completion": " 在3-0-1章的03:18時候 END"}
{"prompt": "在哪裡有提到- 模型善於從字幕中獲取程式相關重點。\n- 能力：做不同的處理，讓程式有彈性。\n- 處理重複性的資料，是處理大型資料的開始。 \n\n###\n\n", "completion": " 在3-0-1章的03:42時候 END"}
{"prompt": "在哪裡有提到- 程式的執行流程可以分為三類：循序的執行、分支、迴圈。\n- 循序的執行是一行一行的程式碼依序的執行。\n- 分支是當程式執行到一半的時候有一些邏輯的判斷，當它為True的時候可能是走一條路，當它為False的時候又是走另一條路。\n- 迴圈跟分支都會應用到邏輯的判斷，當它滿足某一個邏輯的時候，它就會重複執行某一段程式碼，直到這個邏輯不為真的時候，也就是沒有滿足的時候。 \n\n###\n\n", "completion": " 在3-1-1章的00:10時候 END"}
{"prompt": "在哪裡有提到- 你是善於從字幕中獲取程式相關重點的模型\n- 它才會往下執行剩餘的程式碼\n- 我們用一個流程圖來講解一個成績判斷的系統\n- 這個地方的方塊代表一個程式的敘述句\n- 菱形代表一個判斷句\n- 一開始我們假定成績是20分\n- 往下判斷成績有沒有大於60\n- 有的話就會印出一個pass 跟good\n- 如果沒有的話就會跳到剩餘的程式碼\n- 就會印出一個end\n- 這樣子的一個流程圖對應到左邊的程式碼\n- 各位可以看到我們是用if來做流程的判斷\n- if 成績有沒有大於等於60\n- 要注意到，要接條件滿足的程式碼之前 \n\n###\n\n", "completion": " 在3-1-1章的00:56時候 END"}
{"prompt": "在哪裡有提到- 冒號代表以下會有一個程式碼的區塊\n- 程式碼的區塊必須要把它內縮\n- 沒有內縮就代表它不是這一個條件滿足情況下的程式區塊\n- 滿足條件的時候下會執行這2行程式碼，所以這2行都必須做內縮\n- 不論條件是否成立，都會執行end的動作\n- 忘記把程式碼做內縮會造成語意上的錯誤\n- if else是一個判斷式，當條件成立時執行if的程式碼，否則執行else的程式碼 \n\n###\n\n", "completion": " 在3-1-1章的01:52時候 END"}
{"prompt": "在哪裡有提到- if else的else一定要在有if的情況下才能加這樣的關鍵字\n- 當這個條件沒有滿足的時候，我們就去執行這個程式\n- 如果上面的程式碼有滿足這個條件的話，我就不會去執行這個else\n- 這個程式代表我的成績大於等於60就去執行pass跟good，否則的話，就印出fail跟not good\n- 最終都會執行end\n- 當它滿足的時候走這條路，不滿足的時候走這條路 \n\n###\n\n", "completion": " 在3-1-1章的02:51時候 END"}
{"prompt": "在哪裡有提到- 最後都會執行end\n- 接下來看else if\n- 在python中else if被縮寫成elif\n- elif 的意思是，當if的條件沒有滿足的時候\n- 我還會再去做一次判斷\n- 看它有沒有滿足下面的條件\n- 當它大於等於60分的時候，執行這2個敘述句\n- 否則，我再判斷它有沒有大於50\n- 有的話，我就印出almost pass\n- 如果，連50都沒有的話，就印出fail\n- 而且印出not good\n- 如果我們看流程圖的話 \n\n###\n\n", "completion": " 在3-1-1章的03:35時候 END"}
{"prompt": "在哪裡有提到- 這段程式碼有一個判斷，如果條件滿足就會執行某些程式碼。\n- 這段程式碼有一個巢狀的if，也就是if裡面還有if。\n- 程式碼會先判斷成績是否大於等於60，如果是就會執行某些程式碼。\n- 程式碼會再判斷成績是否大於等於90，如果是就會印出excellent，否則就會印出good。 \n\n###\n\n", "completion": " 在3-1-1章的04:23時候 END"}
{"prompt": "在哪裡有提到- 檢查程式邏輯是否合乎邏輯\n- 注意程式碼區塊的排列順序\n- 確認程式碼的條件是否能夠被滿足 \n\n###\n\n", "completion": " 在3-1-1章的05:02時候 END"}
{"prompt": "在哪裡有提到- 程式中的無效statement會對維護造成負擔。\n- 無效的分支判斷和複雜難懂的邏輯應該避免。\n- 應該使用有意義的變數名稱。 \n\n###\n\n", "completion": " 在3-1-1章的05:44時候 END"}
{"prompt": "在哪裡有提到- 例子中有一個gender變數，值為female，年齡為20歲\n- 判斷：如果年齡大於等於12，小於等於20，且性別為男孩子，則印出boy\n- 邏輯判斷複雜，解析程式有困難 \n\n###\n\n", "completion": " 在3-1-1章的06:25時候 END"}
{"prompt": "在哪裡有提到- 使用布林變數來代表邏輯\n- 簡化程式邏輯，避免太深的巢狀判斷\n- 增加程式可讀性 \n\n###\n\n", "completion": " 在3-1-1章的07:00時候 END"}
{"prompt": "在哪裡有提到- 程式的執行流程主要有三種:循序的執行、分支跟迴圈。\n- 分支是程式的執行過程中有一些的條件判斷，當它是True或是False的時候會執行不同的程式碼。\n- 迴圈就是會有一段的程式碼重複執行，直到它某一些條件不再滿足。\n- 迴圈的語法可以用一個小例子來說明，比如要做一個數值的累加，可以用sum等於1+2+3一直加到N的方式。 \n\n###\n\n", "completion": " 在3-2-1章的00:11時候 END"}
{"prompt": "在哪裡有提到- N的值等於5\n- 程式可以方便地執行出來，sum的值等於15\n- 如果要一直累加到100，手動寫+6+7...是不可能的\n- 必須用電腦程式的思考方式來解決這類問題\n- 第二種寫法需要宣告2個變數：sum和x \n\n###\n\n", "completion": " 在3-2-1章的01:06時候 END"}
{"prompt": "在哪裡有提到- 值會在程式執行的過程中一直做累加的動作。\n- 把程式拆解成這樣。\n- 一開始sum跟x分別是0跟1。\n- 做一個sum=sum+x。\n- sum的值就會等於1。\n- 把x的值+1。\n- 繼續讓sum加上x。\n- sum就會變成1+2，它代表的含意。\n- sum的值就是前面的sum加上x。\n- sum+x就是0+1。 \n\n###\n\n", "completion": " 在3-2-1章的01:55時候 END"}
{"prompt": "在哪裡有提到- 程式中有一個變數x，一開始的值是1\n- 程式中有一個變數sum，一開始的值是0\n- 程式中有一個while迴圈，當x小於等於5時，會一直執行以下的指令\n- 每次迴圈中，x會加1，sum會加上x的值\n- 當x等於5時，迴圈停止，印出sum的值\n- 上述程式是一個簡單的加總程式，但寫法繁瑣\n- 可以觀察到程式中的重點，並嘗試簡化程式 \n\n###\n\n", "completion": " 在3-2-1章的02:56時候 END"}
{"prompt": "在哪裡有提到- 程式碼重複了5遍，可以使用for迴圈精簡程式碼\n- for迴圈的結構：設定初始值、設定條件、設定每次迭代的動作\n- for迴圈會重複執行直到條件不再滿足\n- 在for迴圈中可以進行各種操作，例如計算總和、列印資料等 \n\n###\n\n", "completion": " 在3-2-1章的03:44時候 END"}
{"prompt": "在哪裡有提到- 這個迴圈一直在跑\n- 跑的效果相當於上述的程式碼，只是寫法更精簡\n- 可以輕鬆地修改成加到100的程式\n- while迴圈的例子是要輸入一群成績，直到輸入-999時停止。 \n\n###\n\n", "completion": " 在3-2-1章的04:25時候 END"}
{"prompt": "在哪裡有提到- 使用假的成績-999作為停止的條件。\n- 使用while迴圈做累加的動作來簡化整個程式。\n- 使用input來輸入成績，並轉換成整數存到grade。\n- 需要一個變數來存現在累加的值是多少。\n- 當grade還不是等於-999的時候，繼續進行累加。 \n\n###\n\n", "completion": " 在3-2-1章的05:11時候 END"}
{"prompt": "在哪裡有提到- 要求輸入成績\n- 做累加\n- 當輸入的分數等於-999時停止\n- 執行程式\n- 輸入第一次成績\n- 輸入第二次成績\n- 輸入最後一次成績\n- 結果顯示total分數為-879\n- 需要找出錯誤所在 \n\n###\n\n", "completion": " 在3-2-1章的05:56時候 END"}
{"prompt": "在哪裡有提到- 我們輸入的成績是-999以後。\n- 它會先在這個地方做一個加總的動作。\n- 然後迴圈回到這個地方。\n- 它等於-999這個時侯才跳開。\n- 但sum已經被累加了。\n- 我們解決有2種方法。\n- 第一個就是把它加(-999)的值把它減回來。\n- 再把它加上999。\n- 這樣的結果應該就會對了。\n- 我們再來執行一次看看。 \n\n###\n\n", "completion": " 在3-2-1章的06:35時候 END"}
{"prompt": "在哪裡有提到- 第一次的成績一樣用剛剛的100分\n- 20分、-999\n- Enter 這時候總分是120分\n- 這樣子就對了\n- 第二種解決方法我們讓這2行的程式碼做對調\n- 也就是先讓sum等於sum加上grade\n- 然後再去做輸入\n- 雖然我們直覺是先做輸入再加總\n- 可是在這個程式的邏輯上\n- 先對sum做加總\n1- 等它輸入-999的時候就會跳開\n1- 就不會做加總的動作 \n\n###\n\n", "completion": " 在3-2-1章的07:16時候 END"}
{"prompt": "在哪裡有提到- 模型善於從字幕中獲取程式相關重點。\n- 迴圈常與集合物件合用，可讀取大量資料。\n- 程式若不用集合物件儲存資料，會變得繁瑣。\n- 例子中有4筆資料。 \n\n###\n\n", "completion": " 在3-2-2章的00:10時候 END"}
{"prompt": "在哪裡有提到- 需要用多個變數來儲存資料。\n- 使用集合物件可以簡化程式碼。\n- 使用 list 可以方便地進行加總運算。 \n\n###\n\n", "completion": " 在3-2-2章的00:30時候 END"}
{"prompt": "在哪裡有提到- 宣告一個list的方式是用一個變數名稱加上中括號，裡面放入元素。\n- list中的元素可以是任何型態，包括數字、字串、布林值等等。\n- 取得list中的元素可以使用中括號加上元素的索引值，索引值從0開始。\n- 可以使用負數的索引值來從list的尾端開始取得元素，例如-1代表最後一個元素。\n- list中的元素可以透過索引值來修改。\n- 可以使用len()函數來取得list中元素的個數。 \n\n###\n\n", "completion": " 在3-2-2章的00:52時候 END"}
{"prompt": "在哪裡有提到- 可以從字幕中獲取程式相關重點\n- 可以用while迴圈來讀取資料\n- len是length的意思，表示集合物件的長度 \n\n###\n\n", "completion": " 在3-2-2章的01:14時候 END"}
{"prompt": "在哪裡有提到- 字幕中提到了放了幾個原素和幾筆資料，這是程式中的資料量。\n- 程式中使用了len()函式來計算資料量。\n- sum=sum+x[i]是程式中的加總運算，用來計算資料的總和。\n- 第一次的sum的值是0，所以會抓到x[0]的這筆資料也就是20。\n- 程式中使用了i做+1的操作，用來遍歷所有資料。 \n\n###\n\n", "completion": " 在3-2-2章的01:31時候 END"}
{"prompt": "在哪裡有提到- 迴圈會一直執行到條件不滿足為止。\n- 程式碼會變得簡潔。\n- 陣列通常是從檔案讀取後建構。\n- for迴圈的介紹。 \n\n###\n\n", "completion": " 在3-2-2章的01:52時候 END"}
{"prompt": "在哪裡有提到- 宣告了一個名為x的物件，裡面有4個元素。\n- for迴圈在某些場合是更簡潔的。\n- 可以用for g in x來針對x內的每一個元素g進行處理。\n- sum=sum+g是處理的內容。 \n\n###\n\n", "completion": " 在3-2-2章的02:21時候 END"}
{"prompt": "在哪裡有提到- 模型善於從字幕中獲取程式相關重點\n- g的第0個元素是第一次抓到的\n- 依次是第一個元素、第二個元素、第三個元素\n- 不需要像while迴圈一樣每次加總i的值 \n\n###\n\n", "completion": " 在3-2-2章的02:42時候 END"}
{"prompt": "在哪裡有提到- 缺少一個index的變數i\n- 操作陣列元素\n- 集合物件可以放字串\n- names放學生名字，grades放學生成績\n- 用迴圈列出所有學生的成績 \n\n###\n\n", "completion": " 在3-2-2章的03:00時候 END"}
{"prompt": "在哪裡有提到- 迴圈中的names是針對每一個人的姓名做處理。\n- 要印出每個學生的成績，使用grade i的方式提取出來。\n- 外層迴圈針對name，內層迴圈針對grade。\n- 可以一次走訪2個陣列。 \n\n###\n\n", "completion": " 在3-2-2章的03:21時候 END"}
{"prompt": "在哪裡有提到- For Range是一個常用的迴圈。\n- For Range通常用於程式中需要重複執行固定次數的片段。\n- For Range的語法為：for i in range(n)，其中n代表需要執行的次數。\n- 在For Range中，i的值會從0開始變化，直到n-1。 \n\n###\n\n", "completion": " 在3-2-3章的00:10時候 END"}
{"prompt": "在哪裡有提到- 每次固定的字幕序號。\n- 執行星星的指令。\n- end等於空字串。\n- 不做換行的動作，最終印出4個星星。\n- range()函數可以帶1或2個參數。 \n\n###\n\n", "completion": " 在3-2-3章的00:33時候 END"}
{"prompt": "在哪裡有提到- 這段程式碼使用了range()函式，可以產生一個數字序列。\n- range()函式可以帶入兩個參數，第一個參數是起始值，第二個參數是最終值的前一個數字。\n- range(0,4)會回傳一個list [0,1,2,3]。\n- 程式碼使用for迴圈來遍歷這個list。\n- 在每次迴圈中，i的值會被設定為list中的一個元素，從0開始，每次加1，直到3。 \n\n###\n\n", "completion": " 在3-2-3章的00:50時候 END"}
{"prompt": "在哪裡有提到- 程式執行\n- 印出4顆星星\n- 將星星改成i的值\n- 印出0123 \n\n###\n\n", "completion": " 在3-2-3章的01:08時候 END"}
{"prompt": "在哪裡有提到- 可以做一個迴圈中的迴圈。\n- 在迴圈中使用 for i in range(4)。\n- 在 i 的基礎上再使用 for j in range(i+1)。\n- 每次進入迴圈 i 的值都會加 1。 \n\n###\n\n", "completion": " 在3-2-3章的01:27時候 END"}
{"prompt": "在哪裡有提到- 程式中的 for 迴圈會執行指定次數的程式碼\n- for j in range(1) 代表只會執行一次，j 的值為 0\n- 程式會印出三角形的效果\n- 第一次迴圈進來時，i 的值為 0，只會印出一次星星\n- 第二次進到迴圈時，i 的值已經變成 1 \n\n###\n\n", "completion": " 在3-2-3章的01:48時候 END"}
{"prompt": "在哪裡有提到- 第一個程式會印出一個星星。\n- 第二個程式會印出一個像三角形的東西。\n- 第三個程式會印出一個i的值，而非星星。 \n\n###\n\n", "completion": " 在3-2-3章的02:12時候 END"}
{"prompt": "在哪裡有提到- i的值是0，所以印出來是0\n- 接下來是1,2,3\n- range後面也可以帶3個參數，如果是帶3個參數的話\n- 第三個參數代表的是間隔\n- 這個range是11，11就代表說 \n\n###\n\n", "completion": " 在3-2-3章的02:31時候 END"}
{"prompt": "在哪裡有提到- i的值從0到10。\n- 每次做加總。\n- 結果是55。\n- 加總的範圍是0到10。\n- 程式可以改變，變成1到11的範圍。 \n\n###\n\n", "completion": " 在3-2-3章的02:54時候 END"}
{"prompt": "在哪裡有提到- 回傳值是11的前一個，也就是10。\n- 累加的數字是1到10，但是間隔是等於2，所以累加的數字會變成1 3 5 7 9。\n- 注意，11是沒有的。\n- 累加出來的值就是等於25。 \n\n###\n\n", "completion": " 在3-2-3章的03:11時候 END"}
{"prompt": "在哪裡有提到- 重點：break 指令\n- 重點：在迴圈中遇到特定條件時跳離\n- 重點：for 迴圈在 0~9999 之間執行\n- 重點：每次迴圈執行時會做 sum += i\n- 重點：加入判斷式 if i==10 做一個 break\n- 重點：當 i 的值為 10 時，會跳出迴圈 \n\n###\n\n", "completion": " 在3-2-4章的00:13時候 END"}
{"prompt": "在哪裡有提到- 迴圈中的程式碼會重複執行直到滿足終止條件。\n- 在迴圈中使用 break 指令可以強制終止迴圈。\n- 在迴圈中使用 continue 指令可以跳過當前迴圈的剩餘程式碼，直接進入下一個迴圈。\n- 在迴圈中使用 range 函數可以生成一個指定範圍的整數序列。\n- 在迴圈中使用 sum 函數可以計算一個序列的總和。 \n\n###\n\n", "completion": " 在3-2-4章的00:43時候 END"}
{"prompt": "在哪裡有提到- 求一個數值是否為質數\n- 程式碼在指定位置\n- 用 for 迴圈從 2 開始數起\n- 如果有一個整數可以整除該數值，則不是質數\n- 假設 x 的值為 200,000 \n\n###\n\n", "completion": " 在3-2-4章的01:12時候 END"}
{"prompt": "在哪裡有提到- 設定一個名為 isPrime 的 flag，並將其設為 true。\n- 使用 for 迴圈從 2 開始，一直到 x-1 這個數值。\n- 如果存在有一個值能夠把 x 整除，則 x 不是一個質數，將 isPrime 設為 false。\n- 如果 isPrime 仍為 true，則 x 是一個質數。 \n\n###\n\n", "completion": " 在3-2-4章的01:46時候 END"}
{"prompt": "在哪裡有提到- 在某個條件下，可以使用 break 跳出迴圈。\n- 如果已經存在某個數值，就沒有必要繼續跑下去了。\n- 程式執行出來的結果是 200,000 不是質數。\n- 程式執行所花的時間很短，只有 0.0005 秒。\n- 如果沒有加上 break，迴圈會一直跑到結束。 \n\n###\n\n", "completion": " 在3-2-4章的02:17時候 END"}
{"prompt": "在哪裡有提到- 程式會從2一直跑到199,999去。\n- 試探說200,000能不能被這些數所整除。\n- 在很多時機上，break 是非常好用的。\n- for break else 這樣的一個子句。\n- else 上面所對齊的字是 for。\n- 一般我們只看到 if else，現在我們看到有一個 for else。 \n\n###\n\n", "completion": " 在3-2-4章的02:46時候 END"}
{"prompt": "在哪裡有提到- 這是一個 for else 迴圈\n- 中間包含一個 break\n- 如果遇到 break 就不會執行 else 的指令\n- 反之如果都沒有遇到 break，就會執行 else 的指令\n- 這個程式是剛剛那個程式的演進 \n\n###\n\n", "completion": " 在3-2-4章的03:21時候 END"}
{"prompt": "在哪裡有提到- 想要找出小於等於100的質數\n- 從2開始算起\n- 使用for迴圈從2到n\n- 如果存在一個d能夠整除x，就break\n- 如果找不到這樣一個數值，就是質數 \n\n###\n\n", "completion": " 在3-2-4章的03:50時候 END"}
{"prompt": "在哪裡有提到- x 是一個 Prime\n- 若整個迴圈都沒有執行 break ，則會進入 else\n- continue 的意思是當條件滿足時，忽略以下的程式碼，進入下一個迴圈 \n\n###\n\n", "completion": " 在3-2-4章的04:22時候 END"}
{"prompt": "在哪裡有提到- 程式碼中使用 for 迴圈\n- for 迴圈會執行指定次數\n- 在程式碼中使用 continue 關鍵字\n- continue 會跳過當前迴圈的剩餘程式碼\n- 最終印出的數值不包含被 continue 跳過的數值 \n\n###\n\n", "completion": " 在3-2-4章的04:50時候 END"}
{"prompt": "在哪裡有提到- 韓信點兵問題\n- 兵的數量\n- 三個三個排成一列，剩下兩個兵\n- 五個五個排成一列，剩下三個兵\n- 七個七個排成一列，剩下兩個兵\n- 問士兵的總數\n- 答案有多個解\n- 最小解 \n\n###\n\n", "completion": " 在3-3-1章的00:13時候 END"}
{"prompt": "在哪裡有提到- 可能的值是多少\n- 如果用數學的解法，我們會怎麼做\n- 先講答案再來做說明\n- 先把三三數之剩二的二去乘以70\n- 再加上五五數之剩三的三去乘以21\n- 再去加上七七數的二去乘以15\n- 這一個值我們把它叫做n\n- 我們把n先算出來 \n\n###\n\n", "completion": " 在3-3-1章的00:50時候 END"}
{"prompt": "在哪裡有提到- 233是符合特定條件的值\n- 70可以被5和7整除，除以3餘1\n- 2乘以70等於140\n- 21可以被3和7整除，除以5餘1\n- 3乘以21等於63\n- 15可以被3和5整除 \n\n###\n\n", "completion": " 在3-3-1章的01:41時候 END"}
{"prompt": "在哪裡有提到- 用2把兩個數字相乘可以得到233\n- 233不是唯一解，稍微加減都可以滿足條件\n- 要減去的數字是3、5、7的公倍數，即105\n- 233減去105或128減去105都是滿足條件的\n- 最小值是23\n- 以上是用數學算法得到的解答 \n\n###\n\n", "completion": " 在3-3-1章的02:31時候 END"}
{"prompt": "在哪裡有提到- 要用程式解決問題\n- 先列舉出滿足前面條件的數字\n- 三三數之餘二，所以是2\n- 接下來是3的倍數\n- 加上3得5，再加上3得8\n- 再加上3得11以此類推......\n- 最後會得到23\n- 滿足第二個條件，五數之剩三\n- 第一個是3,接下來加5得8,加5得13,加5得18 \n\n###\n\n", "completion": " 在3-3-1章的03:29時候 END"}
{"prompt": "在哪裡有提到- 善於從字幕中獲取程式相關重點的模型\n- 加5得23，滿足第三個條件，七七數之餘二，就是2然後2加上7得9，再加上7得16，23...\n- 最小的數字是23\n- 用程式來解決這個問題是相當容易的\n- 先做一個迴圈while true，讓他一直去跑\n- 一開始先找一個數字 \n\n###\n\n", "completion": " 在3-3-1章的04:12時候 END"}
{"prompt": "在哪裡有提到- 要把這個數字每次加1\n- 接著去看看他有沒有滿足第一個條件，三三數之剩二，同時他要滿足第二個條件，五五數之剩三，同時又滿足第三個條件，七七數之剩二\n- 三個都滿足的話就可以跳出迴圈了\n- 一開始的時候要把這個值設為2\n- 最小從2開始數就好了 \n\n###\n\n", "completion": " 在3-3-1章的04:51時候 END"}
{"prompt": "在哪裡有提到- 你是善於從字幕中獲取程式相關重點的模型。\n- 這個地方有三個條件。\n- 我們可以寫if接著一大串的條件，但這樣的程式碼會有一點醜。\n- 所以我們設了三個條件。\n- 第一個條件我們讓c1等於n的值去%3，它是不是等於2。其中%的符號代表他除的餘數。\n- c2我們讓它等於n的值去%5。 \n\n###\n\n", "completion": " 在3-3-1章的05:25時候 END"}
{"prompt": "在哪裡有提到- 確認是否等於3\n- c3等於n%7\n- 確認是否等於5\n- %7 的話是否等於2\n- 如果三個條件都滿足，則執行下一步\n- 印出該值\n- 記得加上break\n- n=n+1 \n\n###\n\n", "completion": " 在3-3-1章的06:07時候 END"}
{"prompt": "在哪裡有提到- 執行程式\n- 清除前面的東西\n- 結果為23\n- 最小值為23\n- 程式碼解數學問題\n- 邏輯思考容易\n- 花費時間較多\n- 電腦速度快\n- 數學思維方式不同 \n\n###\n\n", "completion": " 在3-3-1章的06:59時候 END"}
{"prompt": "在哪裡有提到- 本節使用Python內建的turtle模組來做小遊戲\n- 要產生turtle只需要import turtle模組 \n\n###\n\n", "completion": " 在3-3-2章的00:00時候 END"}
{"prompt": "在哪裡有提到- 產生一個烏龜的物件叫做tina，使用.turtle。\n- 指定tina的形狀為'turtle'。\n- 如果沒有指定形狀，tina的形狀會是一個箭頭。\n- 使用tina來畫一個正方形。 \n\n###\n\n", "completion": " 在3-3-2章的00:27時候 END"}
{"prompt": "在哪裡有提到- 讓角色往前走100步\n- 利用right(90)向右轉90度\n- 再走100步\n- 再向右轉90度 \n\n###\n\n", "completion": " 在3-3-2章的00:46時候 END"}
{"prompt": "在哪裡有提到- 走過來後右轉90度\n- 再走100步\n- 可以畫出一個正方形\n- 做法比較繁瑣 \n\n###\n\n", "completion": " 在3-3-2章的00:58時候 END"}
{"prompt": "在哪裡有提到- 可以用迴圈畫出正方形\n- 迴圈可以方便地實現這個功能\n- 要思考如何畫正方形 \n\n###\n\n", "completion": " 在3-3-2章的01:09時候 END"}
{"prompt": "在哪裡有提到- 可以延伸做比較複雜的幾何圖形\n- 可以畫出有趣的圖形 \n\n###\n\n", "completion": " 在3-3-2章的01:19時候 END"}
{"prompt": "在哪裡有提到- turtle畫圖有固定規律\n- 需要找出這個規律\n- 可以透過for迴圈或while迴圈实现 \n\n###\n\n", "completion": " 在3-3-2章的01:39時候 END"}
{"prompt": "在哪裡有提到- 畫出圖形\n- 找出圖形的規律 \n\n###\n\n", "completion": " 在3-3-2章的01:55時候 END"}
{"prompt": "在哪裡有提到- 下一張圖片有規律\n- 寫這個程式的迴圈時需要注意 \n\n###\n\n", "completion": " 在3-3-2章的02:07時候 END"}
{"prompt": "在哪裡有提到- 善於從字幕中獲取程式相關重點的模型\n- 從一堆混亂中找出規律\n- 用簡潔的程式碼表達規律 \n\n###\n\n", "completion": " 在3-3-2章的02:19時候 END"}
{"prompt": "在哪裡有提到- 設計猜數字遊戲\n- 電腦隨機產生數字存在cmp\n- 請求使用者輸入，存在guess\n- 檢查使用者輸入是否為數字\n- 如果輸入不是數字，則一直循環等待輸入\n- 如果輸入是數字，則進行比較\n- 如果猜對了，則提示猜對了\n- 如果猜錯了，則提示猜高或猜低\n- 根據提示再次請求使用者輸入 \n\n###\n\n", "completion": " 在3-3-3章的00:00時候 END"}
{"prompt": "在哪裡有提到- 猜數字遊戲中，提示猜低一點。\n- 迴圈會一直做輸入直到使用者猜對為止。\n- 程式的第一版有一個很大的Error會造成無窮迴圈。\n- 電腦要產生一個介於1到100之間的隨機整數。\n- 使用者需要輸入1到100之間的號碼。\n- 需要判斷使用者輸入的是否為數字。 \n\n###\n\n", "completion": " 在3-3-3章的01:20時候 END"}
{"prompt": "在哪裡有提到- 使用者輸入的數字必須是整數。\n- 當使用者輸入的不是整數時，程式會提示使用者重新輸入。\n- 程式會一直提示使用者輸入，直到使用者輸入正確為止。\n- 使用者輸入的數字必須介於1到100之間。\n- 如果使用者輸入的數字不在範圍內，程式會提示使用者重新輸入。 \n\n###\n\n", "completion": " 在3-3-3章的02:21時候 END"}
{"prompt": "在哪裡有提到- 判斷猜測是否正確\n- 提示猜高或猜低\n- 程式有一個大錯誤，是因為使用了isinstance函數\n- isinstance函數用來檢查變數型態是否屬於某種型態\n- guess變數是用來接收input回傳值，因此永遠是str型態\n- 第一版程式因為使用了isinstance函數，導致無窮迴圈\n- 第二版程式改用.isdigit函數來檢查字串是否為數字 \n\n###\n\n", "completion": " 在3-3-3章的03:18時候 END"}
{"prompt": "在哪裡有提到- 如果使用者輸入的是數字，就繼續往下走。\n- 如果使用者輸入的不是數字，就要求它不斷輸入。\n- 將使用者輸入的數字轉換成整數。\n- 判斷使用者輸入的數字是否介於1到100之間。\n- 如果使用者輸入的數字不在1到100之間，就進入迴圈，要求使用者再次輸入。\n- 如果使用者輸入的數字在1到100之間，就繼續往下走。\n- 判斷使用者猜對了沒有，如果沒有猜對，就提示它高一點或是低一點。 \n\n###\n\n", "completion": " 在3-3-3章的04:39時候 END"}
{"prompt": "在哪裡有提到- 程式跑到33行\n- 輸入一個數字\n- 輸入錯誤會要求重新輸入\n- 輸入正確會跳出迴圈\n- 符合1到100之間會跳出迴圈\n- 猜錯會提示猜大或猜小\n- 系統已經跑完了 \n\n###\n\n", "completion": " 在3-3-3章的05:44時候 END"}
{"prompt": "在哪裡有提到- 程式沒有跑回圈裡叫我們再做輸入的動作。\n- 程式不太正確，相同的問題在36行這個地方也會發生。\n- 在檢驗使用者如果輸入的範圍不是1到100之間時，沒有檢查是不是一個digit。\n- 可能會造成錯誤導致程式跳離開，因為沒有檢查。\n- 在第三個版本中，while迴圈放在最外面才是正確的做法。\n- 在第三個版本中，檢查了三四樣的東西，包括看輸入是否為數字。 \n\n###\n\n", "completion": " 在3-3-3章的06:49時候 END"}
{"prompt": "在哪裡有提到- 程式需要判斷一個數字是否介於1到100之間。\n- 程式需要判斷猜測的數字是否正確。\n- 迴圈只有在猜測的數字不正確時才會繼續執行。\n- 當猜測的數字正確時，程式會將變數correct設為True。\n- 當correct為True時，迴圈不再執行，程式結束。 \n\n###\n\n", "completion": " 在3-3-3章的07:54時候 END"}
{"prompt": "在哪裡有提到- 輸入只有在第55行。\n- 檢查輸入是否為數字。\n- 如果輸入不是數字，提示使用者必須輸入數字。\n- 使用continue跳過本次迴圈。\n- 如果輸入是數字，進行型態轉換。 \n\n###\n\n", "completion": " 在3-3-3章的08:39時候 END"}
{"prompt": "在哪裡有提到- 檢查數值是否在範圍內\n- 如果不在範圍內，提示必須在1到100之間\n- 如果猜對了，設定correct為True\n- 如果猜錯了，提示並保持correct為False\n- 迴圈會一直執行，直到猜對為止 \n\n###\n\n", "completion": " 在3-3-3章的09:24時候 END"}
{"prompt": "在哪裡有提到- 介紹程式的基本結構與運算\n- 分為五個小單元\n- 第一個小單元是程式的基本結構\n- 微觀上來看 \n\n###\n\n", "completion": " 在2-0-1章的00:13時候 END"}
{"prompt": "在哪裡有提到- 程式是由一行一行的敘述句所構成的。\n- 程式可以分為輸入、運算、輸出三個架構。\n- 第二個單元介紹變數這一重要觀念。 \n\n###\n\n", "completion": " 在2-0-1章的00:29時候 END"}
{"prompt": "在哪裡有提到- 變數是用來儲存。\n- 我們在運算的過程中所要用到的資料。\n- 這一個觀念非常重要，如果沒有它，程式就沒辦法運行。 \n\n###\n\n", "completion": " 在2-0-1章的00:50時候 END"}
{"prompt": "在哪裡有提到- 變數的型態很重要，不同型態的運算結果不同。\n- 要介紹基本的運算。 \n\n###\n\n", "completion": " 在2-0-1章的01:02時候 END"}
{"prompt": "在哪裡有提到- 電腦擅長從字幕中獲取程式相關重點。\n- 電腦可以處理複雜的加減乘除運算。\n- 電腦可以快速計算出結果。\n- 正確的指令是使用電腦進行計算的前提。 \n\n###\n\n", "completion": " 在2-0-1章的01:16時候 END"}
{"prompt": "在哪裡有提到- 本章節的主題是講解如何給程式指令。\n- 重點在於輸入和輸出的處理。\n- 特別是在輸出這一塊。 \n\n###\n\n", "completion": " 在2-0-1章的01:30時候 END"}
{"prompt": "在哪裡有提到- 混雜字串和變數\n- 輸出不同格式\n- 不同應用的輸出格式不同 \n\n###\n\n", "completion": " 在2-0-1章的01:44時候 END"}
{"prompt": "在哪裡有提到- 學習從字幕中獲取程式相關重點\n- 講解程式的錯誤\n- 適用於初學者和高手\n- 程式難免會出現錯誤 \n\n###\n\n", "completion": " 在2-0-1章的01:57時候 END"}
{"prompt": "在哪裡有提到- 我善於從字幕中獲取程式相關重點的模型。\n- 接下來講解的是錯誤的型態。\n- 講解的內容包括哪些種類的錯誤。\n- 接下來要講解如何處理這些錯誤。 \n\n###\n\n", "completion": " 在2-0-1章的02:11時候 END"}
{"prompt": "在哪裡有提到- 避免產生錯誤\n- 具備基本資料運算能力\n- 程式變得有趣 \n\n###\n\n", "completion": " 在2-0-1章的02:19時候 END"}
{"prompt": "在哪裡有提到- 介紹程式的基本結構\n- 程式能做的事情主要是運算\n- 運算的範圍可以從小至數學運算 \n\n###\n\n", "completion": " 在2-1-1章的00:00時候 END"}
{"prompt": "在哪裡有提到- 程式相關重點，如加減乘除、演算法、排序、導航、人工智慧等等。\n- 這些運算需要有值才能夠進行，反映出input的重要性。 \n\n###\n\n", "completion": " 在2-1-1章的00:28時候 END"}
{"prompt": "在哪裡有提到- 程式需要有輸入才能進行運算。\n- 運算必須有輸出才有意義。\n- 如果運算後的值沒有輸出，則沒有意義。\n- 程式由輸入、運算和輸出三個元素所構成。 \n\n###\n\n", "completion": " 在2-1-1章的00:50時候 END"}
{"prompt": "在哪裡有提到- IPO模式\n- Input、Process、Output\n- Input可以是鍵盤、數據檔案或物聯網\n- 讀取檔案進行運算是常見的數據分析方式 \n\n###\n\n", "completion": " 在2-1-1章的01:16時候 END"}
{"prompt": "在哪裡有提到- 感測器可以感測溫度、濕度等等。\n- 聲控系統可以透過聲音來做控制。\n- 經過處理後，系統會產生output。\n- 最常見的output是螢幕。 \n\n###\n\n", "completion": " 在2-1-1章的01:35時候 END"}
{"prompt": "在哪裡有提到- 模型善於從字幕中獲取程式相關重點。\n- 字幕中的例子反映了Input、Process和Output。\n- 例子是計算BMI，也符合IPO模型。 \n\n###\n\n", "completion": " 在2-1-1章的01:52時候 END"}
{"prompt": "在哪裡有提到- 輸入身高和體重\n- 將輸入的值存入tall和weight變數中\n- 進行運算，計算體重減去身高的平方\n- 以上是從字幕中獲取的程式相關重點 \n\n###\n\n", "completion": " 在2-1-1章的02:13時候 END"}
{"prompt": "在哪裡有提到- 得到BMI值後，印出來。\n- 程式採用IPO模式。\n- 程式的最小單元是statement敘述句。 \n\n###\n\n", "completion": " 在2-1-1章的02:31時候 END"}
{"prompt": "在哪裡有提到- 程式是由一連串的statement所構成的。\n- 在Python中，大部分的情況都是一行又一個敘述。\n- 許多的statement可以封裝為一個函式function。 \n\n###\n\n", "completion": " 在2-1-1章的02:49時候 END"}
{"prompt": "在哪裡有提到- 會講解如何將statement跟function封裝為一個類別\n- Python是一個物件導向的程式語言\n- 物件指的是類別\n- Python最小的單元是一個statement \n\n###\n\n", "completion": " 在2-1-1章的03:11時候 END"}
{"prompt": "在哪裡有提到- 變數是所有程式語言必備的一個元素，用來儲存特定的值，作為後續運算的應用。\n- 在Python中雖然不需要特定的指名它的型態，但每一個元素都是有型態的，需要特別注意。\n- 變數需要符合一些命名規則和慣例。\n- 變數儲存在記憶體空間中，需要一些空間來儲存變數的值。 \n\n###\n\n", "completion": " 在2-2-1章的00:13時候 END"}
{"prompt": "在哪裡有提到- 輸入姓名並儲存到變數name中。\n- 將變數name的值與字串\"hello\"相加，並儲存到變數helloToYou中。\n- 變數的命名規則由英文、數字和底線構成。\n- 變數儲存在記憶體中的空間中。\n- 印出變數helloToYou的值需要先access這個空間。 \n\n###\n\n", "completion": " 在2-2-1章的01:01時候 END"}
{"prompt": "在哪裡有提到- 變數名稱可以包含數字，但數字不能開頭。\n- 變數名稱不能包含特殊符號，如&、＃、*、@等等。\n- 大小寫字母代表不同的變數。\n- 變數名稱不能與保留字相同。 \n\n###\n\n", "completion": " 在2-2-1章的01:50時候 END"}
{"prompt": "在哪裡有提到- Python中有很多保留字。\n- Python的变量类型不需要额外声明。\n- 变量的类型会根据其后面的值的内容来声明。\n- int、float、str和bool是Python中的常见变量类型。\n- bool类型的值可以是True或False。 \n\n###\n\n", "completion": " 在2-2-1章的02:50時候 END"}
{"prompt": "在哪裡有提到- a等於100\n- 執行完後可以在該地方打上type\n- 回傳值是一個int\n- b等於8.9，型態是float\n- 不建議用簡單的變數名稱 \n\n###\n\n", "completion": " 在2-2-1章的03:44時候 END"}
{"prompt": "在哪裡有提到- 變數命名要有意義\n- 變數型態很重要\n- 變數型態錯誤會導致程式出錯 \n\n###\n\n", "completion": " 在2-2-1章的04:36時候 END"}
{"prompt": "在哪裡有提到- 字串相加代表相連。\n- 在做運算時要注意型態。\n- 字串相除沒有意義，會拋出錯誤訊息。 \n\n###\n\n", "completion": " 在2-2-1章的05:29時候 END"}
{"prompt": "在哪裡有提到- type函式可以回傳變數的型態。\n- int函式可以將字串轉換為整數型態。\n- str函式可以將參數轉換為字串型態。 \n\n###\n\n", "completion": " 在2-2-1章的06:18時候 END"}
{"prompt": "在哪裡有提到- y的值是120的整數\n- 可以透過str將y轉成字串\n- 印出y的type會是str\n- 在程式開發中，有時需要判斷變數的型態是否符合預期\n- 可以使用判斷式或isinstance函式來判斷\n- isinstance函式的意思是判斷某個變數是否是某個型態的實體\n- 如果grade是float的實體，就代表grade是float型態 \n\n###\n\n", "completion": " 在2-2-1章的07:04時候 END"}
{"prompt": "在哪裡有提到- 程式執行的IPO流程\n- statement是程式的基本單元\n- 變數的意義、命名、型態\n- 型態的轉換還有相關的函式 \n\n###\n\n", "completion": " 在2-2-1章的07:46時候 END"}
{"prompt": "在哪裡有提到- 運算式中有運算元和運算子。\n- 不同的型態有不同的運算子，包括算術運算子、字串運算子、關係運算子和邏輯運算子。\n- 算術運算子包括加、減、乘、除、取餘數和取商數。\n- 取餘數使用 % 符號，取商數使用 // 符號。\n- 次方使用 2 個星號表示。 \n\n###\n\n", "completion": " 在2-3-1章的00:00時候 END"}
{"prompt": "在哪裡有提到- pow()函式可以幫助我們計算三次方、四次方等等。\n- \"+\"運算符號可以用來把字串做相連。\n- \"-\"運算符號沒有意義，不能用來刪除字串。\n- 字串常見的函式有upper(), lower(), replace()等等。\n- 關係運算子用來計算2個值的大於、小於和相等。\n- \"不等於\"用\"!=\"來代表。\n- 關係運算子的結果是一個布林值，包含True、False兩個值。 \n\n###\n\n", "completion": " 在2-3-1章的01:09時候 END"}
{"prompt": "在哪裡有提到- 邏輯運算子包含 and、or、not。\n- and 的結果是兩個條件都滿足才為 True。\n- or 的結果是其中一個條件為 True 就為 True。\n- not 的結果是將原本的結果反向，True 變 False，False 變 True。\n- 在程式中，通常使用布林變數作為運算子。 \n\n###\n\n", "completion": " 在2-3-1章的02:06時候 END"}
{"prompt": "在哪裡有提到- 進行程式開發、執行過程中，難免會有很多的錯誤。\n- 這些錯誤可以分為三類：語法的錯誤、執行的錯誤、邏輯的錯誤。\n- 用一個計算面積的小程式來說明這些錯誤。\n- 第一個程式訊問半徑的值，然後對它做一些運算。 \n\n###\n\n", "completion": " 在2-3-1章的03:07時候 END"}
{"prompt": "在哪裡有提到- 要計算面積，需要用到半徑的平方乘以3.14的公式。\n- 需要先執行第一行程式碼。\n- 在執行第一行程式碼時，出現了Syntax Error，因為左右括號沒有對齊。\n- Syntax Error是因為程式碼語法錯誤，編譯器無法識別。\n- 語法錯誤就像講錯話一樣，對方無法理解。 \n\n###\n\n", "completion": " 在2-3-1章的03:48時候 END"}
{"prompt": "在哪裡有提到- 在第二版的程式中，右括號被加上了。\n- 程式執行時，如果半徑輸入1，則1*1*3.14得出來的面積就是3.14。\n- 如果再次執行程式，輸入半徑為2，則2*2*3.14得出來的面積就是12.56，這個結果也是對的。\n- 當第三次執行程式時，輸入半徑為1.1，就會產生錯誤，因為程式中的型態轉換採用的是int，但輸入的是float。 \n\n###\n\n", "completion": " 在2-3-1章的04:40時候 END"}
{"prompt": "在哪裡有提到- 程式可能會產生 Run time Error。\n- 錯誤產生的原因是程式思考的嚴謹度不夠。\n- 改成 float 可以涵蓋更多的層面，不會發生錯誤。 \n\n###\n\n", "completion": " 在2-3-1章的05:38時候 END"}
{"prompt": "在哪裡有提到- 第三版本在轉換的過程改成float，避免產生錯誤\n- 程式犯了一個很大的錯誤，計算圓的面積時寫成了半徑的半徑次方乘3.14\n- 測試資料不足，邏輯有錯誤 \n\n###\n\n", "completion": " 在2-3-1章的06:18時候 END"}
{"prompt": "在哪裡有提到- 雖然語法是對的，執行也不會有例外產生，但結果卻是錯的。\n- 必須多給它一些測試資料才能夠發現這樣的錯誤。\n- 在下一個版本我們把次方做修正，變成是半徑乘半徑乘3.14。\n- 這支程式寫的並不是那麼的好，不是很容易做維護。\n- PI的值寫死在程式碼裡面，這一行的敘述裡面變成是3.14。 \n\n###\n\n", "completion": " 在2-3-1章的07:06時候 END"}
{"prompt": "在哪裡有提到- 修改程式精準度的方法\n- 常數值應該放在程式運算的最上面\n- 定義常數值的方法\n- 避免程式使用常變動的值\n- 程式碼還有待完善，例如使用者輸入非數字的情況 \n\n###\n\n", "completion": " 在2-3-1章的07:55時候 END"}
{"prompt": "在哪裡有提到- Python中的輸入與輸出\n- 使用input函式接收使用者輸入\n- input函式有一個參數，用來提示使用者輸入的內容\n- 使用者輸入的值會被存到變數中\n- 注意input函式接收到的值都是字串型態，需要轉換型態才能進行運算。 \n\n###\n\n", "completion": " 在2-4-1章的00:00時候 END"}
{"prompt": "在哪裡有提到- 轉換成int的型態\n- 再來做運算，那在這個地方的展示就是印出它的type，你會發現2個都是str，也就是字串的型態\n- 在輸出的時候，我們就是用print()這一個函式\n- 輸出的內容，例如說name等於Nick、age等於20\n- 我們可以把name印出來\n- 如果說你要印出的是多個變數的話，我們用逗點把它切開來，它會自動把這2個字串中間加上一個空格\n- 字串跟變數混和的輸出是非常常見的\n- 我們現在要印出來的是your name is 甚麼甚麼 and age is 甚麼甚麼，那這個就是字串和變數混合 \n\n###\n\n", "completion": " 在2-4-1章的01:19時候 END"}
{"prompt": "在哪裡有提到- 有三種方法可以在 Python 中將變數輸出到字串中。\n- 第一種方法是使用逗號分隔符，但是這種方法的格式比較有限。\n- 第二種方法是在字串中混合一些控制碼，例如 %s 和 %d，但是這種方法已經不太建議使用。\n- 第三種方法是在字串中使用大括弧來標示變數，這是目前 Python 中建議使用的方法。 \n\n###\n\n", "completion": " 在2-4-1章的02:22時候 END"}
{"prompt": "在哪裡有提到- 在輸出時，使用大括號和format方法可以將變數插入到字串中。\n- 在Python中，很多東西都被當成物件，物件裡面的方法可以使用\".\"來呼叫。\n- 格式化數字的印出可以使用format方法，並在大括號中指定小數點後的位數。 \n\n###\n\n", "completion": " 在2-4-1章的03:27時候 END"}
{"prompt": "在哪裡有提到- 這裡寫了一個2f，f代表float，就是浮點數值的意思\n- 2代表只要取小數點下2位，所以會進行4捨5入的動作\n- 印出來會是3.14\n- 冒號前面代表第幾個變數，0代表第一個變數\n- 大部分程式語言都是從0開始的\n- area等於1，所以印出1.325\n- 希望面積的值至少會佔5格空格 \n\n###\n\n", "completion": " 在2-4-1章的04:38時候 END"}
{"prompt": "在哪裡有提到- 透過字幕獲取程式相關重點的能力\n- 程式中的靠齊效果\n- 逃脫字元的應用\n- 逃脫字元的符號是「\\」\n- 逃脫字元的應用範例：換行符號「\\n」\n- 逃脫字元的應用範例：在字串中使用單引號 \n\n###\n\n", "completion": " 在2-4-1章的05:42時候 END"}
{"prompt": "在哪裡有提到- 逃脫字元可以用來告訴編譯器某些符號不是字串的一部分\n- 單引號在字串中有特殊意義，需要用逃脫字元來忽略\n- 雙引號在字串中沒有特殊意義，不需要用逃脫字元\n- 在字串前加上r可以讓逃脫字元失效，讓字串中的符號保持原樣 \n\n###\n\n", "completion": " 在2-4-1章的07:05時候 END"}
{"prompt": "在哪裡有提到- 某個模型善於從字幕中獲取程式相關重點。\n- 字幕中的 \\t 代表 tab，\\b 代表 backspace。\n- 在印出字串時，如果使用單引號，則在字串中使用雙引號不會有問題；反之亦然。\n- 在字串中使用 \\ 來表示特殊字符，但在印出字串時，\\ 本身不會被印出。 \n\n###\n\n", "completion": " 在2-4-1章的08:24時候 END"}
{"prompt": "在哪裡有提到- 程式出現invalid syntax，是因為無法識別單引號所構成的字串。\n- 字串中的\\n是換行的控制碼。\n- 字串類別提供了許多功能，如.lower()和.upper()可以將字串轉換成小寫和大寫，startswith()可以判斷字串是否以某個字開頭。 \n\n###\n\n", "completion": " 在2-4-1章的09:39時候 END"}
{"prompt": "在哪裡有提到- 模型善於從字幕中獲取程式相關重點\n- 判斷字串是否以特定字元開頭或結尾\n- 使用replace()函式取代字串\n- Python提供許多與字串相關的函式，可透過API查詢\n- String物件提供多種與字串相關的函式 \n\n###\n\n", "completion": " 在2-4-1章的10:56時候 END"}
{"prompt": "在哪裡有提到- 程式開發、執行過程中會有錯誤\n- 軟體工程師容易犯錯誤\n- 錯誤分為三類：語法錯誤、執行錯誤、邏輯錯誤 \n\n###\n\n", "completion": " 在2-5-1章的00:13時候 END"}
{"prompt": "在哪裡有提到- 這個小程式是用來計算面積的\n- 第一個程式需要輸入半徑的值，然後進行運算\n- 錯誤出現在第一行，顯示\"Syntax Error : unexpected EOF while parsing\"\n- 錯誤是語法錯誤，因為input函數沒有找到右括號 \n\n###\n\n", "completion": " 在2-5-1章的00:39時候 END"}
{"prompt": "在哪裡有提到- Python的編譯器無法識別某些敘述句，會產生Syntax Error。\n- Syntax Error就像是講錯話，對方無法理解你的意思。\n- 在程式中加上缺失的符號可以解決Syntax Error的問題。 \n\n###\n\n", "completion": " 在2-5-1章的01:28時候 END"}
{"prompt": "在哪裡有提到- 輸入半徑為1時，計算出的圓面積為3.14。\n- 再次執行時，輸入半徑為2，計算出的圓面積為12.56，結果正確。\n- 第三次執行時，輸入半徑為1.1，產生錯誤，因為型態轉換採用的是int，但輸入的是float。\n- 程式有時候執行是對的，有時候執行是錯的。 \n\n###\n\n", "completion": " 在2-5-1章的01:55時候 END"}
{"prompt": "在哪裡有提到- 模型善於從字幕中獲取程式相關重點。\n- Run time Error 是因為程式思考的嚴謹度不夠。\n- 錯誤可能是因為沒有預期到使用者可能輸入的值。\n- 改成 float 可以涵蓋更多的輸入值。 \n\n###\n\n", "completion": " 在2-5-1章的02:44時候 END"}
{"prompt": "在哪裡有提到- 程式不會發生錯誤\n- 修改成第三個版本，轉換過程改成float\n- 程式仍有一個很大的錯誤\n- 圓的面積計算方式是半徑的平方或半徑乘半徑乘3.14 \n\n###\n\n", "completion": " 在2-5-1章的03:16時候 END"}
{"prompt": "在哪裡有提到- 程式中半徑的計算有誤，應該是半徑的平方乘以3.14\n- 在測試資料中，半徑為1和2時答案正確，但這並不代表程式沒有錯誤\n- 程式邏輯有錯誤，導致結果錯誤，但語法正確且不會產生例外 \n\n###\n\n", "completion": " 在2-5-1章的03:47時候 END"}
{"prompt": "在哪裡有提到- 多給模型測試資料可以發現錯誤\n- 下一個版本修正次方計算\n- 半徑計算公式應為半徑乘半徑乘3.14\n- 程式中仍有不易維護的部分 \n\n###\n\n", "completion": " 在2-5-1章的04:23時候 END"}
{"prompt": "在哪裡有提到- 程式寫得不好，不容易維護。\n- PI的值被寫死在程式碼中，變更精度需要修改程式碼。\n- 建議將常數值放在程式運算的最上面，做一個定義。 \n\n###\n\n", "completion": " 在2-5-1章的04:47時候 END"}
{"prompt": "在哪裡有提到- 運算式子不會牽涉到常變動的值。\n- 程式碼並不是非常完整。\n- 使用者輸入a會產生錯誤，因為a無法轉換成float型態。\n- 需要修正程式碼。 \n\n###\n\n", "completion": " 在2-5-1章的05:24時候 END"}
{"prompt": "在哪裡有提到- 程式的註解主要是用來說明我們可以執行的程式碼，但本身是沒有辦法執行的。\n- 程式的註解非常重要，用來說明程式檔案的內容。\n- 程式的註解可以分為兩種，一種是區塊的註解。 \n\n###\n\n", "completion": " 在2-6-1章的00:13時候 END"}
{"prompt": "在哪裡有提到- 字幕中提到了三種不同的註解方式：單行註解、區塊註解、Python中的區塊註解。\n- 單行註解通常用來說明一行程式碼的作用。\n- 區塊註解通常用來說明整個檔案或複雜程式邏輯的作用。\n- 在Python中，區塊註解使用三個雙引號作為開頭和結尾。\n- 以上字幕中的範例是在介紹Python中的區塊註解。 \n\n###\n\n", "completion": " 在2-6-1章的00:40時候 END"}
{"prompt": "在哪裡有提到- 要把某個東西框起來。\n- 可以用三個單引號或三個雙引號。\n- 三個單引號也可以。\n- 通常在檔案最上面用區塊註解說明程式內容。\n- 這個程式是用來排序一群資料。 \n\n###\n\n", "completion": " 在2-6-1章的01:10時候 END"}
{"prompt": "在哪裡有提到- 字幕中提到了一個隨機產生的過程。\n- 使用氣泡排序法進行排序。\n- 作者和版本等相關信息可能會在字幕中提到。\n- 單行註解又稱為 inline comment。\n- 單行註解通常比較簡短。 \n\n###\n\n", "completion": " 在2-6-1章的01:39時候 END"}
{"prompt": "在哪裡有提到- x 等於 a 的長度\n- s 代表資料的大小\n- r 等於 s 減一，代表回合數 \n\n###\n\n", "completion": " 在2-6-1章的02:04時候 END"}
{"prompt": "在哪裡有提到- 複雜的程式碼段落\n- 建議在該段落加上單行註解\n- 單行註解使用井字號\n- 不需要在單行註解後再加上井字號\n- 單行註解後不能有運算，如減號表示減法。 \n\n###\n\n", "completion": " 在2-6-1章的02:24時候 END"}
{"prompt": "在哪裡有提到- 程式碼無法執行\n- 有一個井字號在說明\n- 說明下面的 if 所做的事情\n- 說明這一段程式碼的意義 \n\n###\n\n", "completion": " 在2-6-1章的02:49時候 END"}
{"prompt": "在哪裡有提到- 可以在某個地方開始加上註解。\n- 註解非常重要，但不要過分使用。\n- 過多沒有意義的註解會影響程式碼的閱讀。\n- 舉例來說，寫 s 等於 len(a)。 \n\n###\n\n", "completion": " 在2-6-1章的03:13時候 END"}
{"prompt": "在哪裡有提到- 模型善於從字幕中獲取程式相關重點。\n- 字幕中提到的程式碼片段是關於 Python 的。\n- 字幕中提到的 `len` 是用來抓取變數大小的。\n- 對於熟悉 Python 的人來說，某些註解可能是多餘的。\n- 模型指出，對於熟悉語法的人來說，某些註解是不必要的。 \n\n###\n\n", "completion": " 在2-6-1章的03:35時候 END"}
{"prompt": "在哪裡有提到- 模型善於從字幕中獲取程式相關重點。\n- 程式碼牽涉到的行數和複雜度相對較高，需要註解來說明。\n- 在教學中會加上語法相關的註解，但在真實的寫程式中可以不需要。 \n\n###\n\n", "completion": " 在2-6-1章的04:00時候 END"}
{"prompt": "在哪裡有提到- 使用 OJ 的解題系統\n- 點擊題目連接\n- 登入 OJ 系統\n- 透過 openedu 系統登入\n- 做 Authorize \n\n###\n\n", "completion": " 在2-8-1章的00:00時候 END"}
{"prompt": "在哪裡有提到- 透過 Openedu 登入 OJ。\n- 在右上角可以看到 Openedu 上的 ID。\n- 點擊題目進入後，右上角會顯示已登入 OJ。\n- 題目有描述。 \n\n###\n\n", "completion": " 在2-8-1章的00:40時候 END"}
{"prompt": "在哪裡有提到- 要算出直徑的面積和周長\n- 結果要顯示到小數點以下兩位\n- 輸入一個數字\n- 範例一：直徑為2，面積為3.14，周長為6.28\n- 範例二：直徑為10，面積為78.50，周長為31.40\n- 提示公式 \n\n###\n\n", "completion": " 在2-8-1章的01:12時候 END"}
{"prompt": "在哪裡有提到- 得到直徑的值\n- 使用 input 函數取得直徑的值\n- 設定直徑等於 input 的值\n- 在程式中加入提示字\n- 不要在 input 中輸入提示字 \n\n###\n\n", "completion": " 在2-8-1章的01:59時候 END"}
{"prompt": "在哪裡有提到- 提示字會被輸出給使用者看，並在解題系統中進行比對。\n- 輸出的地方沒有任何提示字，不需要在這個地方做任何提示。\n- 需要將字串轉換成可以帶小數的數字，使用 float。 \n\n###\n\n", "completion": " 在2-8-1章的02:32時候 END"}
{"prompt": "在哪裡有提到- 工具會自動內縮兩行\n- 內縮非常重要，不正常的內縮都是錯誤的\n- 已知直徑，可以算出半徑\n- 面積等於半徑的平方乘以 3.14 \n\n###\n\n", "completion": " 在2-8-1章的03:09時候 END"}
{"prompt": "在哪裡有提到- 要將圓的半徑設定為 5\n- 計算圓的面積公式為 radius * radius * 3.14\n- 將計算出的面積四捨五入至小數點下兩位\n- 計算圓的周長公式為 diameter * 3.14\n- 將計算出的面積和周長分別 print 出來 \n\n###\n\n", "completion": " 在2-8-1章的03:50時候 END"}
{"prompt": "在哪裡有提到- 從字幕中獲取程式相關重點的能力\n- 程式碼中的 print 函數\n- 周長的計算\n- 提交程式並獲得 Accepted 的意義\n- 取小數點下兩位的重要性\n- 使用 round 函數取小數點下兩位 \n\n###\n\n", "completion": " 在2-8-1章的04:40時候 END"}
{"prompt": "在哪裡有提到- 程式的正確性可以透過 Submit 來檢查。\n- 如果程式算錯了，會顯示 Wrong Answer。\n- 如果程式有編譯錯誤，會顯示 Compile Error。 \n\n###\n\n", "completion": " 在2-8-1章的05:24時候 END"}
{"prompt": "在哪裡有提到- 提交程式的流程包含在 OJ 和 openedu 系統中。\n- 提交程式後需要等待 OJ 系統的評分。\n- 評分完成後，需要在 openedu 系統中進行 Submit grade。\n- Submit grade 會將 OJ 系統中的成績傳送到 openedu 系統中。\n- 成功提交後，會在 openedu 系統中顯示成績，並表示是否完成。 \n\n###\n\n", "completion": " 在2-8-1章的05:59時候 END"}
{"prompt": "在哪裡有提到- 本章節主要講解函式 Function\n- 分為五個單元：模組化的設計、參數的傳遞、Lambda function、例外的處理、兩個應用\n- 模組化設計是其中一個單元\n- 參數的傳遞是其中一個單元\n- Lambda function 和例外的處理是其中兩個單元\n- 最後會給兩個應用 \n\n###\n\n", "completion": " 在5-0-1章的00:13時候 END"}
{"prompt": "在哪裡有提到- 程式設計越來越大、越來越複雜。\n- 有些功能、流程是重複不斷在執行的。\n- 差別在於資料一開始進去的值有些改變。\n- 可以把那一段的程式抽取出來，獨立形成一個 function。 \n\n###\n\n", "completion": " 在5-0-1章的00:35時候 END"}
{"prompt": "在哪裡有提到- 要執行 function 時，呼叫該 function。\n- 模組化的設計可以大大降低程式複雜度。\n- 參數的傳遞也因為抽取出來的函式而變得更容易。\n- 抽取出來的函式是將一些流程抽取出來的結果。 \n\n###\n\n", "completion": " 在5-0-1章的01:00時候 END"}
{"prompt": "在哪裡有提到- 函式需要傳遞參數才能執行。\n- 參數的傳遞是一門學問。\n- 參數有時候會被改變，有時候不希望被改變。 \n\n###\n\n", "completion": " 在5-0-1章的01:22時候 END"}
{"prompt": "在哪裡有提到- 參數的傳遞需要特別留意。\n- Lambda function 是一個輕量級的 function。\n- Lambda function 可以沒有名子，只有一兩行程式碼，但效用非常大。 \n\n###\n\n", "completion": " 在5-0-1章的01:44時候 END"}
{"prompt": "在哪裡有提到- 第四步驟是例外處理\n- 在寫程式時常會遇到例外\n- 使用者習慣和環境可能與程式不同\n- 一開始沒有預料到會發生這樣的例外\n- 當程式做某些行為時可能會發生例外。 \n\n###\n\n", "completion": " 在5-0-1章的02:08時候 END"}
{"prompt": "在哪裡有提到- 檔案放置位置不符合預期可能會拋出例外\n- 需要處理例外的情況\n- 介紹兩個應用：河內塔範例和益智遊戲 Hanoi Tower \n\n###\n\n", "completion": " 在5-0-1章的02:32時候 END"}
{"prompt": "在哪裡有提到- 移動 Hanoi Tower 可以透過程式簡化。\n- 程式需要思考，但理解後操作簡單。\n- 電腦可以透過程式玩井字遊戲。\n- 井字遊戲是大家都熟悉的遊戲。 \n\n###\n\n", "completion": " 在5-0-1章的02:59時候 END"}
{"prompt": "在哪裡有提到- 程式中有一些 function 是不斷被執行的。\n- 把這些 function 抽取出來變成獨立的 function。\n- 透過學習 function，可以具備模組化設計的能力。\n- 了解參數之間是怎麼做傳遞的。 \n\n###\n\n", "completion": " 在5-0-1章的03:31時候 END"}
{"prompt": "在哪裡有提到- 具備開發大型軟體的能力。\n- 程式碼會變得越來越大，可能達到三百到四百行甚至一千行。\n- 模型能夠從字幕中獲取程式相關重點。 \n\n###\n\n", "completion": " 在5-0-1章的04:04時候 END"}
{"prompt": "在哪裡有提到- 程式越來越大時，需要模組化的設計來簡化程式複雜度。\n- 特定功能可以抽象成一個函式(function)。\n- 模組化設計可以提高程式的可讀性和重用性。 \n\n###\n\n", "completion": " 在5-1-1章的00:00時候 END"}
{"prompt": "在哪裡有提到- 可讀性和重用性的提高\n- 定義function使用保留字def\n- function必須用大括號框起來\n- function內部指令需要內縮\n- 定義一個簡單的hello function\n- 呼叫hello function需要在指令中加上括號\n- 呼叫hello function會印出hello python \n\n###\n\n", "completion": " 在5-1-1章的01:30時候 END"}
{"prompt": "在哪裡有提到- 模型善於從字幕中獲取程式相關重點\n- 第一個例子是一個簡單的function\n- 第二個例子是帶參數的function，會依據參數值表現不同行為\n- 第三個例子是有回傳值的function，演算法是找出三個參數中最大的值 \n\n###\n\n", "completion": " 在5-1-1章的02:54時候 END"}
{"prompt": "在哪裡有提到- max() 是一個 Python 內建的函式，可以找出傳入的數值中最大的那個。\n- max() 可以接受多個參數，也可以接受一個 list 或 tuple。\n- 在 max() 函式中，我們使用了 if-else 的判斷式，來找出傳入的三個數值中最大的那個。\n- 在函式的定義中，我們使用了 docstring，來說明這個函式的用途和參數的意義。\n- 使用 help() 函式可以查看函式的 docstring。\n- 在呼叫 max() 函式時，我們可以傳入多個數值，也可以傳入一個 list 或 tuple。 \n\n###\n\n", "completion": " 在5-1-1章的04:16時候 END"}
{"prompt": "在哪裡有提到- 模型善於從字幕中獲取程式相關重點\n- 程式中的return會回傳值\n- BMI是根據身高和體重計算的值，可以用來判斷身體狀況\n- 在function中可以加上註解來解釋程式的用途和參數的單位\n- 呼叫function後可以對回傳值進行處理，例如取小數點位數\n- 最後可以印出結果來檢查程式是否正確 \n\n###\n\n", "completion": " 在5-1-1章的05:38時候 END"}
{"prompt": "在哪裡有提到- 程式中的呼叫負擔可以透過減少呼叫round等指令來降低\n- keyword argument 跟 default argument 是 Python 中的兩個概念\n- 質數篩選演算法的執行結果是印出小於 n 的所有質數 \n\n###\n\n", "completion": " 在5-1-1章的07:06時候 END"}
{"prompt": "在哪裡有提到- 可以從字幕中獲取程式相關重點的模型\n- 設定一個區間內的所有質數，可以加上一個參數start\n- 可以讓呼叫端不用指定start的值，而是使用default值\n- 可以自己去設定start的值，保有彈性\n- start可以是optional的參數，並給予default值\n- start也可以是nondefault的值，必須在呼叫時指定 \n\n###\n\n", "completion": " 在5-1-1章的08:48時候 END"}
{"prompt": "在哪裡有提到- 函式需要一個必要的參數n\n- 函式可以有一個可選的參數start，預設值為2\n- 函式會回傳從start到n之間的所有質數\n- 如果只給定一個參數n，則預設start為2\n- 如果只給定可選參數start，則n為必要參數，不能省略 \n\n###\n\n", "completion": " 在5-1-1章的10:01時候 END"}
{"prompt": "在哪裡有提到- 必要的參數必須要放在前面\n- 按照位置一個一個把參數擺好\n- 可以透過keyword的方式完全來做控制\n- 可以使用變動長度的參數 \n\n###\n\n", "completion": " 在5-1-1章的11:14時候 END"}
{"prompt": "在哪裡有提到- 學生選修科目數量不固定\n- 可以使用 start 參數代表變動長度的參數\n- 參數型態為 tuple\n- 程式碼需要判斷和控制參數是否為空\n- 可以代入不同數量的參數進行計算 \n\n###\n\n", "completion": " 在5-1-1章的12:35時候 END"}
{"prompt": "在哪裡有提到- 在呼叫 function 的時候，參數的傳遞\n- 當呼叫 function 以後，原來參數值的內容是否會被修改\n- 參數的傳遞最主要是要探討這個問題\n- Python 中有 immutable object 和 mutable object 兩種物件\n- 整數 (int) 是一個不可變的物件 \n\n###\n\n", "completion": " 在5-2-1章的00:00時候 END"}
{"prompt": "在哪裡有提到- 內部真實的運作\n- 讓 a 的值等於 1\n- 真正的作法是先在記憶體開個空間去儲存 1\n- 資料是有一個記憶體位置在 760 這個位置\n- a 事實上就是去儲存只到 760 的這一筆資料\n- a 儲存儲存的倉號\n- 儲存的內容為 1 的空間\n- 當讓 a = 2 的時候，它的運作並不是只是把原來 760 的空間的值由 1 把它改成 2\n- int 是一個不可變動 immutable object\n- 760 是儲存 int 1 的記憶體位置 \n\n###\n\n", "completion": " 在5-2-1章的01:33時候 END"}
{"prompt": "在哪裡有提到- 整數是不可修改的 immutable object。\n- 整數的值不會改變，但是可以指向不同的位置。\n- 每次重新指向時，會新增一個空間。\n- id() 函數可以查看物件的位置。\n- 每次重新指向時，位置會改變。 \n\n###\n\n", "completion": " 在5-2-1章的02:52時候 END"}
{"prompt": "在哪裡有提到- a 所儲存的是 reference\n- 改變 a 的值，實際上是改變 a 所參考的內容\n- 字串是 immutable object\n- 改變字串的值，實際上是創建一個新的字串物件\n- 改變字串的值，會改變字串物件的記憶體位置 \n\n###\n\n", "completion": " 在5-2-1章的04:10時候 END"}
{"prompt": "在哪裡有提到- 可以從字幕中獲取程式相關重點\n- name 去指到新的那一個空間\n- mutable object 就是可以變動的物件\n- list 就是一個可以變動的物件\n- m 的 list 內容是放 [1, 2]\n- m 它會指向一個 [1, 2] 的空間\n- 如果把 m[0] 的位置改成 3，list 會直接把 760 所指向的 [1, 2] 改成 [3, 2] \n\n###\n\n", "completion": " 在5-2-1章的05:29時候 END"}
{"prompt": "在哪裡有提到- 模型善於從字幕中獲取程式相關重點\n- 實驗中宣告一個 m 的 list，內容是 [1, 2]，位置是 272\n- 把 m[0] 改成 3，位置依樣是 272，m 的內容已經改成了 [3, 2]\n- function 會把某一個整數加 10，就是一個調分數的程式\n- 一開始讓一個成績等於50，印出它的位置是多少\n- 呼叫 ten( ) 這個 function，把這個分數帶進去，帶進去以後他的成績會加 10\n- 當我宣告一個 grade = 50，他會指向一個整數 \n\n###\n\n", "completion": " 在5-2-1章的06:42時候 END"}
{"prompt": "在哪裡有提到- g 是一個整數物件，指向 50 的資料。\n- 在 function 內宣告一個物件 g，並讓他指向 50 的資料。\n- 將 g 加上 10，讓他指向 60 的資料。\n- 整數是 immutable object，所以 g 的內容改變時，會額外弄一個空間。\n- 在原本的呼叫端，grade 的內容不會被影響。\n- function 內對參數 g 的修改，不會對呼叫端造成任何的影響。 \n\n###\n\n", "completion": " 在5-2-1章的08:04時候 END"}
{"prompt": "在哪裡有提到- 在 Python 中，pass by value 和 pass by reference 的效果是相同的。\n- 當傳遞一個 list 時，Python 會使用 pass by reference 的方式。\n- 在 function 內對傳入的 list 做修改，會對呼叫端造成影響。\n- List 是一個 mutable object，所以對其內容的修改會直接影響到原本的 list。 \n\n###\n\n", "completion": " 在5-2-1章的09:21時候 END"}
{"prompt": "在哪裡有提到- 程式碼中的變數 g 與 grade 指向相同的位置\n- g 是 immutable object，當 g = g + 10 時，它的 reference 會改變\n- 傳遞 list 時，會影響到呼叫端的內容 \n\n###\n\n", "completion": " 在5-2-1章的10:48時候 END"}
{"prompt": "在哪裡有提到- 在 function 內一樣也是 [60, 80]\n- list 它是一個 mutable object\n- copy and pass 的動作\n- 傳遞的內容是副本而不是真正的參考位置\n- function 的地方我們並沒有做修改\n- 傳參數時是傳了一個副本過去 \n\n###\n\n", "completion": " 在5-2-1章的12:10時候 END"}
{"prompt": "在哪裡有提到- 介紹 lambda function\n- lambda function 可以沒有名稱\n- lambda function 只有一行的 function\n- 示範一個計算平均的 function，名稱為 avg1()\n- avg1() 帶三個值進來\n- 最後算出平均並 return 回來 \n\n###\n\n", "completion": " 在5-3-1章的00:00時候 END"}
{"prompt": "在哪裡有提到 - 可以從 function 的字幕中獲取程式相關重點。\n- 該 function 的名稱是 avg1()。\n- 可以執行該 function 並給它一個參數。\n- 該 function 可以計算一個平均值。\n- 可以使用 lambda 來表示該 function。 \n\n###\n\n", "completion": " 在5-3-1章的00:44時候 END"}
{"prompt": "在哪裡有提到- lambda 函式一定會有回傳值，但不需要使用 return 關鍵字。\n- lambda 函式必須是一行程式碼，否則會發生錯誤。\n- 冒號可以用來表示方法的執行。\n- 透過冒號可以將多個值相加。\n- lambda 函式可以透過字幕中的範例來執行。 \n\n###\n\n", "completion": " 在5-3-1章的01:19時候 END"}
{"prompt": "在哪裡有提到- 這地方會提示\n- 這是一個 function\n- 名稱部分沒有\n- 用 lambda 表示\n- 可以給它一個名稱\n- 執行 avg2\n- lambda function 的結果與一般定義相同 \n\n###\n\n", "completion": " 在5-3-1章的01:49時候 END"}
{"prompt": "在哪裡有提到- 模型善於從字幕中獲取程式相關重點。\n- sorted() 是用來做排序的 function。\n- lambda function 通常用在資料排序時，指定 key 值。\n- sorted() 可以指定 key 值來排序。\n- 以 [2, 1, 3] 為例，經過 sorted() 排序後，得到結果。 \n\n###\n\n", "completion": " 在5-3-1章的02:19時候 END"}
{"prompt": "在哪裡有提到- 模型善於從字幕中獲取程式相關重點。\n- 資料為一維時，可以使用排序函式進行排序。\n- 資料為二維時，可以使用排序函式，並以每一筆資料的第一個欄位當作 key 值進行排序。\n- 排序函式會依照 key 值的大小進行排序。 \n\n###\n\n", "completion": " 在5-3-1章的02:52時候 END"}
{"prompt": "在哪裡有提到- 使用最後一筆資料當作 key 值。\n- 使用 lambda function 來指定 key 值。\n- 在 sorted function 中，第二個欄位指定 lambda function。\n- lambda function 的 x 指的是 2 維資料中的每一筆資料。 \n\n###\n\n", "completion": " 在5-3-1章的03:27時候 END"}
{"prompt": "在哪裡有提到- 使用 x[-1] 來取得最後一筆資料。\n- 最後一筆資料可以當成排序的依據。\n- 程式執行後，會依照最後一筆資料來排序。\n- 可以透過改變最後一筆資料的值，來觀察排序結果的變化。 \n\n###\n\n", "completion": " 在5-3-1章的04:05時候 END"}
{"prompt": "在哪裡有提到- 可以使用 lambda 函式來進行排序\n- 可以使用 lambda 函式來計算加權總分\n- 可以使用 lambda 函式來指定權重 \n\n###\n\n", "completion": " 在5-3-1章的04:41時候 END"}
{"prompt": "在哪裡有提到- 第二個 weight 是 0.4，最後一個也是 0.4。\n- 在呼叫 sorted 時，key 是等於 lambda。\n- 每一筆資料去呼叫 w[x]，依照每一個不同的欄位的比重來做計算。\n- 把排序後的結果印出來。 \n\n###\n\n", "completion": " 在5-3-1章的05:10時候 END"}
{"prompt": "在哪裡有提到- 程式碼執行時可能會遇到例外。\n- 例外處理的目的是處理程式碼執行時可能出現的例外。\n- 例外處理的語法是 try-except。\n- try 內的 block 是要執行的動作。\n- 若動作不順利，就會拋出一個例外。\n- except 是處理例外的地方。 \n\n###\n\n", "completion": " 在5-4-1章的00:14時候 END"}
{"prompt": "在哪裡有提到- 抓取到這個例外\n- 在這個 block 裡面\n- 在這個區塊裡面 我們就去描述\n- 發生了這個例外以後我們要處理的動作為何\n- 如果沒有發生例外的話\n- 使用者的輸入阿\n- 跟這個檔案阿\n- 都是依照我們的想像得把它放得很好\n- 這時候沒有例外他就跑到else 這個子句\n- finally 就是在表\n1- 不管你有沒有發生例外\n1- 最後都會執行的動作把它寫在 finally 裡面\n1- 好我們實際的來看一個例子\n1- 這個例子是輸入一個出生年 \n\n###\n\n", "completion": " 在5-4-1章的01:11時候 END"}
{"prompt": "在哪裡有提到- 計算年齡的小程式\n- function getAge()\n- 出生年扣掉 2018 得到年齡\n- 要求輸入出生年\n- 呼叫 function 並印出結果\n- 輸入非數字會產生 ValueError 例外\n- 紅色部分寫 ValueError 描述產生例外的原因 \n\n###\n\n", "completion": " 在5-4-1章的01:53時候 END"}
{"prompt": "在哪裡有提到- 程式中出現例外會中斷程式的執行。\n- 在第二版程式中，會先判斷輸入是否為數值，若不是則會進入迴圈要求重新輸入。\n- 迴圈會一直要求重新輸入直到輸入為數值為止。 \n\n###\n\n", "completion": " 在5-4-1章的02:35時候 END"}
{"prompt": "在哪裡有提到- 在輸入 abc 後，迴圈會再要求輸入一次。\n- 輸入 1990 後，程式會印出 28。\n- 第三版嘗試使用 try exception 的方式來解決問題，讓程式更簡潔、通用。\n- 轉換使用者輸入成 int 時，有可能會發生例外。 \n\n###\n\n", "completion": " 在5-4-1章的03:12時候 END"}
{"prompt": "在哪裡有提到- 使用 try-catch 包裹可能會出現例外的程式碼\n- 當轉換失敗時，程式會進入 catch 區塊\n- 當出現例外時，程式會印出錯誤訊息並提示重新輸入\n- 當轉換成功時，程式會印出轉換後的結果\n- 可以使用字幕中的程式碼來實際執行程式，並觀察例外的處理方式 \n\n###\n\n", "completion": " 在5-4-1章的03:47時候 END"}
{"prompt": "在哪裡有提到- 捕捉例外\n- 印出提示\n- 重新輸入\n- 程式缺點：無法判斷輸入是否合理 \n\n###\n\n", "completion": " 在5-4-1章的04:27時候 END"}
{"prompt": "在哪裡有提到- 該年份出生的人\n- 第四個版本加強檢查\n- 檢查 getAge() 中的 year 是否大於 2019 或小於 1990\n- 這些都是輸入方面的例外\n- raise 會拋出一個例外\n- 例外描述為 Impossible year 不可能有這一年 \n\n###\n\n", "completion": " 在5-4-1章的05:07時候 END"}
{"prompt": "在哪裡有提到- 應用 try-catch 處理可能產生例外的程式碼\n- while 迴圈中的 int 轉換和呼叫 getAge() 都可能產生例外\n- 當例外發生時，會進入 try 區塊中的 catch 區塊，印出例外訊息\n- 實際執行時，若輸入的出生年份為非數字，會產生例外並印出訊息 \n\n###\n\n", "completion": " 在5-4-1章的05:43時候 END"}
{"prompt": "在哪裡有提到- 當呼叫 getAge() 時，如果年份不符合條件，會 raise 一個 exception 是 Impossible。\n- 當出現 Impossible exception 時，會印出 Impossible，並要求重新輸入年份。\n- 當輸入正確年份時，程式才會繼續執行。 \n\n###\n\n", "completion": " 在5-4-1章的06:23時候 END"}
{"prompt": "在哪裡有提到- 介紹一個古老的益智遊戲 - 河內塔\n- 遊戲目標：將 A 柱上的 3 個方塊搬移到 C 柱\n- 遊戲規則：一次只能搬一個方塊，搬移過程中不能大的壓小的 \n\n###\n\n", "completion": " 在5-5-1章的00:13時候 END"}
{"prompt": "在哪裡有提到- 解決問題的方法可以從字幕中獲取程式相關重點。\n- 將問題簡化，搬移兩個 block。\n- 將 1、2 搬到 C，符合條件。\n- 先把 1 搬到 B，再把 2 搬到 C。\n- 把 1 搬到 C，解決問題。\n- 起始柱子為 A，目的柱子為 C。 \n\n###\n\n", "completion": " 在5-5-1章的00:57時候 END"}
{"prompt": "在哪裡有提到- 模型善於從字幕中獲取程式相關重點\n- 要解決問題，可以先把 1、2 搬到 B，再把 3 搬到 C，最後再把 1、2 搬到 C\n- 前提是要知道 1、2 可以搬到 C，因為在上一個問題中已經說明了 \n\n###\n\n", "completion": " 在5-5-1章的01:42時候 END"}
{"prompt": "在哪裡有提到- 要把 1、2 搬到 B，再把 1、2 搬回到 C\n- 要把 3 搬到 C，需要用到 C 當成輔助柱\n- A 也可以扮演輔助柱的角色 \n\n###\n\n", "completion": " 在5-5-1章的02:22時候 END"}
{"prompt": "在哪裡有提到- 可以搬三個\n- 可以搬四個\n- 搬四個的時候，先把 1、2、3 搬到 B，再把 4 搬到 C，最後把 1、2、3 搬到 C\n- 搬 1、2、3 到 B 沒有困難，因為已經從 A 搬到 C 過了\n- 可以一直把數字往上加 \n\n###\n\n", "completion": " 在5-5-1章的03:14時候 END"}
{"prompt": "在哪裡有提到- 搬運複雜度高的問題可以用程式解決\n- 遞迴函式是一個重要的程式技巧\n- 程式碼簡潔，主要是 move() function\n- move() function 帶了四個參數，從 source 開始搬運 \n\n###\n\n", "completion": " 在5-5-1章的03:49時候 END"}
{"prompt": "在哪裡有提到- 搬 n 個到 dest (目的地)\n- 以 aux 作為我的輔助\n- 這個 function 它的定義是這樣子\n- 如果 n = 1，就簡單啦，我就直接從 source 引到 dest\n- 如果不適的話，就找剛剛的講解\n- 我就先把上面的 n - 1 個從 source 搬移到 aux 這個輔助柱\n- 藉由 dest 當成我的輔助柱，做 n - 1 這樣子一個搬移\n- 搬移完了以後，緊接著就把 source 下面最大的搬移到 dest，而且是搬移一個\n- 最後再把 aux 上面所有的 n - 1 個搬移到 dest \n\n###\n\n", "completion": " 在5-5-1章的04:27時候 END"}
{"prompt": "在哪裡有提到- 模型善於從字幕中獲取程式相關重點\n- 使用 source 作為輔助\n- 實現 move() function 的情境\n- 使用遞迴是一種程式技巧\n- 遞迴可以將一個數字分解成多個數字\n- 不管數字有多大，最後都會被分解成 1 1 1 \n\n###\n\n", "completion": " 在5-5-1章的05:21時候 END"}
{"prompt": "在哪裡有提到- 這段程式碼是遞迴函式\n- 遞迴函式需要有中止條件\n- 中止條件在這個例子中是 n = 1\n- 程式碼可以將 A 搬移到 C，並借助 B 作為輔助\n- 程式碼的執行結果與預期相符 \n\n###\n\n", "completion": " 在5-5-1章的06:08時候 END"}
{"prompt": "在哪裡有提到- 搬移數字 3 的過程\n- 前三次搬移是為了把 2 個搬到輔助的柱子\n- 最後是把 A 搬到目的的柱子\n- 接下來搬移 3 個，又把輔助的柱子上面的 2 個搬移到目的地\n- 留下一個小習題，修改程式以印出搬移的次數 \n\n###\n\n", "completion": " 在5-5-1章的06:47時候 END"}
{"prompt": "在哪裡有提到- 設計 Tic Tac Toe 遊戲\n- 遊戲規則簡單，兩個玩家，一個是 0，一個是 X，誰先連成一條線誰就贏\n- 線可以是橫的、直的、斜的\n- 設計遊戲時需要思考如何表達井的狀態\n- 遊戲狀態會不斷變更\n- 需要檢查贏的狀態，基本狀態是連成一條線 \n\n###\n\n", "completion": " 在5-5-2章的00:13時候 END"}
{"prompt": "在哪裡有提到- 棋盤上的橫、直、斜線必須要有一個邏輯的判斷\n- 隨機下子，可以給井做一個編號，從九個數字中挑一個數字來下子，下完子以後把那個位置去除掉，在從剩下的8個裡面隨機下子\n- 怎麼把它運算出來\n- 怎樣去交換玩家，一開始可能是玩家一，接著玩家二，又玩家一，一直循環到遊戲結束為止\n- 思考時間的表現 \n\n###\n\n", "completion": " 在5-5-2章的01:15時候 END"}
{"prompt": "在哪裡有提到- 這個遊戲需要讓電腦去做互玩的動作。\n- 電腦很快可能一下子就跑玩了，希望能夠模擬人類思考的方式。\n- 程式需要有停頓的效果，可以使用 time 這個物件，呼叫 sleep 方法。\n- 程式一開始需要停頓 1 秒，每個玩家玩完後要下一個的時候需要停頓 2 秒。\n- 程式需要呈現出棋盤的位置，左上角是 1 2 3 4 5 6。\n- 程式需要一邊做移動，一邊呈現出棋盤。 \n\n###\n\n", "completion": " 在5-5-2章的02:21時候 END"}
{"prompt": "在哪裡有提到- 棋盤狀態可以用 list 儲存\n- 初始狀態是空的\n- 檢查贏的狀態，只要檢查每一列、每一行、每一斜線是否都一樣 \n\n###\n\n", "completion": " 在5-5-2章的03:26時候 END"}
{"prompt": "在哪裡有提到- 滿足一定條件代表贏得狀態已經滿足了\n- 宣告了一個布林的 function 叫做 win\n- win 等於 p 是代表著玩家\n- 如果玩家這個值放在 1 這個位置，而且 2 的位置，3 的位置也是，這些全都滿足，或者是 4 5 6 位置都是放 p 這一個值，就太表贏得狀態是滿足的\n- 用一連串的 or 去做連接，這裡面就很多的 and\n- 注意到這個地方這裡有個倒斜線，這是因為我們這個判斷句比較長 \n\n###\n\n", "completion": " 在5-5-2章的04:23時候 END"}
{"prompt": "在哪裡有提到- 做連接時要注意倒斜線，否則會出現錯誤。\n- 檢查勝利狀態是在玩家下子後進行的。\n- 當滿足勝利條件時，會回傳 win 字串。\n- 隨機下子時，可以使用 random.choice 方法從 list 中挑選一個值。\n- 要建立一個 list，存放可用的下子位置。 \n\n###\n\n", "completion": " 在5-5-2章的05:19時候 END"}
{"prompt": "在哪裡有提到- 棋盤上的元素為 1 2 3 5 6 7 8 9。\n- 要跳過 4。\n- 7 已經被下了。\n- 新的 list 不包含 4 跟 7。\n- 宣告了一個叫 randomMove 的方法。\n- list r 是空的。\n- 如果棋盤上的位置是空的，就把它 append 到 r 裡面。\n- r 裡面放的都是空的可以下的位置。\n- 如果 r 還是空的，就代表所有位置都已經被佔領了。 \n\n###\n\n", "completion": " 在5-5-2章的06:25時候 END"}
{"prompt": "在哪裡有提到- 當棋盤滿了，回傳 NO_FREE_SPACE。\n- 玩家1先下子，休息1秒後，玩家2再下子。\n- 玩家1和玩家2不斷互換下子，直到有人贏或平手。\n- randomMove方法回傳-1代表棋盤已滿。\n- 迴圈永遠等於true，直到有人贏或平手才跳離。 \n\n###\n\n", "completion": " 在5-5-2章的07:29時候 END"}
{"prompt": "在哪裡有提到- 當 loc 等於 NO_FREE_SPACE 時，代表已經沒有空的位置。\n- -1 就代表說已經沒有空的位置。\n- 如果 loc 等於 NO_FREE_SPACE，就印出一個平手，然後跳離這一個迴圈。\n- 如果沒有跳離迴圈的話，就會讓 p 把它的值放到 loc 這個位置，同時回傳 moveResult。\n- 再把棋盤做一個刷新，讓它 show 出來。\n- 如果 moveResult 等於 win 的話，就代表剛剛這個移動造成了 p 贏得了這一個遊戲，這時候就印出 p 贏得了這個遊戲，再跳離這個迴圈。\n- 如果說它沒有平手，也沒有贏得這一個遊戲，就代表繼續玩了。\n- 如果 p 等於 p1 的話，就代表剛剛都是 p1 再玩。 \n\n###\n\n", "completion": " 在5-5-2章的08:29時候 END"}
{"prompt": "在哪裡有提到- 程式中有一個迴圈不斷執行。\n- 在迴圈中，先讓 p 等於 p2，再讓 p2 等於 p。\n- 為了讓程式有間隔效果，使用 sleep 2 秒。\n- 完成井字遊戲的程式設計。\n- 延伸練習：改成人機互玩的游戲，讓電腦有智慧，保持不敗。 \n\n###\n\n", "completion": " 在5-5-2章的09:33時候 END"}
{"prompt": "在哪裡有提到- pytube 是一個可以幫助下載 YouTube 影片的工具\n- 可以利用下載的影片做離線閱讀或進一步分析\n- pytube 的語法很簡單，只需要 import YouTube 就可以使用 \n\n###\n\n", "completion": " 在5-6-1章的00:13時候 END"}
{"prompt": "在哪裡有提到- import 就是\n- 從這個套件裡面找到這個類別把它匯入進來\n- 這樣的話我們就可以產生一個 YouTube 的物件\n- 後面是帶我有興趣的那個影片\n- 這也是一個 python 課程的影片 \n\n###\n\n", "completion": " 在5-6-1章的00:39時候 END"}
{"prompt": "在哪裡有提到- 可以透過給網址開始下載影片\n- 要透過 streams.first() 來執行下載動作\n- 下載完成時會顯示 '影片下載完成' \n\n###\n\n", "completion": " 在5-6-1章的01:15時候 END"}
{"prompt": "在哪裡有提到- 執行程式後出現錯誤訊息\n- 錯誤訊息為 ModuleNotFoundError\n- 程式找不到 pyTube 模組\n- 需要匯入 pyTube 模組 \n\n###\n\n", "completion": " 在5-6-1章的01:37時候 END"}
{"prompt": "在哪裡有提到- 可以透過實驗來學習程式相關重點\n- 需要使用 `import pytube` 套件\n- 在該影片中無法看到該套件\n- 在 Anaconda 的 Environment 中搜尋 pytube 無法找到\n- 可能是因為該套件不在 Anaconda 的預設值中。 \n\n###\n\n", "completion": " 在5-6-1章的01:56時候 END"}
{"prompt": "在哪裡有提到- 沒有這個套件，需要安裝\n- 安裝方法是透過 pip 指令\n- pip 是 python 的功能之一\n- pip 在安裝 python 時就已經存在 \n\n###\n\n", "completion": " 在5-6-1章的02:19時候 END"}
{"prompt": "在哪裡有提到- 要使用 pip 安裝 pytube 套件\n- 安裝指令為 \"pip install pytube\"\n- pytube 是套件的名稱\n- 安裝成功會顯示 \"successful\" \n\n###\n\n", "completion": " 在5-6-1章的02:38時候 END"}
{"prompt": "在哪裡有提到- 執行完後要檢查是否運作正常。\n- 需要執行 Python。\n- 要 import pytube。\n- 沒有出現錯誤代表安裝成功。\n- 回到剛剛的環境。\n- 再次執行以確認是否正常運作。 \n\n###\n\n", "completion": " 在5-6-1章的03:00時候 END"}
{"prompt": "在哪裡有提到- 程式執行完可以下載影片\n- 影片下載完成後會顯示訊息\n- 跳到 File explorer 確認檔案是否存在 \n\n###\n\n", "completion": " 在5-6-1章的03:26時候 END"}
{"prompt": "在哪裡有提到- 下載的檔案是 Hello Python 的 mp4 影片\n- 使用 pip 安裝 pytube 應用\n- pytube 可以用來下載 YouTube 影片 \n\n###\n\n", "completion": " 在5-6-1章的03:49時候 END"}
{"prompt": "在哪裡有提到- 介紹 twstock 套件\n- 可以用 twstock 套件取得台灣股價\n- 可以透過 twstock 套件取得股票資訊 \n\n###\n\n", "completion": " 在5-6-2章的00:14時候 END"}
{"prompt": "在哪裡有提到- 可以從字幕中獲取程式相關重點。\n- 字幕中提到了價格或成交量方面的資訊，對金融分析很實用。\n- 需要使用一個套件，先要 import 它。\n- Anaconda 預設沒有這個套件，需要用 pip 安裝。 \n\n###\n\n", "completion": " 在5-6-2章的00:28時候 END"}
{"prompt": "在哪裡有提到- 安裝套件後，有一個名為 stock 的物件。\n- 只要給一支股票的代號，就能從 stock 物件中取得該股票的資訊。\n- 該股票的資訊會以物件形式回傳。 \n\n###\n\n", "completion": " 在5-6-2章的00:51時候 END"}
{"prompt": "在哪裡有提到- 從字幕中獲取程式相關重點\n- 物件的 price 屬性可以回傳最近 31 天的收盤價\n- 可以執行程式來檢查結果\n- 花仙子的最近 31 天收盤價在特定位置\n- 可以將多個股票建成 list 進行應用 \n\n###\n\n", "completion": " 在5-6-2章的01:09時候 END"}
{"prompt": "在哪裡有提到- 模型善於從字幕中獲取程式相關重點。\n- 使用 dictionary 儲存資料。\n- 使用迴圈秀出所有股票的收盤價。\n- 可以選擇秀出較近期的收盤價。 \n\n###\n\n", "completion": " 在5-6-2章的01:36時候 END"}
{"prompt": "在哪裡有提到- 在某個地方加上一個 -3\n- list 這個地方已經講過\n- -3 表示倒數的三筆資料\n- 把它呈現出來\n- 秀出最近三天的股票\n- 除了這個功能以外，還有其他功能。 \n\n###\n\n", "completion": " 在5-6-2章的01:54時候 END"}
{"prompt": "在哪裡有提到- 即時股價\n- 使用 real time 物件\n- get 股票代碼\n- 回傳一個 dictionary 物件\n- 可以從 dictionary 中取得 success 的 key 值 \n\n###\n\n", "completion": " 在5-6-2章的02:11時候 END"}
{"prompt": "在哪裡有提到- 如果回傳是 true，代表資料取得正確。\n- 如果資料正確，印出及時股票資料。\n- 印出股票資訊。 \n\n###\n\n", "completion": " 在5-6-2章的02:33時候 END"}
{"prompt": "在哪裡有提到- 印出錯誤訊息\n- 股價可以從realtime中的latest_trade_price獲取\n- 呈現即時價格\n- 查看realtime的架構 \n\n###\n\n", "completion": " 在5-6-2章的02:49時候 END"}
{"prompt": "在哪裡有提到- 字幕中提到了一個 dictionary，並且由很多的 key value 所構成。\n- 字幕中提到了網路有更多的應用，但沒有具體說明。\n- 字幕中提到了可以到 github.com 網址裡面找到更多的應用功能。 \n\n###\n\n", "completion": " 在5-6-2章的03:15時候 END"}
{"prompt": "在哪裡有提到- 寫一個理財機器人，用 line 傳送即時的股價。\n- 用 Python 抓取台灣的股價。\n- 監控股價的高低，並即時傳送訊息給自己的 line 帳號。\n- 透過 IFTTT 服務呼叫 line 的 API，而不是直接用程式呼叫。\n- 示範設定花仙子股價在 50，如果股價高於 50，就用 line 通知自己。 \n\n###\n\n", "completion": " 在5-6-3章的00:13時候 END"}
{"prompt": "在哪裡有提到- 程式執行完會出現訊息\n- 程式為小小的理財機器人\n- 花仙子的股價為 68.8\n- IFTTT 是一個服務，可以幫助呼叫 line 的 api 傳送訊息\n- IFTTT 就像代理人或代書，可以幫忙處理事情 \n\n###\n\n", "completion": " 在5-6-3章的01:16時候 END"}
{"prompt": "在哪裡有提到- IFTTT 是一個可以幫助使用者自動化處理瑣事的服務\n- IFTTT 的全名是 IF This Then That\n- IFTTT 可以整合多種帳號，例如 Google、Facebook 等\n- IFTTT 的小應用程式稱為 Applets\n- Applets 可以透過設定來完成自動化處理 \n\n###\n\n", "completion": " 在5-6-3章的02:21時候 END"}
{"prompt": "在哪裡有提到- IFTTT 是一個可以幫助使用者自動化工作流程的服務\n- IFTTT 會用到兩個服務，左上角是條件，右下角是結果\n- This 跟 That 都是一些服務所構成的\n- IFTTT 可以用來自動發送 Email、簡訊、通知等等\n- 使用者可以自己設定條件，例如時間、天氣等等 \n\n###\n\n", "completion": " 在5-6-3章的03:18時候 END"}
{"prompt": "在哪裡有提到- Service 包含 Email、IFTTT、Line、Notification、Space 和天氣相關的\n- Webhooks 可以想像成一個網頁的微接口\n- 在 IF This 的 This 設定一個事件，程式呼叫事件後 This 滿足並做 That 的部分\n- 建立一個 applet，透過 webhook 來幫忙做事情 \n\n###\n\n", "completion": " 在5-6-3章的04:25時候 END"}
{"prompt": "在哪裡有提到- 建立一個名為 stockLine 的程式\n- 建立一個觸發器，設定 This 部分\n- 設定觸發器的 That 部分，傳送 line 訊息\n- 設定 line 的 notify，相當於一個機器人，可以發送訊息\n- 可以邀請 notify 到其它群組中。 \n\n###\n\n", "completion": " 在5-6-3章的05:33時候 END"}
{"prompt": "在哪裡有提到- 傳送 line 的訊息時可以帶參數，例如股價。\n- [[ ]] 中的 value1 會存儲股價。\n- 可以在提示字前加上股價為：。\n- 完成後點擊 finish。\n- 建立完程式後需要進行綁定。 \n\n###\n\n", "completion": " 在5-6-3章的06:36時候 END"}
{"prompt": "在哪裡有提到- 這個範例中會用到兩個服務：webhook 和 line。\n- 在 service 中點選 line 進行綁定，也可以在 setting 中解除綁定。\n- 在 webhook 中設定後會得到一個 id，程式碼中會用到。\n- 接下來會開始介紹程式碼。 \n\n###\n\n", "completion": " 在5-6-3章的07:42時候 END"}
{"prompt": "在哪裡有提到- 需要 import 台灣股票和 request\n- 建構 webhook 的網址，格式為 https://maker.ifttt.com/trigger/{event_name}/with/key/{webhook_id}\n- webhook_id 是在 IFTTT 上建立 webhook 時所產生的\n- 可以在 IFTTT 的 webhook service 中找到 documentation，複製 webhook 網址 \n\n###\n\n", "completion": " 在5-6-3章的08:41時候 END"}
{"prompt": "在哪裡有提到- 設定 IFTTT 的 Webhook 服務，以便程式可以透過它傳送訊息。\n- 在程式中設定 Webhook 的 URL，並將股票價格等資訊帶入 URL 中。\n- 使用 request.get 函式發送 URL，以觸發 IFTTT 的 Webhook 服務。\n- 透過 IFTTT 的 Line 服務，即時收到股票價格的資訊。 \n\n###\n\n", "completion": " 在5-6-3章的09:54時候 END"}
{"prompt": "在哪裡有提到- 這是一個電影推薦的迷你程式\n- 對初學者來說，這個程式已經算是蠻複雜的\n- 題目是要做一個推薦，給一個人推薦其他的電影\n- 推薦的方法是找出跟這個人最接近的人，然後從那個人看過的電影中推薦\n- 整個的運作流程是透過讀入姓名，呼叫 recommend 函式，代入 rank 資料，最後印出推薦的電影 \n\n###\n\n", "completion": " 在5-7-1章的00:13時候 END"}
{"prompt": "在哪裡有提到- 設計測試案例是解題的第一步\n- 分解問題是解題的第二步\n- 技巧包括印出階段性成果、使用中斷點和觀看變數、函式註解、不害怕錯誤訊息\n- 設計測試案例需要考慮 input 和期望的 output\n- 測試案例的 input 可以有變化，例如有人看過的電影不同\n- 測試案例的變化可以幫助我們找出程式的邊界條件 \n\n###\n\n", "completion": " 在5-7-1章的02:29時候 END"}
{"prompt": "在哪裡有提到- 模型善於從字幕中獲取程式相關重點\n- 字幕中提到了 Cold War 電影的評分\n- 推薦給 Loe 的電影是 Tiger\n- 測試案例不夠，需要定義一些\n- 需要寫一個 recommend function\n- 推薦演算法的第一步是找出喜好最接近 p 的人\n- 找出喜好最接近的人需要用 for 迴圈和距離計算\n- recommend function 不是兩三行就能解決的事情\n- 建議將 recommend function 封裝成一個 function \n\n###\n\n", "completion": " 在5-7-1章的04:34時候 END"}
{"prompt": "在哪裡有提到- 要找最接近的人，使用 nearest function\n- 將資料代入 nearest function，找到最接近的人 q\n- 從 q 的 like_list 中找到他最喜歡的影片列表 like_list\n- 將 like_list 排序，找到 p 還沒評價過的電影\n- 將找到的電影放入 not_watched 變數中，作為推薦給使用者的電影\n- 推薦的過程會分解成 nearest 和 my_favoriate 兩個 function\n- nearest function 的演算法是假設一個最大的值，從迴圈中一個一個比較找到最小距離 \n\n###\n\n", "completion": " 在5-7-1章的06:26時候 END"}
{"prompt": "在哪裡有提到- 程式中的迴圈可以用來找到距離最短的人\n- 距離的計算需要抓取 rank，相減、平方、相加、開根號\n- 程式中的 function 可以封裝功能，讓程式更易讀、易懂\n- 將大問題分解成小問題，各個擊破\n- 在程式開發中，印出階段性的成果可以幫助除錯 \n\n###\n\n", "completion": " 在5-7-1章的08:31時候 END"}
{"prompt": "在哪裡有提到- 印出階段性的成果或變數有助於除錯。\n- 善用中斷點和觀看變數來除錯。\n- 程式碼中 function 必須先定義。\n- MAIN 通常會寫在程式碼最下面。 \n\n###\n\n", "completion": " 在5-7-1章的10:53時候 END"}
{"prompt": "在哪裡有提到- 程式會從字幕中獲取程式相關重點。\n- 程式會呼叫 recommend 這個 function。\n- 推薦給 Jie 和 Jie 喜好接近的人是 John。\n- recommend 這個 function 的程式碼。\n- 在做 nearest 的這個 function 的時候會出現的一些錯誤。\n- 中斷點的使用。\n- Debug 模式的使用。 \n\n###\n\n", "completion": " 在5-7-1章的12:56時候 END"}
{"prompt": "在哪裡有提到- 切換到 Variable explorer 觀察變數狀況。\n- 一步一步跑程式碼，觀察變數的變化。\n- 在需要時使用 stepinto 進入 function 中觀察。\n- 先跳過 function，觀察算出來的值是否正確。\n- 觀察 rank 資料，找出共通的電影。\n- 確認算出來的距離是否正確。 \n\n###\n\n", "completion": " 在5-7-1章的15:06時候 END"}
{"prompt": "在哪裡有提到- min_dis 等於 d\n- d 是 4\n- 4 小於 10 所以進入該區塊\n- nearest_p 設為 people，即 Nick\n- 使用 step into 檢查 dis 函數\n- 使用 step over 跳出迴圈\n- 使用 continue 跳到下一個中斷點\n- people 變成 Jie，p 為 true\n- people 變成 John，距離應為 0 \n\n###\n\n", "completion": " 在5-7-1章的17:00時候 END"}
{"prompt": "在哪裡有提到- 模型善於從字幕中獲取程式相關重點\n- 程式碼架構跟解題的方法需要自己寫\n- 需要把 rank 的資料改成 s2\n- s3 推薦了一個電影\n- s4 推薦了 Cold War，但應該是 Coco\n- 問題在於為什麼跑出 Nick，需要解決 \n\n###\n\n", "completion": " 在5-7-1章的19:04時候 END"}
{"prompt": "在哪裡有提到- 資料處理介紹\n- 四個章節: pandas 簡介、進階資料處理、圖表繪製及應用\n- pandas 是什麼\n- 沒有用過 pandas \n\n###\n\n", "completion": " 在6-0-1章的00:13時候 END"}
{"prompt": "在哪裡有提到- Excel 是一個簡單但功能強大的工具。\n- Excel 的基本結構是將資料一筆一筆儲存下來。\n- 資料之間有共同的欄位，即 column 或 feature。\n- 可以對儲存的資料進行操作。 \n\n###\n\n", "completion": " 在6-0-1章的00:32時候 END"}
{"prompt": "在哪裡有提到- 可以從字幕中獲取程式相關重點。\n- Excel 和 Python 都可以計算加總、平均和標準差。\n- 在 Python 中，可以使用 pandas 套件處理這些問題。\n- pandas 可以處理包含水果名稱和價格的資料。 \n\n###\n\n", "completion": " 在6-0-1章的00:56時候 END"}
{"prompt": "在哪裡有提到- 一筆資料的特性和 feature 是相關的\n- 可以計算出平均值、標準差等結果\n- 可以用 pandas 快速算出這些值\n- 第二個部分是進階 pandas 的資料處理 \n\n###\n\n", "completion": " 在6-0-1章的01:21時候 END"}
{"prompt": "在哪裡有提到- 資料跨表格時，如何進行合併(join)。\n- 如何處理缺失資料(missing data)。\n- 第三部分是關於圖表繪製。 \n\n###\n\n", "completion": " 在6-0-1章的01:45時候 END"}
{"prompt": "在哪裡有提到- 大家都承認字幕非常重要。\n- 設計好的圖表可以解釋很多現象和數據。\n- 本章節介紹各種表格，包括長條圖和圓餅圖等。\n- 學習如何使用 pandas 繪製這些圖表。\n- 第四部分是應用。 \n\n###\n\n", "completion": " 在6-0-1章的02:07時候 END"}
{"prompt": "在哪裡有提到- 介紹三個應用\n- 第一個是新北市的 ubike\n- 已經有用台中市的 ibike 做範例\n- 範例中使用 JSON file\n- 現在直接從 csv 讀取資料\n- csv 是表格式的資料 \n\n###\n\n", "completion": " 在6-0-1章的02:32時候 END"}
{"prompt": "在哪裡有提到- 可以從字幕中獲取程式相關重點。\n- 直接將字幕讀入程式中進行處理。\n- 第二個資料是大專院校校別學生數，對於在校學生非常重要。\n- 可以利用這個數據進行計算。 \n\n###\n\n", "completion": " 在6-0-1章的02:59時候 END"}
{"prompt": "在哪裡有提到- 男女比例最懸殊的幾所學校\n- 可以用程式快速計算\n- 台北市不動產買賣實價登錄\n- 注意一筆資料\n- 透過三個範例的講解，可以提升對Python和Pandas的理解\n- 加強資料處理能力 \n\n###\n\n", "completion": " 在6-0-1章的03:20時候 END"}
{"prompt": "在哪裡有提到- 模型善於從字幕中獲取程式相關重點。\n- 介紹一個 open data 的網站。\n- 三筆資料都是從 open data 中取得。\n- 找到自己有興趣的資料，實際讀取並進行運算和圖形表現。\n- 跨越了資料處理方面的一大步。 \n\n###\n\n", "completion": " 在6-0-1章的03:51時候 END"}
{"prompt": "在哪裡有提到- pandas 是用來做資料分析的工具。\n- 2D 資料表是常被應用的一種資料處理方式。\n- 資料表可以做很多應用，如查詢、彙總資料、對某一筆資料做運算等。\n- 可以用圖表的方式呈現資料，如圓餅圖、長條圖等。 \n\n###\n\n", "completion": " 在6-1-1章的00:13時候 END"}
{"prompt": "在哪裡有提到- 比較水果價格與數量差異\n- 表示價格與產量之間的關係\n- 在 Excel 中可以輕易得到資料\n- 小計等於價格乘以數量\n- 可以用 Python 的 Pandas 達到相同效果\n- 認識 column 或 feature 的概念 \n\n###\n\n", "completion": " 在6-1-1章的01:40時候 END"}
{"prompt": "在哪裡有提到- 可以從字幕中獲取程式相關重點的模型\n- 重點在於從字幕中獲取程式相關重點\n- 字幕中提到了程式相關的重點，如價格、數量、data row、pandas等\n- pandas有相關的api可以查看，網址為pandas.pydata.org\n- pandas可以透過dict建立資料表\n- 建立資料表時，可以設定column和features，以及對應的值 \n\n###\n\n", "completion": " 在6-1-1章的03:02時候 END"}
{"prompt": "在哪裡有提到- pd 是 pandas 的物件\n- pd.dataframe 可以產生一個 dataframe 的物件\n- 可以透過索引值來取得資料\n- 可以自己指定索引值\n- 可以透過指定欄位來當作索引值 \n\n###\n\n", "completion": " 在6-1-1章的04:09時候 END"}
{"prompt": "在哪裡有提到- 透過索引值來印出特定欄位的資料，例如 df.price。\n- 使用 loc 方法來抓取特定索引值的資料，例如 loc['apple']。\n- 索引值可以是任何值，不一定是數字，例如可以是水果名稱。\n- 透過 loc 方法抓取資料時，要在中括號內放入索引值。 \n\n###\n\n", "completion": " 在6-1-1章的05:08時候 END"}
{"prompt": "在哪裡有提到- 可以從字幕中獲取程式相關重點\n- loc 可以抓取指定索引值的資料\n- 如果要抓取多筆資料，可以用 list 或是指定位置\n- loc 代表索引值，iloc 代表位置\n- 在資料處理時，有時需要先處理資料再進行操作 \n\n###\n\n", "completion": " 在6-1-1章的06:02時候 END"}
{"prompt": "在哪裡有提到- 透過 `show` 函數來查看資料內容。\n- 資料量大時，可以使用 `head` 函數來查看前幾筆資料。\n- 使用 `tail` 函數來查看後幾筆資料。\n- 使用 `sample` 函數來隨機查看幾筆資料。\n- 使用 data slicing 技術來選取部分欄位。 \n\n###\n\n", "completion": " 在6-1-1章的07:12時候 END"}
{"prompt": "在哪裡有提到- 操作 DataFrame 的方式可以透過中括號或是 . 符號\n- 可以透過中括號或是 . 符號來選取 DataFrame 中的欄位\n- 如果要選取多個欄位，可以使用 list 的方式將欄位名稱包起來\n- 可以透過條件篩選來選取 DataFrame 中符合條件的資料\n- 條件篩選會回傳一個布林值的 DataFrame\n- 可以使用 df.loc 來選取符合條件的資料 \n\n###\n\n", "completion": " 在6-1-1章的08:17時候 END"}
{"prompt": "在哪裡有提到- 可以透過 df[g] 來篩選資料\n- 可以使用簡約的寫法 df[c1 > 10] 來篩選資料\n- 可以使用 df.sort_values(by='c1') 來排序資料\n- 可以使用 df.mean() 和 df.median() 來計算平均數和中位數 \n\n###\n\n", "completion": " 在6-1-1章的09:35時候 END"}
{"prompt": "在哪裡有提到- 可以使用加總或累加來處理資料\n- 可以使用標準差來描述資料的分佈情況\n- 使用 describe 函數可以對整個資料表進行概括性描述\n- 可以使用 group by 函數對資料進行分組，並對每組進行彙總統計 \n\n###\n\n", "completion": " 在6-1-1章的10:47時候 END"}
{"prompt": "在哪裡有提到- 首先要 import pandas。\n- 宣告一個 dictionary。\n- 透過 dataframe 產生資料表。\n- 取得某個欄位的所有資料。\n- 索引值是從 0 開始遞增的。\n- 使用 loc 取得某一筆資料。\n- 取得某一欄位的第幾筆資料。\n- 取得某一筆資料裡面的某一個欄位。 \n\n###\n\n", "completion": " 在6-1-2章的00:13時候 END"}
{"prompt": "在哪裡有提到- 程式中的結果可以透過字幕獲取相關重點。\n- 在應用中，通常是從資料庫或檔案中讀取資料，而不是使用 dict。\n- 使用 read_csv 函式可以從 csv 檔案中讀取資料。\n- 使用 sample 或 head 函式可以顯示部分資料。\n- 可以使用自訂的 index 來替代系統預設的 index。 \n\n###\n\n", "completion": " 在6-1-2章的01:33時候 END"}
{"prompt": "在哪裡有提到- 可以從字幕中獲取程式相關重點\n- 使用 list 作為索引值\n- 使用欄位當成索引值\n- 使用 index 挑選欄位當成索引值 \n\n###\n\n", "completion": " 在6-1-2章的03:02時候 END"}
{"prompt": "在哪裡有提到- 操作 DataFrame 的 index 可以使用 set_index 方法\n- 可以自訂 index，並使用 list 來宣告\n- 可以使用 reset_data 方法來重設資料\n- 使用 df[欄位名稱] = 新值 來改變 DataFrame 的值 \n\n###\n\n", "completion": " 在6-1-2章的04:10時候 END"}
{"prompt": "在哪裡有提到- 可以用 list 來選取資料表中的欄位\n- 可以用點來選取資料表中的欄位\n- 可以用點來將所有欄位的值設為相同的值\n- 可以使用彙總函數來計算欄位的加總 \n\n###\n\n", "completion": " 在6-1-2章的05:16時候 END"}
{"prompt": "在哪裡有提到- 可以從字幕中獲取程式相關重點。\n- cumsum 函數可以用來做累加。\n- describe 函數可以用來計算數值相關的統計量。\n- 可以透過指定 columns 參數，只抓取需要的欄位。 \n\n###\n\n", "completion": " 在6-1-2章的06:29時候 END"}
{"prompt": "在哪裡有提到- 從字幕中獲取程式相關重點的模型。\n- 抓取 dataframe 中價格和數量欄位。\n- 透過篩選方式只選取價格和數量欄位。\n- 添加一個欄位，使用 pandas 中的 series 物件，series 是一維的，等於是一個 column。 \n\n###\n\n", "completion": " 在6-1-2章的07:39時候 END"}
{"prompt": "在哪裡有提到- 新增欄位的方法是使用 `df['欄位名稱'] = 欄位值` 的方式。\n- 可以從其他欄位計算出新的欄位值，例如 `df['累計'] = df['數量'].cumsum()`。\n- 可以新增多個欄位，例如 `df['品質']` 和 `df['產地']`。\n- 資料表的欄位可以是數值、文字或其他資料型態。 \n\n###\n\n", "completion": " 在6-1-2章的09:02時候 END"}
{"prompt": "在哪裡有提到- 可以透過 df.append 增加一個 dataframe。\n- 可以透過 loc 選擇部分的資料，如果資料本身的索引是很多的話，可以用一個 list 來表示。\n- 可以先選擇欄位，這些欄位可以是多欄位的。 \n\n###\n\n", "completion": " 在6-1-2章的10:17時候 END"}
{"prompt": "在哪裡有提到- 資料篩選可以使用 `loc` 方法\n- 使用 `condition` 來篩選資料\n- 篩選後的資料是一個布林值，需要再次使用 `condition` 將其包裝成資料表\n- 使用 `sort_values` 方法對資料進行排序\n- 可以指定排序的欄位以及排序方式（遞增或遞減） \n\n###\n\n", "completion": " 在6-1-2章的11:36時候 END"}
{"prompt": "在哪裡有提到- 介紹資料處理的方法\n- 偏向前置處理的部分\n- 資料可能不整齊，有 missing data\n- 以水果為例，其中一個水果的價格不明。 \n\n###\n\n", "completion": " 在6-2-1章的00:13時候 END"}
{"prompt": "在哪裡有提到- D 的數量\n- 資料集不完整\n- 處理方式：刪除或用其他資料頂替 \n\n###\n\n", "completion": " 在6-2-1章的00:45時候 END"}
{"prompt": "在哪裡有提到- 這個地方已經定義了一個名為 reset data 的 function。\n- 我們要執行這個 function。\n- 執行完後，我們要印出結果。\n- 在這個地方，我們看到的是 None，代表空值。\n- 在 pandas 中，None 也代表空值。 \n\n###\n\n", "completion": " 在6-2-1章的01:09時候 END"}
{"prompt": "在哪裡有提到- NaN 代表空值的符號。\n- dropna 是一個函數，可以刪除含有空值的資料。\n- C 和 E 的含有空值的資料已被刪除。 \n\n###\n\n", "completion": " 在6-2-1章的01:33時候 END"}
{"prompt": "在哪裡有提到- 刪除具有空值的欄位\n- 可以刪除整個欄位或是指定欄位\n- 軸是1代表column的資料\n- 刪除後印出df觀察 \n\n###\n\n", "completion": " 在6-2-1章的02:08時候 END"}
{"prompt": "在哪裡有提到- 這個模型善於從字幕中獲取程式相關重點。\n- 在02:43-02:46的字幕中，提到已經刪除了兩個欄位。\n- 在02:46-02:49的字幕中，提到印出來的 dataframe 還是完整無缺的。\n- 在02:51-02:54的字幕中，提到這個 function 本身並不會傷害 dataframe。\n- 在02:56-02:58的字幕中，提到 dataframe 這一個資料。\n- 在02:59-03:01的字幕中，提到它會回傳另外一個 dataframe。\n- 在03:02-03:05的字幕中，提到預設值的話這個都是用 0。\n- 在03:05-03:08的字幕中，提到如果不寫的話也是沒關係的。\n- 在03:08-03:12的字幕中，提到如果是這個 default 的 dropna 的話，那它會把兩筆資料把它做一個刪除。 \n\n###\n\n", "completion": " 在6-2-1章的02:43時候 END"}
{"prompt": "在哪裡有提到- 第二種情況是填補 NaN 值。\n- 使用 dict 宣告。\n- 價格為 10，數量為 40。\n- 如果價格為 NaN，則用 10 來頂替。\n- 如果數量為 NaN，則用 40 來頂替。\n- 程式執行後，NaN 值已被頂替。 \n\n###\n\n", "completion": " 在6-2-1章的03:15時候 END"}
{"prompt": "在哪裡有提到- 資料用40來頂替\n- 取一個隨機值來填值\n- 範圍內填一個固定值\n- 往前或往後參考 \n\n###\n\n", "completion": " 在6-2-1章的03:45時候 END"}
{"prompt": "在哪裡有提到- 資料中有一個欄位代表時間，具有連續性。\n- 有些資料可能會缺失，但與前一筆資料相差不大，對整個資料的運算影響不大。\n- 可以將缺失的資料用前一筆資料的值來代替。 \n\n###\n\n", "completion": " 在6-2-1章的04:21時候 END"}
{"prompt": "在哪裡有提到- 資料會 follow 前面的資料或後面的資料\n- 如果是往前參考，則資料會 follow 前面的資料\n- 如果是往後參考，則資料會 follow 後面的資料\n- 如果沒有後面的資料，則保持原來的 NaN 值 \n\n###\n\n", "completion": " 在6-2-1章的04:54時候 END"}
{"prompt": "在哪裡有提到- 介紹資料的整併\n- 資料來源可能有很多，包括不同的表格\n- 需要先把資料做整併才能進行分析\n- 整併有兩種方式：橫向和縱向\n- 以學年度和收入狀況的資料為例，介紹資料結構相同但來源不同的情況 \n\n###\n\n", "completion": " 在6-2-2章的00:12時候 END"}
{"prompt": "在哪裡有提到- 可以從字幕中獲取程式相關重點。\n- 整併資料有縱向和橫向兩種方式。\n- 縱向整併後欄位不變，資料量增加。\n- 橫向整併後欄位名稱會變，欄位數量增加，但資料本體不變。\n- 整併資料的方式是使用 merge。 \n\n###\n\n", "completion": " 在6-2-2章的00:51時候 END"}
{"prompt": "在哪裡有提到這段字幕主要在介紹一個範例，講解如何透過縱向整併和 merge 來整合兩個表格的資料。其中，縱向整併是指將兩個表格的資料沿著垂直方向合併，而 merge 則是指將兩個表格的資料根據某些共同的欄位進行合併。透過這個範例，可以讓觀眾更加了解這兩種整合方式的應用。 \n\n###\n\n", "completion": " 在6-2-2章的01:44時候 END"}
{"prompt": "在哪裡有提到- df1 與上面的表格相同。\n- df3 與上面的表格不同。\n- df3 多了學號、cs、資料結構兩個欄位。\n- 要把 df1、df2、df3 整併成一個新的表格。\n- 新的表格總共有 6 個欄位，包含學號。\n- 新的表格欄位變多了。\n- 觀念：減號條列重點。 \n\n###\n\n", "completion": " 在6-2-2章的02:38時候 END"}
{"prompt": "在哪裡有提到- df1 和 df4 都有一個學號、英文和數學欄位。\n- df4 多出一個 cs 欄位。\n- df4 的資料內容有一些重疊和新增。 \n- df1 和 df4 的交集是 inner 的 merge。 \n\n###\n\n", "completion": " 在6-2-2章的03:22時候 END"}
{"prompt": "在哪裡有提到- 001、008、9 是學生資料的編號。\n- 008、9 是左邊沒有的學生資料。\n- 001 是共同有的學生資料。\n- Merge 這兩筆資料會產生交集。\n- 交集的共同點是 001 的這個學生。\n- 001 的英文、數學、物理和 CS 的成績都會呈現在這個地方。 \n\n###\n\n", "completion": " 在6-2-2章的03:58時候 END"}
{"prompt": "在哪裡有提到- 比較欄位名稱是否一樣，相同的話就合併進來。\n- 如果有交集，就會有所謂的聯集，稱為 outer 的 merge 或 outer 的 join。\n- outer 的 merge 或 outer 的 join 會把兩個表格整併在一起。 \n\n###\n\n", "completion": " 在6-2-2章的04:38時候 END"}
{"prompt": "在哪裡有提到- 使用 outer merge 可以將所有資料呈現出來。\n- 但是有些資料可能會缺少某些值，例如 002 的成績。\n- 因此在整併後，需要注意缺失值的處理。 \n\n###\n\n", "completion": " 在6-2-2章的05:21時候 END"}
{"prompt": "在哪裡有提到- 這個地方它就不曉得要填什麼。\n- 就填上一個 nan，就是空值的意思。\n- 那同理啦，這個 003 跟 004 也都是填上 nan。\n- 對 008 的這筆資料來講，他是有 cs 的這個資料的，沒有的是這個 nan。\n- 所以這個地方就填上這樣的值。\n- 我們採取 outer 這個 merge 的時候，記得資料全部都會呈現。\n- 現在我們再來看另外一種叫做 left 的這個 outer。\n- 我左邊的資料都一定要保有，左邊有 1 到 4 嘛，所以 1 到 4 全部都有。 \n\n###\n\n", "completion": " 在6-2-2章的05:52時候 END"}
{"prompt": "在哪裡有提到- 左邊的資料是主體，右邊的資料是要合併進來的。\n- 左邊的 inner merge 只會呈現兩邊都有的資料。\n- 左邊的 outer merge 會呈現左邊所有的資料，右邊沒有的資料會填上空值。\n- 右邊的 outer merge 會呈現右邊所有的資料，左邊沒有的資料會填上空值。 \n\n###\n\n", "completion": " 在6-2-2章的06:38時候 END"}
{"prompt": "在哪裡有提到- 資料視覺在資料分析中非常重要，好的圖表可以幫助我們理解資料的含意。\n- 在 Python 中，常用的資料視覺化套件是 Matplotlib 中的 pyplot。\n- Matplotlib 可以畫出各種圖表，但使用起來比較瑣碎。\n- Pandas 的 DataFrame 在畫圖時會呼叫 Matplotlib 來幫助畫圖。\n- 常用的圖表包括折線圖、柱狀圖、散佈圖、箱形圖等。 \n\n###\n\n", "completion": " 在6-3-1章的00:13時候 END"}
{"prompt": "在哪裡有提到- 折線圖可以比較資料的大小和呈現趨勢。\n- Bar chart 是一個條狀圖，主要用來比較資料的大小。\n- 圓餅圖可以比較資料所佔比例的多寡。\n- 直方圖用來表示某一個資料或一個區段的資料，密度表示多少個資料的量落在該區間。 \n\n###\n\n", "completion": " 在6-3-1章的01:27時候 END"}
{"prompt": "在哪裡有提到- 大部分的資料都是落在大概 100 左右的。\n- 140 或者是 60 他的資料量就會比較少一點。\n- 我們常看到這個 normal distribution 就是用直方圖了來去做呈現。\n- Scatter plots 這個散佈圖可以用來呈現兩個數值大小之間的關係。\n- Boxplot 又叫做盒鬚圖，他也是用來比較資料的分佈。 \n\n###\n\n", "completion": " 在6-3-1章的02:32時候 END"}
{"prompt": "在哪裡有提到- 每一個資料都有五個比較重要的點，分別是極小值、中位數、q3、極大值。\n- 極小值以下或極大值以上的資料代表著一個離群值。\n- 中位數代表這一筆資料中間大的那一個值，贏過百分之五十的人。\n- q1代表在四分之一的位置，贏過 25% 的人。\n- q3代表在四分之三的位置，贏過 75% 的人。 \n\n###\n\n", "completion": " 在6-3-1章的03:32時候 END"}
{"prompt": "在哪裡有提到- 箱型圖中的箱子佔了50%的資料，中位數越低代表中間的值越偏低，箱型圖越窄代表中間的值越緊密集中在箱子裡面。\n- pandas常用的觀念包括title(圖表名稱)、legend(圖例名稱)、軸名稱。 \n\n###\n\n", "completion": " 在6-3-1章的04:34時候 END"}
{"prompt": "在哪裡有提到- xlabel 跟 ylabel 可以用來表示圖表的標籤。\n- tick 代表刻度。\n- 使用兩個表格來呈現圖表。\n- s 代表一群學生，共有 50 個學生，他們的成績包括英文、數學和物理。\n- sg 代表三個班級 C1、C2、C3，男女生的數量。\n- 使用 plot 指令畫折線圖。\n- s 是一個 dataframe 的物件，使用 .plot 方法畫圖。\n- title 可以用來設定圖表的標題。 \n\n###\n\n", "completion": " 在6-3-1章的05:40時候 END"}
{"prompt": "在哪裡有提到- 字幕中有 title 的設定，可以讓圖表呈現出標題。\n- 使用 matplot 來繪製圖表，需要先 import 相關套件。\n- 設定 x 軸與 y 軸的方法在 matplot 與 dataframe 中不同。\n- 在 dataframe 中沒有直接的物件可以設定 x 軸與 y 軸，需要先進行處理。 \n\n###\n\n", "completion": " 在6-3-1章的06:41時候 END"}
{"prompt": "在哪裡有提到- 可以從字幕中獲取程式相關重點\n- 要繪製 histogram 只需要一個指令 s.hist()\n- 物理科目成績分布不佳，0分到十幾分的數量較多\n- 繪製 Bar chart 只需要一行指令 s.plot.bar\n- 可以指定 Bar chart 的大小 \n\n###\n\n", "completion": " 在6-3-1章的07:42時候 END"}
{"prompt": "在哪裡有提到- figsize 可以設定圖表的大小，10 代表寬度，5 代表高度。\n- 若要製作橫向的 bar chart，可以在 bar 右邊加上一個 h，代表 horizon 水平的意思。\n- Bar chart 可以清楚地呈現資料，例如男女生人數的比較。\n- 如果有多筆資料需要呈現，可以使用 subplots=True 參數，讓圖表自動分開呈現。 \n\n###\n\n", "completion": " 在6-3-1章的08:43時候 END"}
{"prompt": "在哪裡有提到- 要呼叫 plot 再呼叫 pie 來呈現 pie chart。\n- y=boy 代表要分析 y 的資料。\n- autopct pct 是代表 percent 就是百分比的意思，並用百分制的方式呈現。\n- .2f 是代表小數點下兩位。\n- figsize 是圖形的大小。\n- subplots=True 可以呈現多筆資料。 \n\n###\n\n", "completion": " 在6-3-1章的09:44時候 END"}
{"prompt": "在哪裡有提到- 這個章節要講的是新北市youbike相關資訊應用。\n- 資料的結構包含了每一個站點的代碼、名稱、總共有多少個停車格、目前還有多少車子在這個station裡面、所在的區域、坐標等等。\n- 可以使用dataframe的方式來讀進台中市youbike的資訊，效果比使用dictionary更方便。\n- 資料可以從data.gov.tw下載，下載csv的檔案，使用dataframe去讀取。\n- 要使用視覺化的方式來畫圖。 \n\n###\n\n", "completion": " 在6-4-1章的00:00時候 END"}
{"prompt": "在哪裡有提到- 可以從字幕中獲取 youbike 的 station 數量和分佈情況。\n- 可以用圓餅圖和分佈圖呈現 youbike 的分佈情況。\n- 可以畫出借出率，了解每個 station 的受歡迎程度。 \n\n###\n\n", "completion": " 在6-4-1章的01:58時候 END"}
{"prompt": "在哪裡有提到- 透過借出率大小繪製圈圈大小\n- 宣告三個 function，分別是設定字型、處理中文字型、初始化資料\n- 設定資料目錄為 data/youbike，透過 pd.read_csv 讀取資料\n- header=0 表示第一列是欄位名稱 \n\n###\n\n", "completion": " 在6-4-1章的03:35時候 END"}
{"prompt": "在哪裡有提到- 檔案中的表頭是欄位名稱的說明，不是一筆資料。\n- 在讀取資料時，需要將 header 設為零，以避免誤認表頭為資料。\n- 在 dtype 中指定欄位的資料型態，避免誤判資料型態。\n- 設定字型。\n- 讀取資料。 \n\n###\n\n", "completion": " 在6-4-1章的04:58時候 END"}
{"prompt": "在哪裡有提到- 資料已經被讀進來，可以到 Variable explorer 中查看。\n- 在 dataframe 中，每一筆資料包含站亭代碼、站名、總位置數、目前停車數、所在區域等資訊。\n- 可以點擊 sarea 欄位進行排序，觀察各區域的站數分布。\n- 在 total 欄位中，數字會以背景顏色標示，點擊 total 欄位可以進行排序。 \n\n###\n\n", "completion": " 在6-4-1章的06:15時候 END"}
{"prompt": "在哪裡有提到- 這段字幕中提到的模型擅長從字幕中獲取程式相關的重點。\n- 字幕中提到了一個表格，其中使用不同的顏色表示不同的數字大小。\n- 程式中使用了 groupby 函數來將資料分群，並使用長條圖呈現每個區域的數量。 \n\n###\n\n", "completion": " 在6-4-1章的07:26時候 END"}
{"prompt": "在哪裡有提到- 使用 sarea 做分群\n- 要算出分群後的數量，使用 count\n- count 的結果會儲存在所有欄位中\n- 取得 sno 的值即為分群後的數量\n- 使用 plot.bar 畫出長條圖\n- 設定 figsize 參數調整圖片大小 \n\n###\n\n", "completion": " 在6-4-1章的08:38時候 END"}
{"prompt": "在哪裡有提到- 透過 x 軸和 y 軸分別呈現資料的名稱和 count 值\n- 使用 groupby 函數將資料按照 sarea 分群\n- 將分群後的資料進行排序，並使用 rename 函數重新命名資料\n- 將排序後的資料儲存至 station count 變數中 \n\n###\n\n", "completion": " 在6-4-1章的09:46時候 END"}
{"prompt": "在哪裡有提到- 資料中的欄位名稱可能不太好，需要進行 rename。\n- 使用 pandas 的 rename function 進行欄位名稱的修改。\n- rename function 的參數是一個 dictionary，將原本的欄位名稱當作 key，新的欄位名稱當作 value。\n- inplace 參數設為 True，代表在原本的 DataFrame 上進行修改，而不是回傳一個新的 DataFrame。\n- 修改完欄位名稱後，將結果儲存在一個新的變數中。 \n\n###\n\n", "completion": " 在6-4-1章的10:57時候 END"}
{"prompt": "在哪裡有提到- 進行程式碼執行\n- 觀察 station count 欄位名稱修改\n- 進行排序，依照 count 由小到大排序\n- 畫出 bar chart，由小而大的一筆資料 \n\n###\n\n", "completion": " 在6-4-1章的11:56時候 END"}
{"prompt": "在哪裡有提到- 延續之前的 bar chart。\n- 使用 pie chart 呈現資料。\n- 先觀察 station count 資料。\n- station count 是每個區域的 station 數量。\n- 使用一行程式碼即可畫出 pie chart。\n- 直接對 dataframe 使用 plot.pie()。 \n\n###\n\n", "completion": " 在6-4-2章的00:00時候 END"}
{"prompt": "在哪裡有提到- 資料是 count。\n- y 等於 count，autopct 是小數點下一位。\n- 制定 title。\n- 執行程式碼。\n- 資料有排序過。\n- 排序是由小而大的。 \n\n###\n\n", "completion": " 在6-4-2章的00:42時候 END"}
{"prompt": "在哪裡有提到- 資料已經排序過，最小的深坑區佔了百分之十五點三。\n- 接下來要看地理分布，把所有的 station 用地理方式呈現出來。\n- 執行後呈現的結果中，中間空的地方是台北市，x 軸代表經度。 \n\n###\n\n", "completion": " 在6-4-2章的01:18時候 END"}
{"prompt": "在哪裡有提到- 這個地方相對於是我的緯度\n- 所以要畫出這樣子的一筆資料的話\n- 其實我們只需要兩個欄位\n- 一個就是他的經度 一個就是他的緯度\n- 這個在 df 裡面本來就有這兩筆資料了\n- 所以我們就去選擇這兩個欄位\n- lng 跟 lat 把他們放在 df2 裡面\n- 然後你要去畫這一個散佈圖的話就是 scatter\n- x 軸我們去讓他設定是lng  y 軸的話是lat \n\n###\n\n", "completion": " 在6-4-2章的01:53時候 END"}
{"prompt": "在哪裡有提到- 設定大小可以呈現出一個結果\n- 觀察 df2 的這一筆資料\n- 觀察借出率\n- 只算有在營運的\n- act 欄位等於1代表有在營運 \n\n###\n\n", "completion": " 在6-4-2章的02:26時候 END"}
{"prompt": "在哪裡有提到- 最右邊的1代表營運中\n- 借出率 = 站內車輛數 / 總車輛數\n- 目前有在站內的比例 = 1 - 借出率 \n\n###\n\n", "completion": " 在6-4-2章的03:00時候 END"}
{"prompt": "在哪裡有提到- 借出去的物品需要計算百分比。\n- 計算完百分比後，需要求小數點下一位。\n- 使用 round 1 函數來計算小數點下一位。\n- df2 的資料中新增了一個 rate 欄位，用來表示借出去的比例。 \n\n###\n\n", "completion": " 在6-4-2章的03:37時候 END"}
{"prompt": "在哪裡有提到- 資料是一百所以借出率百分之百的 station，資料筆數為577筆。\n- 使用describe函數可以看到這一筆資料相關的統計，包括平均值、標準差、最小值、中位數、最大值等。\n- 如果覺得describe函數不夠視覺化，可以使用boxplot函數呈現資料分布情況。 \n\n###\n\n", "completion": " 在6-4-2章的04:16時候 END"}
{"prompt": "在哪裡有提到- 資料中有50%的數值落在82到50之間。\n- 中位數大約是70。\n- 接下來回到散布圖的分佈。\n- 透過改變顏色和添加一個變數，可以更清楚地看到散布圖的分佈。 \n\n###\n\n", "completion": " 在6-4-2章的04:56時候 END"}
{"prompt": "在哪裡有提到- s 代表 size 的大小，與 rate 相關。\n- 借出率越高，s 值就越大，反之則越小。\n- 圈圈大小代表 s 值的大小。\n- 少數借出率比較低的資料，圈圈大小較小。\n- 視覺化可以幫助我們更好地理解資料。 \n\n###\n\n", "completion": " 在6-4-2章的05:32時候 END"}
{"prompt": "在哪裡有提到- 介紹107學年度大專院校學生的人數資料。\n- 資料可以在data.gov.tw網站找到。\n- 需要先下載資料並放在指定目錄下。\n- 資料包含學校代碼、名稱、日間部或進修部、各年級學生數量等欄位。\n- 包含一年級到五六年級、研究生等等的學生數量。 \n\n###\n\n", "completion": " 在6-4-3章的00:00時候 END"}
{"prompt": "在哪裡有提到- 最後呢 有縣市的名稱還有他的體系別等等...\n- 所以我們就是先寫一個 function 把他這個資料讀進來\n- 然後學校的代碼 因為他都是是一個數字型的\n- 所以我們把他強制的告訴 pandas 說他是一個字串\n- 另外有一個我們要特別注意的，就是他原始的資料裡面 他會把這個數量是零個，他用一個 dash 來做一個表示\n- 這一個 dash 等一下我們在做加總的時候會出現問題\n- 所以這裡我們要先做一個處理，我們就跑一個迴圈，把那些欄位，只要看到 dash 的，我就把他 replace 變成是 0 \n\n###\n\n", "completion": " 在6-4-3章的01:10時候 END"}
{"prompt": "在哪裡有提到- 要找出哪些欄位是數值欄位。\n- 數值欄位的範圍是從第四個 column 開始到最右邊的 -1、-2、-3。\n- 要將資料轉成字串型態，再將 dash（-）替換成 0，最後再轉成整數型態。 \n\n###\n\n", "completion": " 在6-4-3章的02:08時候 END"}
{"prompt": "在哪裡有提到- 主程式\n- 資料表 df107\n- 使用 variable explorer 查看資料\n- 資料包含學校代碼、學校名稱、進修別等等\n- 分析每一間學校的人數\n- 資料包含不同學制、等級\n- 需要將同一間學校的不同資料加總 \n\n###\n\n", "completion": " 在6-4-3章的03:21時候 END"}
{"prompt": "在哪裡有提到- 資料中有不同年級的資料，需要加總\n- 使用 groupby 將學校名稱相同的資料分組\n- 使用 sum 函數將分組後的資料加總\n- 新增一個名為 tot 的欄位，將所有欄位加總 \n\n###\n\n", "completion": " 在6-4-3章的04:25時候 END"}
{"prompt": "在哪裡有提到- sum 預設是縱向加總，要橫向加總需要加上參數 axis=1。\n- 排序可以使用 sort_value，並且可以指定排序的欄位。\n- 排序後的結果可以再次存回原本的 DataFrame。 \n\n###\n\n", "completion": " 在6-4-3章的05:35時候 END"}
{"prompt": "在哪裡有提到- 法鼓文理學院報到人數最少。\n- 台灣戲曲學院報到人數次少。\n- 可以透過 describe 看相關統計數據。\n- 法鼓文理學院報到人數最少，只有 280 人。\n- 台大報到人數最多。\n- 可以透過 head 跟 tail 看前面幾所人數比較少的學校。\n- 台大是國立大學，私立大學的數量需要計算。 \n\n###\n\n", "completion": " 在6-4-3章的06:35時候 END"}
{"prompt": "在哪裡有提到- 透過學校名稱中是否包含「國立」來判斷學校是國立還是私立。\n- 在 groupby 時，將 as_index 設為 False，避免 index 影響搜尋。\n- 以上兩點是在處理一個資料集，目的是進行搜尋。 \n\n###\n\n", "completion": " 在6-4-3章的07:39時候 END"}
{"prompt": "在哪裡有提到- 可以從字幕中獲取程式相關重點。\n- df 的 index 會自動排列，從 0 到最後一筆。\n- 學校的名稱會保持在 df 中，方便進行搜尋。\n- df_n 中的 n 代表國立。\n- df 後面的條件句是判斷學校名稱是否包含國立這個字，並產生出 boolean 值。\n- 將 boolean 值丟到 df 中，就可以列出所有國立大學。\n- 在條件句前面加上波浪號，就可以列出所有私立大學。 \n\n###\n\n", "completion": " 在6-4-3章的08:31時候 END"}
{"prompt": "在哪裡有提到- 波浪代表 not 的意思，這樣子出來的會是沒有包含國立的就是私立的學校。\n- 如果對長的敘述有點困惑，可以先把條件複製到前面，執行一遍。\n- 緊接著條件句是 True 跟 False，代到 df 裡面就會把相對應的資料印出來。\n- 透過 len 可以知道國立大學跟私立大學的資料表的長度。\n- 國立大學的數量為 47 所，私立大學的數量為 106 所，總共為 153 所。 \n\n###\n\n", "completion": " 在6-4-3章的09:31時候 END"}
{"prompt": "在哪裡有提到- 資料中有男女比例的資訊，但是分散在不同欄位中。\n- 需要寫一個 function 來處理男女比例的資訊。\n- 使用 `df.copy` 複製一個表格，以便進行後續的操作。 \n\n###\n\n", "completion": " 在6-4-4章的00:00時候 END"}
{"prompt": "在哪裡有提到- 使用複製副本的方式避免原始資料被破壞。\n- 使用技巧將男生和女生的資料進行加總。\n- 將欄位名稱轉換為字串，並使用 .split() 方法將其切割成 list。\n- 新增一個 male 欄位，並將初始值設為 0。 \n\n###\n\n", "completion": " 在6-4-4章的00:56時候 END"}
{"prompt": "在哪裡有提到- 主程式中有一個函式可以計算男女生的人數\n- 該函式會從一個包含學生資料的 DataFrame 中篩選出男女生的資料\n- 該函式會使用迴圈來計算男女生的人數\n- 該函式會將計算結果存入一個新的 DataFrame 中\n- 該函式會返回新的 DataFrame \n\n###\n\n", "completion": " 在6-4-4章的01:46時候 END"}
{"prompt": "在哪裡有提到- 算出男女生的人數以後就可以去算一下這個比例\n- 比例的話就等於男生去除於女生\n- 然後是到小數點下兩位 那我們執行一下\n- 得到這個表以後呢 我們首先來看一下就是男女生比例\n- 還蠻均勻的這個學校\n- 那我們就把他定義成說這個比例是在於 0.9 到 1.1 之間的\n- 他的值是 between 0.9 到 1.1 之間的\n- 那我就是先產生這個條件\n- 再把這個條件放到我們這一個 dataframe 裡面做過濾 \n\n###\n\n", "completion": " 在6-4-4章的02:43時候 END"}
{"prompt": "在哪裡有提到- balance\n- 滿足條件的學校\n- 排序\n- 印出前幾個學校\n- 遞減排序\n- 男生人數較多的學校 \n\n###\n\n", "completion": " 在6-4-4章的03:27時候 END"}
{"prompt": "在哪裡有提到- tail 是指比較尾端的幾個學校，包含的像是護專，女生比較多。\n- 可以透過 describe 去看一下這一個狀況。\n- 平均大概是 1.1，balance 的地方大概是在 0.9。\n- df_gender 是一張大表，增加了三個欄位。\n- 可以透過 df_gender 只取這三個欄位，產生一個新的表 df_rate。\n- df_rate 比較簡潔，可以畫出 boxplot。 \n\n###\n\n", "completion": " 在6-4-4章的04:22時候 END"}
{"prompt": "在哪裡有提到- df_rate 只有三個欄位，比較簡潔。\n- 分析每個縣市有多少大學。\n- 資料除了學校名稱外，還有縣市資訊。\n- 如果只用縣市名稱做 groupby，學校名稱就不見了。\n- 如果用學校名稱做 groupby，縣市名稱就不見了。\n- 有一個小技巧可以解決縣市名稱不見的問題。 \n\n###\n\n", "completion": " 在6-4-4章的05:23時候 END"}
{"prompt": "在哪裡有提到- 這個模型善於從字幕中獲取程式相關重點。\n- 這段程式碼是在進行 groupby 的操作。\n- 該操作是基於縣市名稱和學校名稱兩個欄位進行的。\n- 該操作的目的是計算每個縣市有多少個學校。\n- 為了達到目的，需要將 as_index 設為 False，以保留兩個欄位。\n- 最終的結果是一個以縣市名稱為索引的 DataFrame，其中包含每個縣市有多少個學校的資訊。 \n\n###\n\n", "completion": " 在6-4-4章的06:21時候 END"}
{"prompt": "在哪裡有提到- 用縣市名稱做 groupby，計算數量\n- 產生新的表，只抓學校名稱\n- 學校名稱對於這個表的意義不同 \n\n###\n\n", "completion": " 在6-4-4章的07:09時候 END"}
{"prompt": "在哪裡有提到- 透過 .colors 等於學校個數\n- 把這個名稱做一次的修訂\n- 看這個 df_city，可以看到這個地方是縣市的名稱，然後接下來是學校的這個個數\n- 可以在這個地方畫出一個 bar chart 把他畫出來\n- 台北市、金門的學校個數比較少一點\n- 留著讓大家自己來練習看看，總共學生人數是多少，然後他們佔全國多少比例 \n\n###\n\n", "completion": " 在6-4-4章的08:57時候 END"}
{"prompt": "在哪裡有提到- 介紹集合物件\n- 分別介紹4個不同的集合物件\n- ibike 的資料應用範例 \n\n###\n\n", "completion": " 在4-0-1章的00:13時候 END"}
{"prompt": "在哪裡有提到- 使用 list 資料結構的必要性。\n- 用 list 儲存多個學生的成績。\n- 用變數儲存學生成績的不足之處。\n- 用 list 做加減乘除的運算。\n- 資料膨脹到50筆時，使用 list 的優勢。 \n\n###\n\n", "completion": " 在4-0-1章的00:28時候 END"}
{"prompt": "在哪裡有提到- 模型善於從字幕中獲取程式相關重點\n- 無法處理一萬個變數，需要引入索引值的概念\n- 變數加上索引值可以豐富變化 \n\n###\n\n", "completion": " 在4-0-1章的00:49時候 END"}
{"prompt": "在哪裡有提到- 方便存取任何想要的資料\n- 其他資料結構如 tuple、set、dictionary 也有類似的架構\n- 但它們可能會有些不同 \n\n###\n\n", "completion": " 在4-0-1章的01:08時候 END"}
{"prompt": "在哪裡有提到- 資料在集合文件中是否可以重複\n- 資料是否有順序性\n- 資料是否可以修改\n- 資料是否可以放不同的資料型態 \n\n###\n\n", "completion": " 在4-0-1章的01:24時候 END"}
{"prompt": "在哪裡有提到這段字幕提到了處理資料時的四種方式，分別是索引值、索引方法、索引器和索引器類型。 \n\n###\n\n", "completion": " 在4-0-1章的01:37時候 END"}
{"prompt": "在哪裡有提到- 新增、刪除、修改和查詢是程式相關的重點。\n- 指令和觀念可能因程式而異。\n- 學習時要特別注意差異。\n- 台中 ibike 開放資料是一個例子。 \n\n###\n\n", "completion": " 在4-0-1章的01:50時候 END"}
{"prompt": "在哪裡有提到- Demo\n- ibike 方便\n- ibike 是台灣之光\n- ibike 的站點資料可以在網路上下載應用\n- 可以做很多有趣的運算 \n\n###\n\n", "completion": " 在4-0-1章的02:07時候 END"}
{"prompt": "在哪裡有提到- 學習如何下載資料並進行處理。\n- 學習處理群體資料的能力。\n- 配合 if else、for 迴圈進行資料處理。\n- 能力會大幅提升。\n- 可以依據不同需求採取不同的資料結構。 \n\n###\n\n", "completion": " 在4-0-1章的02:26時候 END"}
{"prompt": "在哪裡有提到- 字幕中提到了「讓你程式的運算變得更順利」，這暗示了模型能夠從字幕中獲取程式相關的重點。\n- 第三個部分中，模型具備開放資料處理的基本能力。\n- 字幕中提到了網路上有很多開放資料，這可能是模型所處理的資料來源之一。\n- 最後，字幕中提到了大家對於這些能力都很興奮，暗示了這些能力對於使用者來說是非常有價值的。 \n\n###\n\n", "completion": " 在4-0-1章的02:53時候 END"}
{"prompt": "在哪裡有提到- 集合物件是一群物件的集合，並且有一定的管理方法。\n- 管理方法包括新增、修改、刪除、查詢、擷取這群的資料。\n- 在Python中有四個重要的物件型態：List、Tuple、Set、Dictionary。\n- 我們必須要考量幾個因素，例如資料內部是否可以重複、是否有順序、是否可以修改等。 \n\n###\n\n", "completion": " 在4-1-1章的00:12時候 END"}
{"prompt": "在哪裡有提到- 可以從字幕中獲取程式相關重點。\n- 可以從字幕中得知集合物件型態的不同特色。\n- List是最常被使用的集合物件，具有順序性、資料可以重複、可以瀏覽、可以修改，且可以放不同型態的資料。 \n\n###\n\n", "completion": " 在4-1-1章的00:48時候 END"}
{"prompt": "在哪裡有提到- List使用中括號來代表資料型態。\n- List可以放置不同的資料型態，例如字串和整數。\n- List中的元素可以是另一個List。\n- List是一個非常靈活的資料型態。 \n\n###\n\n", "completion": " 在4-1-1章的01:19時候 END"}
{"prompt": "在哪裡有提到- 資料必須有意義\n- 程式設計時需要賦予資料意義\n- 第0筆資料代表學生姓名，第1筆代表學號，接下來是成績資料\n- List的四個功能：新增、刪除、修改、查詢\n- 新增使用append，刪除使用remove \n\n###\n\n", "completion": " 在4-1-1章的01:55時候 END"}
{"prompt": "在哪裡有提到- 可以從字幕中獲取程式相關重點。\n- 修改資料的方式可以直接指定要修改資料的索引值，例如 A[0]=100。\n- 有時候也會用一些函式幫助修改資料，例如排序。\n- 資料在擷取的時候可以直接給一個索引值或用切片的方式。 \n\n###\n\n", "completion": " 在4-1-1章的02:41時候 END"}
{"prompt": "在哪裡有提到- 這個模型善於從字幕中獲取程式相關重點。\n- 字幕中介紹了三個新增資料的函式：append、extend、insert。\n- append只是加上一個元素，extend則是extend一個list。\n- 這個模型也提到了一個範例，說明了append和extend的差異。 \n\n###\n\n", "completion": " 在4-1-1章的03:21時候 END"}
{"prompt": "在哪裡有提到- students裡面有三個學生。\n- 我們額外宣告了一個List，裡面放了兩個學生。\n- append()方法可以在List的最後面加入一個資料。\n- 使用append()方法後，students會多一筆Lisa的資料。\n- extend()方法可以在List的最後面加入一個List。\n- 使用extend()方法後，jason、allen會在這組資料的後面。\n- insert()方法可以在List的指定位置加入一個資料。\n- 使用insert()方法後，可以在0的位置加上maggie。 \n\n###\n\n", "completion": " 在4-1-1章的04:04時候 END"}
{"prompt": "在哪裡有提到- 將元素插入列表中，可以使用insert()方法，並指定要插入的位置。\n- 刪除列表中的元素，可以使用remove()方法或pop()方法，其中remove()方法會直接刪除元素，而pop()方法則會將刪除的元素返回。 \n\n###\n\n", "completion": " 在4-1-1章的04:52時候 END"}
{"prompt": "在哪裡有提到- remove後面帶的元素(e)會移除第一個元素(e)\n- 在這個範例中我們要移除nick\n- pop如果我們沒有給他一個參數的話，他就會把最後一筆資料抓出來\n- 我們可以在pop後面加上一個索引值，意思就是要把那個索引值的元素移除並且回傳\n- 排序是我們經常會使用到的資料修改，他的語法很簡單 \n\n###\n\n", "completion": " 在4-1-1章的05:32時候 END"}
{"prompt": "在哪裡有提到- 可以使用 `data.sort` 將資料由小到大排序。\n- 若要由大到小排序，可以加上 `reverse=True` 參數。\n- 排序後，原本的資料會被修改。\n- `sorted` 函式不會修改原本的資料，而是回傳一個新的排序後的資料。 \n\n###\n\n", "completion": " 在4-1-1章的06:19時候 END"}
{"prompt": "在哪裡有提到- List的擷取相當的直覺\n- 我們可以用[i]來取得位置i的值\n- 當我們宣告一筆這樣的資料的時候，系統就會幫我們建立一個空間來儲存這5筆資料，並且給他們索引值從0一直到4\n- 我們要抓取第0筆資料的時候，就用 grade[0],grade[1] 以此類推\n- 我們也可以用data slicing的方式來擷取一段資料，例如我們要擷取22跟99，他的位置是在1跟2，所以我們就可以用 grade[1:3]，各位要注意第二個參數代表要擷取的終點的下一個，所以要擷取到2的時候參數必須要用3 \n\n###\n\n", "completion": " 在4-1-2章的00:13時候 END"}
{"prompt": "在哪裡有提到- 可以用[start:end]的方式來抓取list中的資料，其中start代表開始的位置，end代表結束的位置。\n- 如果end沒有寫，代表從start開始抓取資料到最後。\n- 如果start沒有寫，代表從最前面開始抓取資料。\n- 可以用負數的方式來代表倒數的觀念，例如[-2:-1]代表抓取倒數第2個到倒數第1個的資料。\n- for list是一個常用的技巧，用來走訪整個資料，因為list的資料型態是屬於可瀏覽的。 \n\n###\n\n", "completion": " 在4-1-2章的01:19時候 END"}
{"prompt": "在哪裡有提到- 進入到迴圈以後\n- 每一次去抓取st\n- 代表的就是這個list中的每個元素\n- 第一次進到這個迴圈st指的是第0個值也就是'nick'\n- 這對於我們再做整體資料的運算十分方便\n- 例如我們現在要加總 grade 這個list\n- 透過sum去做加總\n- 加總完之後再去除以這個資料的個數\n- 前面我們看到len就是要檢查這個List它裡面有多少元素\n- 但有時候我們還是需要這個索引值i\n1- 這時候我們就可以用enumerate這個涵式 \n\n###\n\n", "completion": " 在4-1-2章的02:23時候 END"}
{"prompt": "在哪裡有提到- 可以使用enumerate()函式來取得索引值和元素\n- list內有許多的函式可以幫助查詢，例如count()和index()\n- count()可以計算元素在list中出現的次數\n- index()可以回傳元素在list中第一次出現的索引值 \n\n###\n\n", "completion": " 在4-1-2章的03:29時候 END"}
{"prompt": "在哪裡有提到- 可以使用sorted對list做排序，並可以加上reverse參數\n- sorted跟list.sort不一樣，sorted會回傳排序後的list，不會修改原本的data\n- len可以回傳list的長度，max可以回傳list中最大的元素，sum可以將list中的數值加總\n- 二維的list指的是list中的資料本身也是list，可以用來紀錄一群學生的一群成績。 \n\n###\n\n", "completion": " 在4-1-2章的04:29時候 END"}
{"prompt": "在哪裡有提到- 可以從字幕中獲取程式相關重點\n- 使用二維的list\n- list裡面的元素又是一個list\n- 第零筆資料代表學生0的三個成績\n- 賦予的意義是英文數學自然\n- 第一筆資料代表學生1的這三科成績\n- 獲取學生2的成績可以用 grade[2]\n- 回傳是一個list\n- 獲取學生2的英文成績可以用 grade[2][0]\n- 抓取到77的這個成績 \n\n###\n\n", "completion": " 在4-1-2章的05:49時候 END"}
{"prompt": "在哪裡有提到- grade是一個二維陣列，內部儲存的是位置的參考，指向另外一個list。\n- 用grade[1]可以抓取學生1的成績。\n- 雙重迴圈可以走訪整個二維陣列，第一層迴圈用for row in grade，第二層迴圈用for element in row。\n- 每一個row代表一個學生的所有成績，每一個element代表某一個人某一個科目的成績。 \n\n###\n\n", "completion": " 在4-1-2章的06:56時候 END"}
{"prompt": "在哪裡有提到- 印出換行鍵並進到下一筆資料\n- 第二筆資料的row\n- 代表學生1的這群資料\n- 二維list的運算方法\n- 加總每一個學生的成績並儲存在一維陣列st_sum\n- 用for迴圈走訪每一個學生的成績\n- st代表學生所有科目的list\n- sum可以把所有成績加總起來\n- 把加總後的成績儲存在st_sum\n- index為i，第一次i的值為0 \n\n###\n\n", "completion": " 在4-1-2章的08:05時候 END"}
{"prompt": "在哪裡有提到- 透過一維陣列儲存學生成績\n- 透過索引值存取學生成績\n- 透過for迴圈走訪整個陣列\n- 透過enumerate獲取索引值\n- 透過一維陣列儲存每個科目的總和 \n\n###\n\n", "completion": " 在4-1-2章的09:04時候 END"}
{"prompt": "在哪裡有提到- 每個迴圈會抓取一個數字，並儲存在變數中。\n- 第一個迴圈抓取的數字會儲存在第一個位置，第二個迴圈抓取的數字會儲存在第二個位置，以此類推。\n- 外部的迴圈會抓取一個陣列，並將陣列中的數字與內部迴圈抓取的數字做加總，並儲存在對應的位置。\n- 重複以上步驟，直到所有的陣列都被處理完畢。\n- 最終的陣列中儲存的是所有科目的成績總和。 \n\n###\n\n", "completion": " 在4-1-2章的10:06時候 END"}
{"prompt": "在哪裡有提到- 介紹排序的方法\n- 有兩種排序方式：sort 和 sorted\n- sort 和 sorted 的差別\n- 排序本身有很多種方式，如 bubble sort, selection sort, quick sort 等\n- 本節使用 bubble sort 來解說排序 \n\n###\n\n", "completion": " 在4-1-3章的00:00時候 END"}
{"prompt": "在哪裡有提到- 這段影片是在介紹如何對調list中的兩個元素\n- 直接使用a[0]=a[1]和a[1]=a[0]的方式是錯誤的\n- 因為這樣會導致兩個元素的值都變成一樣的\n- 正確的方式是先用一個變數暫存其中一個元素的值，再進行對調 \n\n###\n\n", "completion": " 在4-1-3章的01:19時候 END"}
{"prompt": "在哪裡有提到- 氣泡排序法會經過一連串資料的比對跟對調\n- 先比較兩筆資料 100跟200\n- 判斷100有沒有大於200，如果沒有保持不動 \n\n###\n\n", "completion": " 在4-1-3章的02:20時候 END"}
{"prompt": "在哪裡有提到- 程式中有度調的動作，但此例子中沒有。\n- 接下來的比較往右移，變成比較200和50。\n- 200比50大，所以做一個對調的動作，變成50 200。\n- 再比較200和300，200不大於300，所以保持不變。\n- 第一個回合結束，最右邊的資料一定是最大的。 \n\n###\n\n", "completion": " 在4-1-3章的03:21時候 END"}
{"prompt": "在哪裡有提到- 第一回合從資料的最後一筆開始，一直往左去做一個比較，最後最右邊的值一定是最大的。\n- 第二回合從資料的第0筆開始，一直往右去做一個比較，如果有比較大的就做一個對調，最後第二大的值就是第二個位置。\n- 第三回合一樣是從最前面的地方開始比較起，比較a[0]跟a[1]的值。 \n\n###\n\n", "completion": " 在4-1-3章的04:23時候 END"}
{"prompt": "在哪裡有提到- 程式中使用的是選擇排序法。\n- 選擇排序法的核心是每次找到最大或最小值，並將其放到正確的位置。\n- 選擇排序法需要跑s-1個回合，其中s為資料筆數。\n- 每個回合需要比對S減掉它的回合數。 \n\n###\n\n", "completion": " 在4-1-3章的05:21時候 END"}
{"prompt": "在哪裡有提到- 比較次數可以透過比較最大值來減少\n- 程式碼中的a是list，s是a的大小，r是回合數\n- 回合數為s-1，i的值從1開始，需要跑r+1個回合\n- range的第二個參數是前一個數，因此要加1 \n\n###\n\n", "completion": " 在4-1-3章的06:29時候 END"}
{"prompt": "在哪裡有提到- 第幾回合的字幕出現在 07:37-07:41。\n- Round 是代表回合的意思，出現在 07:41-07:43。\n- for j in range(0, s-i) 是每一個回合內要做的比較，出現在 07:43-07:53。\n- s-i 是因為 index 是從最前面的資料開始做比較，出現在 07:53-07:59。\n- a[j] 與 a[j+1] 做比較，出現在 08:09-08:14。\n- 如果 a[j] 比 a[j+1] 大，就做對調，出現在 08:21-08:25。 \n\n###\n\n", "completion": " 在4-1-3章的07:37時候 END"}
{"prompt": "在哪裡有提到- 操作的資料是一個由小到大排列的數列\n- 透過排序演算法，可以將數列由小到大或由大到小排列\n- 排序演算法的過程中，會進行多次比較和交換操作\n- 排序演算法的效率會受到資料的亂度和演算法本身的複雜度影響\n- 可以使用隨機產生的方式來測試排序演算法的效果 \n\n###\n\n", "completion": " 在4-1-3章的08:39時候 END"}
{"prompt": "在哪裡有提到- 這段程式碼是在實作 bubble sort 演算法\n- 使用 random 產生亂數\n- 將亂數加入 list 中\n- 印出未排序的 list\n- 進行 bubble sort，將最大值移到最後面\n- 重複進行 bubble sort 直到排序完成\n- 可以調整 range 的大小\n- 最後印出排序後的 list \n\n###\n\n", "completion": " 在4-1-3章的09:42時候 END"}
{"prompt": "在哪裡有提到- 介紹 Set\n- 前面已經介紹了 List 跟 Tuple\n- List 可以放任何型態，資料可以修改且有順序性\n- Tuple 跟 List 類似，但資料不能修改\n- List 跟 Tuple 的元素可以重複\n- Set 的元素不能重複，沒有順序性\n- Set 方便做集合運算，如聯集、交集等\n- 資料的新刪修查在 Set 上也適用 \n\n###\n\n", "completion": " 在4-2-1章的00:00時候 END"}
{"prompt": "在哪裡有提到- Set不能夠做修改，因為沒有順序，也沒有取得索引值，所以也沒有辦法做修改索引值上的資料。\n- 要修改set中的元素，可以先把某個元素刪除，再新增就能達到修改的目的。\n- 宣告一個set可以用大括號{}，然後把元素依序放進去，或者是用set()這個function，裡面放list的元素，就會把list裡面的元素轉換成set的型態做回傳。 \n\n###\n\n", "completion": " 在4-2-1章的00:55時候 END"}
{"prompt": "在哪裡有提到- 求集合的交集和聯集\n- 左邊是打籃球的，右邊是打棒球的\n- 交集的nick就是打棒球也打籃球的人\n- 聯集是五個人全部都包含，但nick不會出現兩次\n- 程式碼中宣告一個空白的集合set\n- 印出basketball的值 \n\n###\n\n", "completion": " 在4-2-1章的01:47時候 END"}
{"prompt": "在哪裡有提到- 第5行的集合裡面放了3個元素\n- 集合是不能有重複的值\n- 執行後再把basketball印出來，會發現一樣是三個元素\n- 'nick'並不會重複出現\n- badminton裡面有3個人 \n\n###\n\n", "completion": " 在4-2-1章的02:39時候 END"}
{"prompt": "在哪裡有提到- 有三個人，其中兩個nick是重複的\n- nick也是只會有一個而已\n- 嘗試要印出badminton裡面的[0]會出現type error的錯誤，因為set並沒有index\n- badminton[0]是個錯誤的語法\n- set的新增元素我們直接做.add\n- add後我們可以再把basketball印出來，會多一個alex \n\n###\n\n", "completion": " 在4-2-1章的03:33時候 END"}
{"prompt": "在哪裡有提到- 可以從字幕中獲取程式相關重點\n- set裡面不能有重複的元素\n- 新增重複元素不會有錯誤訊息\n- 可以使用remove()方法刪除元素\n- 刪除不存在的元素會有KeyError \n\n###\n\n", "completion": " 在4-2-1章的04:28時候 END"}
{"prompt": "在哪裡有提到- 如果找不到nick，就會跑出error\n- 使用discard function可以避免產生錯誤\n- .pop會從set裡面去任意找一個元素做回傳，並且做移除的動作\n- 先把basketball做reset的動作，再做一次的pop\n- p1的值是albert，他是隨意找一個元素回傳回來，並且會從basketball裡面移除\n- basketball變成是{'nick', 'jie'} \n\n###\n\n", "completion": " 在4-2-1章的05:23時候 END"}
{"prompt": "在哪裡有提到- 可以使用 `basketball.clear()` 將整個 set 清除\n- 使用 `len()` 可以回傳 set 中元素的個數\n- 使用 `in` 可以檢查某個元素是否在 set 中 \n\n###\n\n", "completion": " 在4-2-1章的06:18時候 END"}
{"prompt": "在哪裡有提到- 回傳False\n- 使用for in子句逐一印出set裡的元素\n- set的operation包括聯集\n- 可以使用\"|\"符號或union做聯集\n- 聯集後的結果是包含兩個set的所有元素 \n\n###\n\n", "completion": " 在4-2-1章的07:13時候 END"}
{"prompt": "在哪裡有提到- 可以用差集來找出兩個集合之間的不同之處。\n- 差集的符號是「-」。\n- 如果是A集合減掉B集合，得到的結果是A集合中有但B集合中沒有的元素。\n- 如果是B集合減掉A集合，得到的結果是B集合中有但A集合中沒有的元素。 \n\n###\n\n", "completion": " 在4-2-1章的08:04時候 END"}
{"prompt": "在哪裡有提到- Tuple跟List很像，但是Tuple的資料是不能夠修改的。\n- Tuple比起List省空間，速度也比較快，且可以避免程式上的失誤。\n- Tuple可以做Dictionary的key。\n- Tuple的宣告是用小括號()來表示，而List是用中括號[]來表示。 \n\n###\n\n", "completion": " 在4-3-1章的00:13時候 END"}
{"prompt": "在哪裡有提到- Tuple 只能做查取，不能新增、刪除、修改元素。\n- 程式碼中宣告了兩個變數，一個用 List 建立資料，一個用 Tuple 建立資料。\n- Tuple 的建立方式有幾種。 \n\n###\n\n", "completion": " 在4-3-1章的01:00時候 END"}
{"prompt": "在哪裡有提到- 第一個例子使用小括號表示Tuple\n- Tuple 可以允許不同的資料型態，例如字串和整數\n- 第二個例子是一堆整數的Tuple\n- 第三個例子使用逗號分割元素，也是一個Tuple\n- 第四個例子是從一個已知的List建立Tuple \n\n###\n\n", "completion": " 在4-3-1章的01:46時候 END"}
{"prompt": "在哪裡有提到- 模型善於從字幕中獲取程式相關重點\n- 轉型成Tuple的動作\n- tup4的值是(1,2,3,4,5)\n- 寫兩個錯誤的程式碼\n- 改變tup2的位置0的值會產生錯誤訊息\n- Tuple比較省空間\n- 使用sys的getsizeof function獲得Tuple的大小 \n\n###\n\n", "completion": " 在4-3-1章的02:30時候 END"}
{"prompt": "在哪裡有提到- li_grade和tu_grade的size\n- li_grade的size比tu_grade大\n- Tuple的執行速度比List快\n- 引用timeit模組可以重複執行某一個敘述句\n- stmt是要執行的動作，number是要執行的次數 \n\n###\n\n", "completion": " 在4-3-1章的03:25時候 END"}
{"prompt": "在哪裡有提到- 用一個很大的數據來檢驗程式執行需要多少時間\n- 第二個程式跟第一個程式幾乎一模一樣，但是宣告成用Tuple來執行\n- 用Tuple的執行速度比List快很多\n- Tuple的資料存取跟List幾乎是一模一樣的，因為Tuple一樣是有順序的 \n\n###\n\n", "completion": " 在4-3-1章的04:22時候 END"}
{"prompt": "在哪裡有提到- tup1 是一個 tuple\n- tup1 中第一個元素的值是 \"Nick\"\n- 在宣告 tuple 時使用小括號，但在取值時不要使用小括號\n- 正確的用法是使用中括號進行 data selection\n- 可以使用 len() 函數取得 tuple 的大小\n- 可以使用 count() 函數計算 tuple 中某個元素出現的次數 \n\n###\n\n", "completion": " 在4-3-1章的05:15時候 END"}
{"prompt": "在哪裡有提到- count(1)代表出現1次\n- index代表這筆資料是在索引值的第幾個\n- 結果顯示是第0個\n- tuple2的1是在第0個位置\n- 宣告一個List，裡面的元素是一個二維的Tuple\n- 可以對這個List做排序的動作\n- 排序的結果會是依照每一個tuple的大小去做排序\n- 因為這個tuple是二維的陣列，所以會用陣列裡面的第一個元素去比大小\n- 資料中最小的是10，所以結果s2執行以後第一個值就會是(10,40) \n\n###\n\n", "completion": " 在4-3-1章的06:06時候 END"}
{"prompt": "在哪裡有提到- 這段程式碼中有一個tuple，裡面有三個元素：性別、年齡、姓氏。\n- 可以使用tuple的unpacking方式，將tuple中的值分別assign到不同的變數中。\n- 在排序時，如果第一個元素相同，就會比較第二個元素，以此類推。\n- 在這個例子中，(20,30)比(20,60)小，所以會排在前面。 \n\n###\n\n", "completion": " 在4-3-1章的07:09時候 END"}
{"prompt": "在哪裡有提到- 可以用小括號來建立tuple。\n- tuple可以包含不同型別的元素。\n- tuple的元素是不可變的，無法修改。\n- 可以使用索引來訪問tuple中的元素。\n- 可以使用切片來訪問tuple中的子集。\n- 可以使用for迴圈來遍歷tuple中的元素。\n- 可以使用len()函數來獲取tuple中元素的數量。\n- 可以使用+運算符來連接兩個tuple。\n- 可以使用*運算符來重複tuple中的元素。\n- 可以使用=運算符來將tuple中的元素分配給變量。\n1- 可以使用tuple()函數來將其他序列轉換為tuple。\n1- tuple的速度跟空間會比較省一點。\n1- tuple的元素無法修改。 \n\n###\n\n", "completion": " 在4-3-1章的07:54時候 END"}
{"prompt": "在哪裡有提到- Dictionary是一種特殊的集合，由key和value所形成的\n- Dictionary的key必須是唯一的，不可重複\n- Dictionary沒有順序性，但可以透過key來取得value\n- Dictionary可以用不同的型態當作key和value，例如整數、字串、複雜的物件等等 \n\n###\n\n", "completion": " 在4-4-1章的00:08時候 END"}
{"prompt": "在哪裡有提到- Dictionary是在Python裡面非常常用，非常重要的一種資料型態。\n- 我們可以用大括號{}來宣告一個空的Dictionary，或者是用dict() function來宣告。\n- Dictionary的每一筆資料都是由key和value組成，用冒號:來區隔。\n- 可以透過key來取得對應的value。\n- 用逗號,來區隔不同的key-value組合。\n- 可以透過len() function來取得Dictionary的大小。 \n\n###\n\n", "completion": " 在4-4-1章的01:54時候 END"}
{"prompt": "在哪裡有提到- 可以用 function 宣告 dictionary。\n- key 的值可以是 int、string 或 tuple 等不可修改的型態。\n- list 本身是屬於一個 immutable 的 object，不能當成 key 值。\n- 可以宣告一個 list，其中每一個元素都是一個 tuple，並將 tuple 的第一個元素當成 key 值，第二個元素當成 value。 \n\n###\n\n", "completion": " 在4-4-1章的03:32時候 END"}
{"prompt": "在哪裡有提到- 透過dict轉型可以將list轉成dictionary\n- 新增資料的方法是透過指定key和value\n- 刪除資料的方式有兩種，第一種是使用delete，後面加上dictionary的變數名稱，再指定key值\n- 刪除資料的方式有兩種，第二種是使用pop，後面加上dictionary的變數名稱，再指定key值 \n\n###\n\n", "completion": " 在4-4-1章的05:14時候 END"}
{"prompt": "在哪裡有提到- 刪除 dictionary 中的資料可以使用 del 或 pop 方法。\n- 修改或新增 dictionary 中的資料也是使用指定 key 值的方式。\n- 使用 del 刪除資料時，直接指定 key 值即可。\n- 使用 pop 刪除資料時，需要指定 key 值，並且會回傳被刪除的值。\n- 修改或新增資料時，直接指定 key 值，並賦予新的值即可。如果 key 值已經存在，則會覆蓋原本的值。 \n\n###\n\n", "completion": " 在4-4-1章的06:40時候 END"}
{"prompt": "在哪裡有提到- 可以透過 key 的方式去找到 dictionary 中的值。\n- 用中括號裡面放一個 key 的值，就可以獲得它的值。\n- len() 可以查詢 dictionary 中有幾筆資料。\n- in 可以檢查某一個 key 的值是否在 dictionary 中。 \n\n###\n\n", "completion": " 在4-4-1章的08:07時候 END"}
{"prompt": "在哪裡有提到- 可以從字幕中獲取程式相關重點\n- 檢查dictionary的key值而非value的值\n- 取得dictionary的key、value、item的方法\n- keys方法可以取得dictionary所有的key值\n- keys方法回傳的資料型態為dict_key\n- values方法可以取得dictionary所有的value值 \n\n###\n\n", "completion": " 在4-4-1章的09:27時候 END"}
{"prompt": "在哪裡有提到- 印出 dictionary 的 value\n- 檢查 key 是否存在於 dictionary 中\n- dictionary 的 items 是由 key-value 組成的 tuple\n- dictionary comprehension 可以用一行指令創造 dictionary \n\n###\n\n", "completion": " 在4-4-1章的11:10時候 END"}
{"prompt": "在哪裡有提到- 建立一個dictionary，以水果名字當成key，以字串長度當成value\n- 只需要一行程式碼就可以完成\n- fruit_len是一個dictionary\n- f是每個水果的名字\n- for迴圈用來遍歷fruit中的每個水果\n- 印出fruit_len的結果，順序不重要 \n\n###\n\n", "completion": " 在4-4-1章的12:38時候 END"}
{"prompt": "在哪裡有提到- 可以計算每個班級的人數\n- 用dictionary來描述\n- allclass是一個list，包含多個班級\n- class_count是一個dictionary，key是班級名稱，value是班級人數\n- 班級名稱用tuple表示\n- 要將list轉成tuple才能當作key\n- 班級人數是班級list的長度 \n\n###\n\n", "completion": " 在4-4-1章的13:56時候 END"}
{"prompt": "在哪裡有提到- 網路上有很多的開放資料。\n- 透過集合物件做分析。\n- 選用的例子是台中市政府的開放資料。\n- 台中市政府開放資料平臺有1800多個資料集，資料筆數有17萬筆。\n- 有一些有 Open API，由29個組織所提供的，服務則有18種分類。\n- 比較有興趣的是 iBike。\n- 到台中市政府開放資料平臺找資料。\n- 台中市政府開放資料平臺有很多分類，包括交通、休閒、公共、出生、婚姻、老年安養等。\n- iBike 資料集有三個。 \n\n###\n\n", "completion": " 在4-5-1章的00:00時候 END"}
{"prompt": "在哪裡有提到- 可以從字幕中獲取程式相關重點\n- 資料格式包含 JSON、XML、CSV 等\n- JSON 格式和 dictionary 格式相似\n- 資料中有主要欄位說明和 meta data\n- 資料中包含多筆資料，包括逢甲大學、秋紅谷等站點的資料。 \n\n###\n\n", "completion": " 在4-5-1章的01:46時候 END"}
{"prompt": "在哪裡有提到- 可以從字幕中獲取程式相關重點\n- 資料下載、解壓縮、放在程式目錄下的 data 資料夾中\n- 資料格式為 json\n- retCode 等於 1，retValue 等於 3001\n- 資料結構為 dict，value 為 dict\n- 使用線上的 json formatter 可以讓資料格式更好看 \n\n###\n\n", "completion": " 在4-5-1章的03:06時候 END"}
{"prompt": "在哪裡有提到- 可以透過 Ctrl V 貼上資料並按 Process 來處理資料\n- 處理後可以在下方看到結構化的資料呈現\n- 資料中的 3001, 3002 是站別的資料\n- 資料中的 retValue 是一個 key value，其中 value 是站別資訊\n- 資料中的 sno 是站別的代碼\n- 資料中的 sna 是站別的中文名稱\n- 資料中的 tot 是該站別總共的停車格數\n- 資料中的 sbi 是目前還在該站別的車輛數量\n- 資料中的 sarea 是該站別所在的區域\n- 資料中的 mday 是資料更新的日期\n- 資料中的 lat 和 lng 是該站別的緯度和經度 \n\n###\n\n", "completion": " 在4-5-1章的04:25時候 END"}
{"prompt": "在哪裡有提到- 準備讀取 iBike.json 資料\n- 資料放在 data 目錄下\n- 使用 with ... open 讀取資料\n- 使用 file.read 讀取資料\n- 使用 json.loads 將資料轉換成 json 格式\n- 讀取 json 格式的資料 \n\n###\n\n", "completion": " 在4-5-1章的05:48時候 END"}
{"prompt": "在哪裡有提到- 讀進來的資料放到 jdata 物件中\n- 需要 import json\n- 用 pprint 印出來會比較有結構性的呈現\n- 把 key 為 retVal 的所有資料抓出來，放到 d 變數中\n- 題目一：由北到南列出所有的車站，包含位置和緯度\n- 題目二：每個區域的 iBike station 數量\n- 題目三：當時車站被借出率最高的前三個，被借出率是空位數除以總停車格數量 \n\n###\n\n", "completion": " 在4-5-1章的07:15時候 END"}
{"prompt": "在哪裡有提到- 第一個需求是要由北到南印出所的車站，位置和緯度。\n- 我們需要篩選出資料中的站名、位置和緯度。\n- 我們使用一個 list `station` 存放篩選後的資料。\n- 我們使用迴圈把資料一個個叫出來，並把需要的欄位存到 `name`、`addr`、`lat` 中。\n- 我們把 `name`、`addr`、`lat` 組成一個 tuple `item`，再把 `item` 存到 `station` 中。\n- 最後印出 `station` 的內容。 \n\n###\n\n", "completion": " 在4-5-1章的08:56時候 END"}
{"prompt": "在哪裡有提到- 模型善於從字幕中獲取程式相關重點\n- 程式中使用 sort function 進行排序\n- 使用 lambda 函數依據緯度進行排序\n- reverse = True 表示由大到小排序\n- 排序後的結果是由北到南排序\n- 可以將排序結果寫入檔案 \n\n###\n\n", "completion": " 在4-5-1章的10:26時候 END"}
{"prompt": "在哪裡有提到- 倒斜線 n 是做一個換行的動作\n- 實際操作一遍\n- 資料已經寫到檔案裡面\n- iBikeSorted 的資料在台灣大道的一些資料中\n- 計算每一區域 iBike station 的數量\n- 宣告一個 dict 的資料型態，叫做 area\n- 迴圈抓取區域的名稱 sareaen，把它暫存在 ar\n- 檢查 ar 有沒有在 area 的 key 裡面，如果有的話就表示剛剛已經有讀過了，這時候要把它的數量加 1，方法是用 area[ar] 加一；如果沒有滿足的話，表示 ar 是第一次遇到。 \n\n###\n\n", "completion": " 在4-5-1章的11:48時候 END"}
{"prompt": "在哪裡有提到- count 的值設為 1\n- 把數量做一個統計\n- 霧峰區有三個車站\n- 南區沒有車站\n- 依據該區域車站數量的多寡做一排序\n- 西屯區有最多的車站\n- 北屯區有 36 個車站\n- 北區有 29 個車站\n- 南屯區有 24 個車站\n- 解了兩個問題 \n\n###\n\n", "completion": " 在4-5-1章的13:35時候 END"}
