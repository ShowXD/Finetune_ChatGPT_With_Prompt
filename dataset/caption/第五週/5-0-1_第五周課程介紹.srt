1
00:00:13,338 --> 00:00:16,543
大家好 今天要跟大家講解這個章節

2
00:00:16,568 --> 00:00:18,782
是函式 Function

3
00:00:18,807 --> 00:00:21,314
那主要有分為五個單元

4
00:00:21,339 --> 00:00:23,053
第一個是模組化的設計

5
00:00:23,078 --> 00:00:26,251
接下來是參數的傳遞

6
00:00:26,300 --> 00:00:29,704
Lambda function 還有例外的處理

7
00:00:29,729 --> 00:00:32,578
最後呢我們會給兩個應用

8
00:00:32,846 --> 00:00:35,554
那講到模組化設計

9
00:00:35,579 --> 00:00:39,522
當我們程式設計越來越大 越來越複雜的時候

10
00:00:39,568 --> 00:00:43,710
你會發現其實有一些功能 有一些流程

11
00:00:43,735 --> 00:00:46,790
它是重複不斷在執行的

12
00:00:46,823 --> 00:00:50,808
差別只是說資料一開始進去的時候

13
00:00:50,833 --> 00:00:52,592
它的值有一些改變

14
00:00:52,726 --> 00:00:58,029
在這種情況下我就可以把那一段的程式把它抽取出來

15
00:00:58,054 --> 00:01:00,297
獨立形成一個 function

16
00:01:00,303 --> 00:01:02,017
那每一次要執行它的時候

17
00:01:02,065 --> 00:01:06,057
我再去呼叫這一個 function 這個樣子就可以了

18
00:01:06,319 --> 00:01:09,422
可以大大的降低我們程式的複雜性

19
00:01:09,447 --> 00:01:12,009
這是所謂的模組化的設計

20
00:01:13,048 --> 00:01:15,758
那第二個部分參數的傳遞

21
00:01:15,783 --> 00:01:19,001
那也因為我們把一些流程

22
00:01:19,026 --> 00:01:22,156
抽取出來變成是一個函式

23
00:01:22,188 --> 00:01:27,235
所以我要叫這個函式做事情的時候我要傳遞給它一些值

24
00:01:27,266 --> 00:01:30,136
那這個值就是所謂的參數

25
00:01:30,161 --> 00:01:33,635
那這個參數的傳遞也是一門學問

26
00:01:33,660 --> 00:01:36,343
因為有時候呢我們希望

27
00:01:36,375 --> 00:01:38,780
當函式執行完回傳的時候

28
00:01:38,805 --> 00:01:41,986
這個參數的值是被改變的

29
00:01:41,998 --> 00:01:44,328
有時候是不希望被改變的

30
00:01:44,353 --> 00:01:47,645
所以參數的傳遞也是要特別留意

31
00:01:48,924 --> 00:01:51,702
那第三點是所謂的 Lambda function

32
00:01:51,742 --> 00:01:55,708
Lambda function 是一個輕量級的 function

33
00:01:55,977 --> 00:01:59,199
那它本身呢可以沒有名子

34
00:01:59,382 --> 00:02:01,635
然後呢可能只有一兩行而已

35
00:02:01,699 --> 00:02:04,238
而且可能只被呼叫一兩次

36
00:02:04,287 --> 00:02:07,215
但是它的效用是非常的大

37
00:02:08,581 --> 00:02:13,050
那第四步驟要講到所謂的例外 Exception

38
00:02:13,082 --> 00:02:14,962
那我們在寫程式的時候

39
00:02:14,967 --> 00:02:17,947
事實上是常會遇到一些例外的

40
00:02:18,009 --> 00:02:22,469
因為使用者使用的習慣還有它的環境

41
00:02:22,494 --> 00:02:24,850
跟我們這邊可能是不太一樣的

42
00:02:24,892 --> 00:02:29,931
所以一開始我們也沒想到會發生一個這樣的事情

43
00:02:30,366 --> 00:02:31,993
當它做了某一些行為

44
00:02:32,026 --> 00:02:38,557
或者是說檔案放在我們預想之內的一些位置的時候

45
00:02:38,582 --> 00:02:40,923
那系統可能就會拋出例外

46
00:02:40,947 --> 00:02:42,407
例外怎麼去做處理

47
00:02:42,432 --> 00:02:46,271
那就可以用這個方式來做處理

48
00:02:46,835 --> 00:02:51,858
那第五個小節的部份我們就跟大家來介紹兩個應用

49
00:02:51,883 --> 00:02:54,651
第一個是河內塔的範例

50
00:02:54,676 --> 00:02:59,142
小時候大家玩益智遊戲可能都有玩過 Hanoi Tower

51
00:02:59,167 --> 00:03:05,087
就是一直在移動這個圈圈

52
00:03:06,163 --> 00:03:10,587
那通過程式來做的話其實就變得相當簡單

53
00:03:10,612 --> 00:03:13,143
當然這裡面還是要稍微思考一下

54
00:03:13,168 --> 00:03:16,868
那一旦你理解了以後不管是五個十個

55
00:03:16,893 --> 00:03:21,847
你在移動這個 Hanoi Tower 大概就覺得非常簡單

56
00:03:22,147 --> 00:03:27,871
那第二個範例是讓電腦去互玩井字遊戲

57
00:03:27,896 --> 00:03:31,345
我想井字遊戲大家也都有玩過

58
00:03:31,369 --> 00:03:34,107
那裡面我們在執行這個程式的過程中

59
00:03:34,132 --> 00:03:37,126
有一些 function 是不斷被執行的

60
00:03:37,128 --> 00:03:41,317
我們把它抽取出來變成是獨立的 function

61
00:03:42,773 --> 00:03:46,868
那學習這一章其實會了 function 以後

62
00:03:46,893 --> 00:03:50,329
你會更像是一個專業的 programmer

63
00:03:50,354 --> 00:03:55,568
因為第一個你就具備了模組化設計的能力

64
00:03:55,613 --> 00:04:04,170
第二個你就會了解到參數之間是怎麼做傳遞的

65
00:04:04,612 --> 00:04:08,412
第三個就是恭喜各位也具備了

66
00:04:08,437 --> 00:04:11,579
開發比較大型軟體的能力

67
00:04:11,604 --> 00:04:14,967
不是每一次寫出來的程式都是十幾二十行

68
00:04:14,992 --> 00:04:18,238
程式開始會變的越來越大了

69
00:04:18,255 --> 00:04:22,254
大概三百到四百行甚至一千行的程式碼

70
00:04:22,279 --> 00:04:24,312
你都有辦法來去做處理啦

71
00:04:24,337 --> 00:04:25,337
恭喜各位

