1
00:00:13,640 --> 00:00:16,059
大家好，今天我們來設計一個

2
00:00:16,060 --> 00:00:20,020
Tic Tac Toe 的遊戲。在台灣呢就稱為井字遊戲

3
00:00:20,039 --> 00:00:21,600
這個規則很簡單

4
00:00:22,680 --> 00:00:26,160
有兩個玩家，一個是 0，一個是 X

5
00:00:26,160 --> 00:00:29,020
誰能先連接成一條線

6
00:00:29,279 --> 00:00:31,159
誰就能贏得這遊戲

7
00:00:31,360 --> 00:00:34,680
不管這條線是橫的

8
00:00:35,320 --> 00:00:37,160
還是直的

9
00:00:37,840 --> 00:00:39,500
還是斜的

10
00:00:39,559 --> 00:00:41,020
都是可以的

11
00:00:41,379 --> 00:00:43,700
要設計這一款遊戲

12
00:00:43,700 --> 00:00:45,879
有幾點要來做一下思考

13
00:00:46,080 --> 00:00:49,980
第一個就是如何表達井 (棋盤) 的狀態

14
00:00:49,980 --> 00:00:52,779
一開始這個井都是空的

15
00:00:52,859 --> 00:00:56,399
逐漸呢，左上角這邊有一個 0

16
00:00:56,400 --> 00:00:58,120
中間有一個 X

17
00:00:58,120 --> 00:00:59,980
左邊這邊有一個圈

18
00:01:00,160 --> 00:01:01,940
右下角這個地方有一個 X

19
00:01:02,200 --> 00:01:05,179
這一個狀態是一直在做變更的

20
00:01:05,359 --> 00:01:08,319
我們怎麼樣子去表達一個井的狀態

21
00:01:09,459 --> 00:01:12,620
第二個是我們怎麼去檢查贏的狀態

22
00:01:13,179 --> 00:01:15,379
那贏的基本狀態就是

23
00:01:15,380 --> 00:01:17,755
這三個橫的是不是都一樣

24
00:01:17,760 --> 00:01:19,980
直的是不是都一樣

25
00:01:19,980 --> 00:01:21,799
斜的 是不是都一樣

26
00:01:21,799 --> 00:01:24,239
必須要有一個邏輯的判斷

27
00:01:26,019 --> 00:01:29,339
第三點是我怎麼隨機的下子

28
00:01:29,340 --> 00:01:30,900
隨機的下子

29
00:01:30,900 --> 00:01:33,480
假設井給它做一個編號

30
00:01:33,480 --> 00:01:35,499
左上角這個地方是 1

31
00:01:35,559 --> 00:01:37,960
1 2 3 4 5 6 7 8 9

32
00:01:38,499 --> 00:01:42,379
一開始要從這九個數字裡面

33
00:01:42,400 --> 00:01:44,700
挑一個數字來下子

34
00:01:44,700 --> 00:01:46,460
下完子以後

35
00:01:46,740 --> 00:01:49,340
把那個位置去除掉

36
00:01:49,600 --> 00:01:54,140
在從剩下的8個裡面隨機下子

37
00:01:55,139 --> 00:01:57,639
這個隨機的樣本就是

38
00:01:57,639 --> 00:02:00,120
一直在做變化

39
00:02:00,124 --> 00:02:01,715
怎麼把它運算出來

40
00:02:03,139 --> 00:02:06,480
第四點怎樣去交換玩家

41
00:02:06,480 --> 00:02:08,939
一開始可能是玩家一

42
00:02:08,945 --> 00:02:11,654
接著玩家二，又玩家一

43
00:02:11,659 --> 00:02:15,980
一直循環到遊戲結束為止

44
00:02:17,659 --> 00:02:21,200
最後一個是如何表現思考時間

45
00:02:21,200 --> 00:02:22,700
這個遊戲呢

46
00:02:22,700 --> 00:02:26,519
讓電腦去做互玩的動作

47
00:02:26,660 --> 00:02:30,139
電腦很快可能一下子就跑玩了

48
00:02:30,139 --> 00:02:33,619
你希望能夠模擬人類思考的方式

49
00:02:33,619 --> 00:02:36,039
它會有個停頓的時間

50
00:02:36,040 --> 00:02:37,355
所以這個停頓的時間

51
00:02:37,359 --> 00:02:39,459
怎麼樣來去做表達

52
00:02:39,739 --> 00:02:42,540
首先我們先來執行一下這個程式

53
00:02:42,899 --> 00:02:46,200
讓程式有停頓的效果

54
00:02:46,204 --> 00:02:48,385
用 time 這個物件

55
00:02:48,385 --> 00:02:51,234
呼叫這個方法 sleep

56
00:02:51,239 --> 00:02:52,879
達到這樣一個效果

57
00:02:52,880 --> 00:02:56,260
一開始的時候先停頓 1 秒

58
00:02:56,480 --> 00:02:59,700
然後每個玩家玩完後要下一個的時候

59
00:02:59,739 --> 00:03:01,119
我們讓它停頓 2 秒

60
00:03:01,125 --> 00:03:03,935
在這個地方就可以表現出來

61
00:03:03,935 --> 00:03:06,505
我們來執行這個程式

62
00:03:07,260 --> 00:03:09,840
一開始會秀出它的位置

63
00:03:09,839 --> 00:03:12,454
左上角 1 2 3 4 5 6

64
00:03:12,459 --> 00:03:16,619
接下來是每一個玩家玩的情況

65
00:03:18,419 --> 00:03:20,959
所以我們一邊做移動

66
00:03:20,959 --> 00:03:24,219
一邊就把棋盤呈現出來

67
00:03:26,179 --> 00:03:30,760
這一場是一個平手的狀態

68
00:03:31,940 --> 00:03:33,560
先來解決第一個問題

69
00:03:33,579 --> 00:03:36,779
怎麼去儲存棋盤的狀態

70
00:03:37,060 --> 00:03:40,540
用 list 儲存是最好不過的

71
00:03:40,780 --> 00:03:43,160
一開始這個棋盤

72
00:03:43,160 --> 00:03:44,859
應該都是空空如也

73
00:03:44,859 --> 00:03:46,739
上面是沒有東西的

74
00:03:46,739 --> 00:03:49,260
所以就宣告一個 list

75
00:03:49,260 --> 00:03:50,739
裡面都放 space

76
00:03:50,739 --> 00:03:53,540
來代表一開始得狀態是空的

77
00:03:53,679 --> 00:03:56,299
list 這個裡面有一個元素

78
00:03:56,299 --> 00:03:57,760
乘與 10 以後

79
00:03:57,760 --> 00:03:59,239
就會代表它有

80
00:03:59,239 --> 00:04:00,999
它有放 10 個元素

81
00:04:01,000 --> 00:04:03,919
那裡面都是 space 的狀態

82
00:04:04,359 --> 00:04:07,600
過來看第二個問題怎麼檢查

83
00:04:07,600 --> 00:04:10,100
贏的狀態已經滿足了

84
00:04:10,160 --> 00:04:14,380
因為棋盤都有給她一個 list 的位置

85
00:04:14,380 --> 00:04:15,600
所以只要去檢查

86
00:04:15,619 --> 00:04:19,179
1 2 3 這三個值是不是都一樣

87
00:04:19,179 --> 00:04:21,819
或者是4 5 6都一樣

88
00:04:21,899 --> 00:04:23,279
7 8 9都一樣

89
00:04:23,280 --> 00:04:24,360
1 4 7 都一樣

90
00:04:24,359 --> 00:04:25,540
2 5 8 都一樣

91
00:04:25,540 --> 00:04:26,860
3 6 9 都一樣

92
00:04:26,979 --> 00:04:30,139
如果這些條件都滿足的話

93
00:04:30,539 --> 00:04:33,514
就代表贏的狀態已經滿足了

94
00:04:33,514 --> 00:04:35,644
所以我們宣告了一個

95
00:04:35,644 --> 00:04:38,299
布林的 function 叫做 win

96
00:04:38,300 --> 00:04:40,660
win 等於 p 是

97
00:04:40,659 --> 00:04:42,239
代表著玩家

98
00:04:43,599 --> 00:04:47,859
如果玩家這個值放在 1 這個位置

99
00:04:47,899 --> 00:04:49,739
而且 2 的位置

100
00:04:49,740 --> 00:04:51,400
3 的位置也是

101
00:04:51,399 --> 00:04:53,399
這些全都滿足

102
00:04:53,399 --> 00:04:56,159
或者是 4 5 6

103
00:04:56,159 --> 00:04:59,374
位置都是放 p 這一個值

104
00:04:59,380 --> 00:05:05,040
就太表贏得狀態是滿足的

105
00:05:05,099 --> 00:05:06,700
所以這裡用一連串的

106
00:05:06,700 --> 00:05:09,560
用一連串的 or 去做連接

107
00:05:09,560 --> 00:05:11,000
這裡面就很多的 and

108
00:05:11,524 --> 00:05:14,375
大家注意到這個地方

109
00:05:14,380 --> 00:05:15,480
這裡有個倒斜線

110
00:05:15,479 --> 00:05:19,279
這是因為我們這個判斷句比較長

111
00:05:19,760 --> 00:05:22,300
做一個連接的時候

112
00:05:22,300 --> 00:05:24,420
倒斜線去做連接

113
00:05:24,420 --> 00:05:28,515
否則 compiler 會跟你講這裡有錯誤

114
00:05:28,519 --> 00:05:31,079
這個贏的狀態

115
00:05:31,079 --> 00:05:32,620
什麼時候去做檢查呢

116
00:05:32,620 --> 00:05:37,340
當玩家有去做一個下子 move 的動作

117
00:05:37,339 --> 00:05:40,839
move 完以後我們就會去做個判斷

118
00:05:40,839 --> 00:05:42,505
如果有滿足

119
00:05:42,505 --> 00:05:45,195
win 的狀態等等回傳的時候

120
00:05:45,200 --> 00:05:48,880
就會回傳 win 這樣一個字串

121
00:05:48,880 --> 00:05:52,820
接下來看隨機下子這個問題

122
00:05:52,820 --> 00:05:56,060
當一開始棋盤都是空的時候

123
00:05:56,060 --> 00:06:00,019
從 1 到 9 挑一個數字

124
00:06:00,120 --> 00:06:02,440
來做下子

125
00:06:02,740 --> 00:06:06,400
就可以用 random.choice 這個方法

126
00:06:06,399 --> 00:06:09,219
就會從 list 裡面挑一個值

127
00:06:09,219 --> 00:06:11,079
所以一開始要讓

128
00:06:11,099 --> 00:06:14,079
這個 list 裡面放 1 到 9

129
00:06:14,279 --> 00:06:17,139
第二次當它已經移動到4

130
00:06:17,139 --> 00:06:19,315
4 的這一個位置

131
00:06:19,320 --> 00:06:21,459
4 的這個位置就不能再挑出來了

132
00:06:21,579 --> 00:06:25,200
那我們的方法就是在建立一個 list

133
00:06:25,200 --> 00:06:30,639
裡面的元素就是 1 2 3 5 6 7 8 9

134
00:06:30,639 --> 00:06:31,854
把 4 跳過去

135
00:06:31,860 --> 00:06:35,320
7 已經被下了以後

136
00:06:35,320 --> 00:06:37,940
就再見一個新的 list

137
00:06:37,940 --> 00:06:39,615
那這個 list 裡面

138
00:06:39,615 --> 00:06:42,095
就不包含 4 跟 7

139
00:06:42,094 --> 00:06:43,684
這個做法就是這樣子

140
00:06:43,685 --> 00:06:46,339
宣告了一個叫 randomMove

141
00:06:46,339 --> 00:06:47,940
的這個方法

142
00:06:49,860 --> 00:06:51,135
這個 list r

143
00:06:51,139 --> 00:06:52,800
它是一個 空的

144
00:06:52,820 --> 00:06:54,139
就跑一個迴圈

145
00:06:54,139 --> 00:06:56,459
如果我這個棋盤裡面

146
00:06:56,579 --> 00:06:58,859
是空的話就代表說

147
00:06:58,865 --> 00:07:01,845
它就還沒有被占領

148
00:07:01,844 --> 00:07:04,704
就時候就把這一個

149
00:07:04,704 --> 00:07:08,159
位置 append 到我的 r 裡面

150
00:07:08,159 --> 00:07:10,714
所以 r 裡面放的都是

151
00:07:10,714 --> 00:07:13,484
空的可以下的位置

152
00:07:14,245 --> 00:07:17,394
如果迴圈跑完以後這個 r

153
00:07:17,394 --> 00:07:20,214
還是保持空的 list 的話

154
00:07:20,219 --> 00:07:25,639
就代表所有位置都已經被佔領了

155
00:07:29,959 --> 00:07:32,579
到了一個平手的狀態

156
00:07:32,579 --> 00:07:34,719
就 return 一個 NO_FREE_SPACE

157
00:07:34,719 --> 00:07:36,919
這個地方是一個常數

158
00:07:36,920 --> 00:07:38,300
自然就等於 -1

159
00:07:38,300 --> 00:07:40,960
因為位置不可能等於 -1

160
00:07:40,959 --> 00:07:44,380
所以我呼叫 randomMove 這個方法

161
00:07:45,675 --> 00:07:48,065
只要看到回傳是 -1

162
00:07:48,065 --> 00:07:50,945
就知道棋盤已經滿了

163
00:07:50,945 --> 00:07:53,964
最後我們來看怎麼做玩家

164
00:07:53,964 --> 00:07:55,539
互換的動作

165
00:07:56,539 --> 00:07:58,359
看一下主程式

166
00:07:59,440 --> 00:08:01,440
p = p1

167
00:08:01,459 --> 00:08:03,519
也就是 p1 先下子

168
00:08:03,519 --> 00:08:05,560
休息了 1 秒以後

169
00:08:05,560 --> 00:08:07,940
這裡有一個 while的迴圈

170
00:08:07,940 --> 00:08:09,820
它永遠等於 true

171
00:08:09,820 --> 00:08:15,219
因為我們要讓玩家1 跟玩家2 不斷的互換的動作

172
00:08:15,279 --> 00:08:17,579
中間平手

173
00:08:17,579 --> 00:08:20,419
或是贏了才會跳離這個迴圈

174
00:08:20,604 --> 00:08:23,554
一開始我們就先做 randomMove

175
00:08:23,555 --> 00:08:26,475
取得一個位置

176
00:08:26,474 --> 00:08:29,385
我們把這個位置印出來

177
00:08:29,385 --> 00:08:33,680
如果 loc 等於 NO_FREE_SPACE

178
00:08:34,380 --> 00:08:36,920
它就是等於 -1 的意思

179
00:08:36,920 --> 00:08:39,395
-1 就代表說已經沒有空的位置

180
00:08:39,399 --> 00:08:41,639
這時候就印出一個平手

181
00:08:41,719 --> 00:08:44,079
然後跳離這一個迴圈

182
00:08:45,435 --> 00:08:48,244
如果沒有跳離迴圈的話

183
00:08:48,244 --> 00:08:50,499
我們就會讓 p

184
00:08:50,499 --> 00:08:54,519
就會讓把它的值放到 loc 這個位置

185
00:08:54,525 --> 00:08:57,555
同時回傳 moveResult

186
00:08:57,560 --> 00:09:00,739
再把棋盤做一個刷新

187
00:09:00,739 --> 00:09:02,560
再讓它 show 出來

188
00:09:02,640 --> 00:09:05,220
如果 moveResult 等於 win 的話

189
00:09:05,219 --> 00:09:08,440
就代表剛剛這個移動造成了

190
00:09:08,445 --> 00:09:10,905
p 贏得了這一個遊戲

191
00:09:10,905 --> 00:09:14,500
這時候就印出 p 贏得了這個遊戲

192
00:09:14,499 --> 00:09:17,239
再跳離這個迴圈

193
00:09:17,239 --> 00:09:18,999
遊戲就已經結束了

194
00:09:19,339 --> 00:09:21,979
如果說它沒有平手

195
00:09:21,979 --> 00:09:24,354
也沒有贏得這一個遊戲

196
00:09:24,354 --> 00:09:26,854
就代表繼續玩了

197
00:09:26,854 --> 00:09:30,045
如果 p 等於 p1 的話

198
00:09:30,320 --> 00:09:33,760
就代表剛剛都是 p1 再玩

199
00:09:33,759 --> 00:09:35,619
就讓 p 等於 p2

200
00:09:35,619 --> 00:09:36,999
換成 p2 來玩

201
00:09:37,060 --> 00:09:39,655
否則就代表剛剛是

202
00:09:39,660 --> 00:09:40,959
p2 再玩

203
00:09:40,959 --> 00:09:43,139
過來就該讓 p1 來玩

204
00:09:43,140 --> 00:09:47,360
所以這個迴圈就不斷的執行

205
00:09:47,359 --> 00:09:50,999
為了讓它有一個間段的效果

206
00:09:50,999 --> 00:09:52,075
在這個地方

207
00:09:52,075 --> 00:09:53,374
sleep 2 秒

208
00:09:54,160 --> 00:09:57,940
這個就是整個程式的邏輯

209
00:09:57,940 --> 00:10:03,619
我們剛剛已經完成了井字遊戲的程式設計

210
00:10:03,619 --> 00:10:05,779
大家可以練習看看

211
00:10:05,780 --> 00:10:07,700
不要看著程式碼

212
00:10:07,700 --> 00:10:09,660
自己來重新設計一遍

213
00:10:09,879 --> 00:10:12,739
並且完成以下的延伸練習

214
00:10:12,900 --> 00:10:17,100
第一個把它改成人機互玩的游戲

215
00:10:17,099 --> 00:10:18,494
第二個呢

216
00:10:18,499 --> 00:10:20,599
怎麼讓電腦有智慧

217
00:10:20,979 --> 00:10:23,599
如果電腦先玩的情況下

218
00:10:23,619 --> 00:10:24,839
保持不敗

219
00:10:24,839 --> 00:10:26,839
各位練習看看

