1
00:00:13,100 --> 00:00:18,200
在程式的開發、執行過程中，難免會有很多的錯誤

2
00:00:18,200 --> 00:00:25,100
這是一般的軟體工程師，甚至是專業的軟體工程師都會犯的錯誤

3
00:00:26,100 --> 00:00:28,420
那我們把錯誤分為3類

4
00:00:28,420 --> 00:00:30,299
第一個是語法的錯誤(Syntax Error)

5
00:00:31,299 --> 00:00:34,299
第二個是執行的錯誤(Run time Error)

6
00:00:34,299 --> 00:00:38,899
第三個是邏輯的錯誤(Semantics Error)

7
00:00:39,899 --> 00:00:45,399
我們用一個計算面積的小程式來說明這一些錯誤

8
00:00:45,399 --> 00:00:54,420
第一個程式我們訊問它的半徑的值是多少，然後對它做一些運算

9
00:00:54,420 --> 00:00:59,399
半徑的平方乘3.14，把面積算出來

10
00:01:00,399 --> 00:01:02,899
先來執行第一行

11
00:01:02,899 --> 00:01:12,899
執行第一行的時候就會發現產生錯誤，這裡寫"Syntax Error : unexpected EOF while parsing"

12
00:01:12,899 --> 00:01:27,600
這是為什麼呢?這是語法的錯誤，因為我們在這個地方input括號，這裡的左括號和右括號是有對齊的，可是這裡的函數input並沒有找到它的右括號

13
00:01:28,600 --> 00:01:33,680
所以呢python的編譯器認不得這一行的敘述句

14
00:01:34,680 --> 00:01:36,680
所以就給了一個Syntax Error

15
00:01:36,680 --> 00:01:43,599
就像我們講了一句錯的話，那對方一定聽不懂你是在講甚麼東西

16
00:01:43,599 --> 00:01:45,200
這個叫做Syntax Error

17
00:01:46,200 --> 00:01:51,099
第二版的程式我們把右括號加上

18
00:01:51,099 --> 00:01:54,200
那這樣的程式執行就不會有問題啦

19
00:01:55,200 --> 00:02:03,560
我們半徑輸入1，1*1*3.14得出來的面積就是3.14

20
00:02:03,560 --> 00:02:07,860
如果說我們再執行一次

21
00:02:07,860 --> 00:02:15,300
這時候如果我們輸入2，2*2得4，4*3.14等於12.56，所以這個結果也是對的

22
00:02:16,300 --> 00:02:22,800
如果第三次，在執行的時候我們輸入1.1

23
00:02:23,800 --> 00:02:37,320
這時候就發生了錯誤，這是因為我們這個地方我們在型態轉換採用的是int，但我輸入的是一個float (1.1)，所以就產生這樣的錯誤

24
00:02:38,320 --> 00:02:44,779
所以各位可以看到這支程式有時候執行是對的，有時候執行是錯的

25
00:02:44,779 --> 00:02:48,200
取決於當時的輸入或是環境的狀況

26
00:02:49,200 --> 00:02:54,039
它可能會產生一些錯誤，這個稱做 Run time Error

27
00:02:54,039 --> 00:03:00,500
那多半會產生這種錯誤是因為我們程式思考的嚴謹度是不夠的

28
00:03:01,500 --> 00:03:06,399
因為當初你沒有預期到使用者可能會輸入float

29
00:03:07,399 --> 00:03:12,899
如果說我們改成float它能夠涵蓋的層面就比較大

30
00:03:12,899 --> 00:03:16,719
不管使用者輸入整數或是輸入一個有小數的值

31
00:03:16,719 --> 00:03:19,200
這個程式都不會發生錯誤

32
00:03:19,200 --> 00:03:24,000
所以我們在把這個程式修改成第三個版本

33
00:03:24,000 --> 00:03:28,899
這個第三版本我們在轉換的過程改成float

34
00:03:29,899 --> 00:03:31,899
這樣子就不會產生錯誤了

35
00:03:31,899 --> 00:03:36,700
但事實上這個程式還犯了一個很大的錯誤

36
00:03:36,700 --> 00:03:46,500
我們知道圓的面積計算方式是半徑的平方、或者是半徑乘半徑乘3.14

37
00:03:47,500 --> 00:03:52,320
但是這個地方我們卻寫成了半徑的半徑次方乘3.14

38
00:03:53,320 --> 00:04:02,800
那這個在我們測試資料當半徑等於1和半徑等於2的時候恰好答案是對的

39
00:04:02,800 --> 00:04:06,360
所以你可能感覺不出這支程式是有錯誤

40
00:04:06,360 --> 00:04:12,800
這就代表我們測試資料不足，還有邏輯有錯誤

41
00:04:12,800 --> 00:04:22,599
導致雖然語法是對的，執行也不會有例外產生，但結果卻是錯的

42
00:04:23,599 --> 00:04:27,300
你必須多給它一些測試資料才能夠發現這樣的錯誤

43
00:04:29,300 --> 00:04:32,500
那在下一個版本我們把次方做修正

44
00:04:33,500 --> 00:04:38,000
變成是半徑乘半徑乘3.14

45
00:04:38,000 --> 00:04:41,880
那這支程式就沒有太大的錯誤了

46
00:04:41,880 --> 00:04:47,920
但是我們這個地方還是寫上了bad code : not easy to maintain

47
00:04:47,920 --> 00:04:52,800
就是說這支程式寫的並不是那麼的好，不是很容易做維護

48
00:04:52,800 --> 00:05:00,260
因為PI的值我們寫死在程式碼裡面、這一行的敘述裡面變成是3.14

49
00:05:01,260 --> 00:05:10,519
如果下一次我們要求它精準度高一點，變成是3.14159，我們就必須來這個地方做修改

50
00:05:11,519 --> 00:05:18,500
通常我們建議像這樣的常數值可以放在程式運算的最上面

51
00:05:18,500 --> 00:05:24,060
先做一個定義，像這個地方我們定義PI的值是3.14159

52
00:05:24,060 --> 00:05:29,360
那這個運算式子就不會牽涉到常變動的值了

53
00:05:30,360 --> 00:05:33,800
那當然這個程式並不是非常完整

54
00:05:33,800 --> 00:05:40,800
各位可以想想看如果使用者輸入一個a的話其實還是會產生錯誤的

55
00:05:40,800 --> 00:05:46,899
因為a你並沒有辦法轉換成float的型態

56
00:05:46,899 --> 00:05:49,200
各位可以想想看怎麼修正這支程式碼

