1
00:00:00,000 --> 00:00:03,000


2
00:00:14,200 --> 00:00:19,300
在一個運算式中，我們可以看到運算元跟運算子

3
00:00:19,300 --> 00:00:28,300
例如10+20，這個10跟20就是運算元(operand)，那這個加法就是運算子(operator)

4
00:00:28,300 --> 00:00:31,300
不同的型態會有不同的運算子

5
00:00:31,300 --> 00:00:40,060
這個地方我們介紹算術運算子、字串運算子、關係運算子跟邏輯運算子

6
00:00:41,060 --> 00:00:45,300
算術運算子就是我們常見的加、減、乘、除...等等。

7
00:00:45,300 --> 00:00:54,140
那如果說我們要取得它的餘數跟商數，那分別就是用一個 %的符號取得它的餘數

8
00:00:55,140 --> 00:00:58,800
用2個斜線，就可以取得它的商數

9
00:00:58,800 --> 00:01:09,580
次方的話，我們可以用2個星星來代表次方。但是如果是要運算3次方的話，就不可以用3個星星喔

10
00:01:09,580 --> 00:01:16,980
我們必須pow()這個函式來幫我們計算三次方、四次方...等等

11
00:01:16,980 --> 00:01:24,200
字串方面呢，我們常見的運算式是"+"，那這個"+"的含意就是代表把字串做相連

12
00:01:25,200 --> 00:01:34,000
但是呢"-"是沒有意義的喔，並不能夠用"-"來把某一個字串把它刪除掉，這會產生錯誤

13
00:01:34,000 --> 00:01:41,340
對於字串來講，我們常看到的是一些函式，比方說我們前面提到的upper(), lower(), replace()...等等。

14
00:01:43,340 --> 00:01:50,000
關係運算子是用來計算2個值的大於、小於，還有相等

15
00:01:50,000 --> 00:01:53,439
那它的符號和我們一般數學運算式很相似的

16
00:01:54,439 --> 00:01:59,019
要注意的是"不等於"是用!=來代表

17
00:01:59,019 --> 00:02:05,200
那它的結果會是一個布林值，包含True、False兩個值

18
00:02:06,200 --> 00:02:10,799
那這些True、False我們可以進一步的做邏輯運算

19
00:02:10,799 --> 00:02:17,500
這個就叫做邏輯運算子，包含 and、or、not

20
00:02:17,500 --> 00:02:26,100
那and的話，就是要2個條件同時滿足結果才是為true

21
00:02:26,100 --> 00:02:32,700
像這個例子，(11>2)是為True、(1>9)是False，所以為False

22
00:02:33,700 --> 00:02:39,200
那我們在程式的過程中通常這2個operator都是布林的變數

23
00:02:40,200 --> 00:02:49,580
像 isTeacher、 isMale，這2個都同時為True的話，那運算出來的結果就是為True，否則的話，就是為False

24
00:02:51,580 --> 00:02:57,000
那or的話，其中一個是True，結果就是True

25
00:02:57,000 --> 00:03:07,100
not的話，就會把這個的結果做反向。如果是True，結果就會變False；False，結果就會是True

26
00:03:07,100 --> 00:03:12,200
在程式的開發、執行過程中，難免會有很多的錯誤

27
00:03:12,200 --> 00:03:19,100
這是一般的軟體工程師，甚至是專業的軟體工程師都會犯的錯誤

28
00:03:20,100 --> 00:03:22,420
那我們把錯誤分為3類

29
00:03:22,420 --> 00:03:24,299
第一個是語法的錯誤(Syntax Error)

30
00:03:25,299 --> 00:03:28,299
第二個是執行的錯誤(Run time Error)

31
00:03:28,299 --> 00:03:32,899
第三個是邏輯的錯誤(Semantics Error)

32
00:03:33,899 --> 00:03:39,399
我們用一個計算面積的小程式來說明這一些錯誤

33
00:03:39,399 --> 00:03:48,420
第一個程式我們訊問它的半徑的值是多少，然後對它做一些運算

34
00:03:48,420 --> 00:03:53,399
半徑的平方乘3.14，把面積算出來

35
00:03:54,399 --> 00:03:56,899
先來執行第一行

36
00:03:56,899 --> 00:04:06,899
執行第一行的時候就會發現產生錯誤，這裡寫"Syntax Error : unexpected EOF while parsing"

37
00:04:06,899 --> 00:04:21,600
這是為什麼呢?這是語法的錯誤，因為我們在這個地方input括號，這裡的左括號和右括號是有對齊的，可是這裡的函數input並沒有找到它的右括號

38
00:04:22,600 --> 00:04:27,680
所以呢python的編譯器認不得這一行的敘述句

39
00:04:28,680 --> 00:04:30,680
所以就給了一個Syntax Error

40
00:04:30,680 --> 00:04:37,599
就像我們講了一句錯的話，那對方一定聽不懂你是在講甚麼東西

41
00:04:37,599 --> 00:04:39,200
這個叫做Syntax Error

42
00:04:40,200 --> 00:04:45,099
第二版的程式我們把右括號加上

43
00:04:45,099 --> 00:04:48,200
那這樣的程式執行就不會有問題啦

44
00:04:49,200 --> 00:04:57,560
我們半徑輸入1，1*1*3.14得出來的面積就是3.14

45
00:04:57,560 --> 00:05:01,860
如果說我們再執行一次

46
00:05:01,860 --> 00:05:09,300
這時候如果我們輸入2，2*2得4，4*3.14等於12.56，所以這個結果也是對的

47
00:05:10,300 --> 00:05:16,800
如果第三次，在執行的時候我們輸入1.1

48
00:05:17,800 --> 00:05:31,320
這時候就發生了錯誤，這是因為我們這個地方我們在型態轉換採用的是int，但我輸入的是一個float (1.1)，所以就產生這樣的錯誤

49
00:05:32,320 --> 00:05:38,779
所以各位可以看到這支程式有時候執行是對的，有時候執行是錯的

50
00:05:38,779 --> 00:05:42,200
取決於當時的輸入或是環境的狀況

51
00:05:43,200 --> 00:05:48,039
它可能會產生一些錯誤，這個稱做 Run time Error

52
00:05:48,039 --> 00:05:54,500
那多半會產生這種錯誤是因為我們程式思考的嚴謹度是不夠的

53
00:05:55,500 --> 00:06:00,399
因為當初你沒有預期到使用者可能會輸入float

54
00:06:01,399 --> 00:06:06,899
如果說我們改成float它能夠涵蓋的層面就比較大

55
00:06:06,899 --> 00:06:10,719
不管使用者輸入整數或是輸入一個有小數的值

56
00:06:10,719 --> 00:06:13,200
這個程式都不會發生錯誤

57
00:06:13,200 --> 00:06:18,000
所以我們在把這個程式修改成第三個版本

58
00:06:18,000 --> 00:06:22,899
這個第三版本我們在轉換的過程改成float

59
00:06:23,899 --> 00:06:25,899
這樣子就不會產生錯誤了

60
00:06:25,899 --> 00:06:30,700
但事實上這個程式還犯了一個很大的錯誤

61
00:06:30,700 --> 00:06:40,500
我們知道圓的面積計算方式是半徑的平方、或者是半徑乘半徑乘3.14

62
00:06:41,500 --> 00:06:46,320
但是這個地方我們卻寫成了半徑的半徑次方乘3.14

63
00:06:47,320 --> 00:06:56,800
那這個在我們測試資料當半徑等於1和半徑等於2的時候恰好答案是對的

64
00:06:56,800 --> 00:07:00,360
所以你可能感覺不出這支程式是有錯誤

65
00:07:00,360 --> 00:07:06,800
這就代表我們測試資料不足，還有邏輯有錯誤

66
00:07:06,800 --> 00:07:16,599
導致雖然語法是對的，執行也不會有例外產生，但結果卻是錯的

67
00:07:17,599 --> 00:07:21,300
你必須多給它一些測試資料才能夠發現這樣的錯誤

68
00:07:23,300 --> 00:07:26,500
那在下一個版本我們把次方做修正

69
00:07:27,500 --> 00:07:32,000
變成是半徑乘半徑乘3.14

70
00:07:32,000 --> 00:07:35,880
那這支程式就沒有太大的錯誤了

71
00:07:35,880 --> 00:07:41,920
但是我們這個地方還是寫上了bad code : not easy to maintain

72
00:07:41,920 --> 00:07:46,800
就是說這支程式寫的並不是那麼的好，不是很容易做維護

73
00:07:46,800 --> 00:07:54,260
因為PI的值我們寫死在程式碼裡面、這一行的敘述裡面變成是3.14

74
00:07:55,260 --> 00:08:04,519
如果下一次我們要求它精準度高一點，變成是3.14159，我們就必須來這個地方做修改

75
00:08:05,519 --> 00:08:12,500
通常我們建議像這樣的常數值可以放在程式運算的最上面

76
00:08:12,500 --> 00:08:18,060
先做一個定義，像這個地方我們定義PI的值是3.14159

77
00:08:18,060 --> 00:08:23,360
那這個運算式子就不會牽涉到常變動的值了

78
00:08:24,360 --> 00:08:27,800
那當然這個程式並不是非常完整

79
00:08:27,800 --> 00:08:34,800
各位可以想想看如果使用者輸入一個a的話其實還是會產生錯誤的

80
00:08:34,800 --> 00:08:40,899
因為a你並沒有辦法轉換成float的型態

81
00:08:40,899 --> 00:08:43,200
各位可以想想看怎麼修正這支程式碼

