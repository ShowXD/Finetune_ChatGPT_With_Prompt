1
00:00:00,000 --> 00:00:03,500


2
00:00:13,200 --> 00:00:16,240
網路上有很多的開放資料

3
00:00:16,240 --> 00:00:20,560
我們這一小節就到網路去找一些開放資料

4
00:00:20,560 --> 00:00:25,320
透過我們所教的集合物件來做一些分析

5
00:00:26,320 --> 00:00:30,460
我們選用的例子是台中市政府的開放資料

6
00:00:30,460 --> 00:00:32,380
資料開放平臺

7
00:00:32,380 --> 00:00:34,880
各位進來了以後

8
00:00:34,880 --> 00:00:37,700
總共有一千八百多個資料集

9
00:00:37,700 --> 00:00:40,200
然後資料筆數有17萬筆

10
00:00:40,200 --> 00:00:42,660
有一些有 Open API

11
00:00:42,660 --> 00:00:47,540
由 29 個組織所提供的

12
00:00:47,540 --> 00:00:49,900
服務則有18 種分類

13
00:00:50,900 --> 00:00:53,560
我們比較有興趣的是 iBike

14
00:00:53,560 --> 00:00:58,040
我們就直接到網站上來找找看

15
00:00:58,040 --> 00:01:02,920
我們到 .. google, 你就打一下台中

16
00:01:04,920 --> 00:01:08,080
然後開放資料，按下 Enter

17
00:01:09,080 --> 00:01:13,600
就進到台中開放資料的網站，看到很多的資料

18
00:01:13,600 --> 00:01:18,420
我們稍微逛一下，這裡有服務的分類

19
00:01:18,420 --> 00:01:21,220
進來以後，我們可以看到

20
00:01:21,220 --> 00:01:23,480
有交通的，休閒的，公共的

21
00:01:23,480 --> 00:01:25,740
出生的，婚姻的，老年安養的

22
00:01:26,740 --> 00:01:30,299
這個資料真的是非常的多

23
00:01:30,299 --> 00:01:33,299
那我們比較有興趣的是 iBike

24
00:01:40,299 --> 00:01:43,760
就可以看到有三個資料集

25
00:01:43,760 --> 00:01:46,740
找到了以後，你會看到

26
00:01:46,740 --> 00:01:50,340
下面都會有一些的說明，也會解釋

27
00:01:50,340 --> 00:01:52,960
它提供哪一種格式

28
00:01:52,960 --> 00:01:55,140
像這裡有 JSON

29
00:01:55,140 --> 00:01:55,779
XML, CSV 等等

30
00:01:56,779 --> 00:02:04,540
JSON 的格式和我們的 dictionary 的格式是吻合的

31
00:02:04,540 --> 00:02:08,580
所以我們就選用這筆資料來做一些分析

32
00:02:09,580 --> 00:02:13,980
再進來它會有一些更詳細的說明

33
00:02:13,980 --> 00:02:17,420
最重要的就是這個主要欄位說明

34
00:02:17,420 --> 00:02:21,260
因為這裡有解釋每個欄位的意思

35
00:02:21,260 --> 00:02:23,899
例如站點的代號

36
00:02:23,899 --> 00:02:24,720
中文的名稱

37
00:02:25,720 --> 00:02:27,799
總停車格等

38
00:02:28,799 --> 00:02:32,560
這個資料等一下我們來做一下交互的比對

39
00:02:32,560 --> 00:02:35,320
下面還有一些 meta data

40
00:02:35,320 --> 00:02:38,265
我們來點一下這個 json 的檔案

41
00:02:38,265 --> 00:02:40,935
我們可以一鍵下載，不過我們先點進來看一下

42
00:02:41,935 --> 00:02:44,899
進來以後各位可以看到

43
00:02:44,899 --> 00:02:46,820
這是一大筆資料

44
00:02:46,820 --> 00:02:49,060
用一個 { 框起來

45
00:02:49,060 --> 00:02:51,440
就是我們 dict 的結構

46
00:02:51,440 --> 00:02:55,380
這裡有一個 key，然後有一個 value

47
00:02:55,380 --> 00:02:58,080
最主要就是這一個地方

48
00:02:58,080 --> 00:02:59,640
這裡有非常多筆

49
00:02:59,640 --> 00:03:03,420
包含逢甲大學的，秋紅谷的，等等的

50
00:03:03,420 --> 00:03:06,399
我們再回到上一頁

51
00:03:06,399 --> 00:03:08,500
我們一鍵下載

52
00:03:08,500 --> 00:03:10,459
把這個資料下載下來

53
00:03:10,459 --> 00:03:13,160
下載下來解壓縮以後

54
00:03:13,160 --> 00:03:17,140
我們就把它放在我們程式

55
00:03:17,140 --> 00:03:20,000
我們額外建一個目錄叫做 data

56
00:03:20,000 --> 00:03:25,580
data 裡面的 iBike.json 就是我們剛剛下載的

57
00:03:25,580 --> 00:03:26,860
我們做一下點擊

58
00:03:27,860 --> 00:03:30,220
就可以看到這一筆資料

59
00:03:30,220 --> 00:03:34,420
但是他的長相並不像剛剛看到是一個

60
00:03:35,420 --> 00:03:37,399
結構性的呈現

61
00:03:37,399 --> 00:03:38,720
比較沒有那們好看

62
00:03:39,720 --> 00:03:43,640
在這裡我們還是可以看到，這個地方有一個 key- retCode

63
00:03:43,640 --> 00:03:46,780
是等於 1，retValue

64
00:03:46,780 --> 00:03:48,640
是等於 3001

65
00:03:48,640 --> 00:03:51,140
裡面又有這一個

66
00:03:51,140 --> 00:03:54,339
它的結構是一個 dict 裡面

67
00:03:54,339 --> 00:03:56,899
的 value 又是一個 dict

68
00:03:56,899 --> 00:03:59,940
因為這樣還是太難看了

69
00:03:59,940 --> 00:04:03,420
我們把他複製起來，我們到網路找一個

70
00:04:03,420 --> 00:04:08,820
比較方便，看資料的，公用服務

71
00:04:09,820 --> 00:04:13,080
我們可以到 google，打一下

72
00:04:13,080 --> 00:04:16,519
json online formatter，因為我們是一個 json 資料格式

73
00:04:16,519 --> 00:04:20,399
現在網路上有一些線上的

74
00:04:20,399 --> 00:04:22,820
formatter 會把這些格式變得好看一點

75
00:04:23,820 --> 00:04:25,380
那我們點擊進來

76
00:04:25,380 --> 00:04:27,099
點擊進來以後

77
00:04:27,099 --> 00:04:32,560
我們按一下 Ctrl V，就可以把資料貼上來，按一下  Process

78
00:04:34,560 --> 00:04:36,500
處理好後

79
00:04:36,500 --> 00:04:40,599
我們就可以在下方看到比較結構性的資料呈現

80
00:04:40,599 --> 00:04:43,180
我們也可以把資料縮起來

81
00:04:43,180 --> 00:04:45,700
其實這裡的 3001, 3002

82
00:04:45,700 --> 00:04:49,820
就是他一筆一筆站別的資料

83
00:04:49,820 --> 00:04:54,200
這一個其實是 retValue 的 value

84
00:04:54,200 --> 00:04:55,420
這個就是一個 key value

85
00:04:55,420 --> 00:04:58,420
上面還有一個 key value

86
00:04:58,420 --> 00:04:59,779
上面這個地方還有一個 key value

87
00:05:00,779 --> 00:05:02,899
這整個資料有兩個 key

88
00:05:04,899 --> 00:05:07,240
但是第一個 key  是它內部使用的

89
00:05:08,240 --> 00:05:13,159
對我們 user 來說，是沒有什麼特別的作用

90
00:05:13,159 --> 00:05:16,180
這一筆資料我們可以不去看他

91
00:05:16,180 --> 00:05:20,219
我們就直接看 retVal 這一筆資料

92
00:05:21,219 --> 00:05:23,959
在開始之前

93
00:05:23,959 --> 00:05:28,000
我們仔細的看一下這筆資料包含哪些資訊

94
00:05:28,000 --> 00:05:32,000
sno 是站別的代碼

95
00:05:32,000 --> 00:05:35,360
接下來是中文的名稱

96
00:05:35,360 --> 00:05:36,719
總共有多少停車格

97
00:05:37,719 --> 00:05:41,339
目前還在這一站的車輛的數量

98
00:05:41,339 --> 00:05:43,219
它是在哪一區

99
00:05:43,219 --> 00:05:45,899
資料更新的日期是什麼時候

100
00:05:45,899 --> 00:05:48,860
他的緯度和經度

101
00:05:48,860 --> 00:05:51,620
還有它的位置

102
00:05:51,620 --> 00:05:55,399
還有它英文的名字

103
00:05:55,399 --> 00:06:01,240
英文的區域，英文的名字，英文的住址

104
00:06:01,240 --> 00:06:02,880
空位的數量

105
00:06:02,880 --> 00:06:05,200
這個空位的數量加上

106
00:06:05,200 --> 00:06:10,180
目前車輛的數量，就會等於 total 的數量 (100)

107
00:06:10,180 --> 00:06:12,500
目前是否暫停營運

108
00:06:12,500 --> 00:06:15,920
它的值等於 1, 就表示沒有暫停營運

109
00:06:16,920 --> 00:06:18,019
就是現在是有營運的

110
00:06:19,019 --> 00:06:22,420
我們回到程式區

111
00:06:22,420 --> 00:06:25,620
我們現在要做一下準備

112
00:06:25,620 --> 00:06:28,440
我們的資料已經放在 data 目錄

113
00:06:28,440 --> 00:06:31,539
下的 iBike.json

114
00:06:31,539 --> 00:06:36,159
我們要把這資料讀進來

115
00:06:36,159 --> 00:06:41,080
我們透過 with 的語法

116
00:06:42,080 --> 00:06:45,120
透過 with ... open

117
00:06:45,120 --> 00:06:48,399
data/ibike.json

118
00:06:48,399 --> 00:06:50,904
給他一個名稱就做 file

119
00:06:50,904 --> 00:06:53,899
透過 file.read

120
00:06:53,899 --> 00:06:57,420
把資料讀進來，寫到 data 裡面

121
00:06:57,420 --> 00:07:02,700
這時候的 data 只是一般的的文字檔

122
00:07:03,700 --> 00:07:06,920
它並不理解他是 json 的格式

123
00:07:06,920 --> 00:07:09,420
所以我們呼叫 json的物件

124
00:07:10,420 --> 00:07:15,519
透過 loads 這個 function 把資料讀進來

125
00:07:15,519 --> 00:07:21,060
讀進來的資料我們就放到另一個物件 jdata

126
00:07:22,060 --> 00:07:23,880
因為我們要呼叫 json 這個資料

127
00:07:24,880 --> 00:07:27,760
所以我們需要在這個地方 import json

128
00:07:28,760 --> 00:07:34,519
我們也透過 pprint 把這筆資料印出來

129
00:07:34,519 --> 00:07:37,015
為什麼需要 pprint?

130
00:07:37,015 --> 00:07:39,865
第一個 p 是 pretty  的意思

131
00:07:39,865 --> 00:07:42,219
表示印出來的格式會比較漂亮一點

132
00:07:42,219 --> 00:07:46,399
因為它是 json 的結構資料格式

133
00:07:46,399 --> 00:07:52,159
用 pprint 印出來會比較有結構性的呈現

134
00:07:52,159 --> 00:07:54,099
我們執行一下

135
00:07:54,099 --> 00:08:00,000
我們看到這資料，隱約就是我們在網頁上看到的資料與結構

136
00:08:01,000 --> 00:08:08,120
我們剛剛也說明第一個 key 所放的資料是沒有用的

137
00:08:08,120 --> 00:08:11,959
第二個 key 才是我們要的

138
00:08:11,959 --> 00:08:16,899
所以我們把 key 為 retVal 的所有資料抓出來

139
00:08:16,899 --> 00:08:20,380
把他放到 d 這個變數

140
00:08:20,380 --> 00:08:24,959
我們現在資料的準備差不多了

141
00:08:24,959 --> 00:08:28,140
我們來看一下，我們有幾個題目想要來做

142
00:08:28,140 --> 00:08:31,080
我們列出了幾個題目

143
00:08:31,080 --> 00:08:34,959
第一個是，由北到南列出所有的車站

144
00:08:34,959 --> 00:08:37,459
它的位置，還有緯度

145
00:08:37,459 --> 00:08:40,719
每個區域， iBike station 它的數量有多少

146
00:08:41,719 --> 00:08:50,280
當時車站被借出率最高的前三個

147
00:08:50,280 --> 00:08:50,780
所謂的被借出率

148
00:08:51,780 --> 00:08:56,160
是 空位數 除以總停車格數量

149
00:08:56,160 --> 00:08:58,884
有那些車站目前是暫停營業的

150
00:08:58,884 --> 00:09:01,379
或者是無車可借

151
00:09:01,379 --> 00:09:03,420
或是無位可停

152
00:09:03,420 --> 00:09:06,239
等一下我們會講解第一題和第二題

153
00:09:06,239 --> 00:09:09,400
那第三題和第四題就讓大家來練習

154
00:09:10,400 --> 00:09:12,959
我們來看第一個需求

155
00:09:12,959 --> 00:09:17,979
是要由北到南印出所的車站，位置和緯度

156
00:09:17,979 --> 00:09:23,580
剛剛我們已經把必要的資訊存到 d 裡面

157
00:09:23,580 --> 00:09:27,440
但是 d 裡面放的欄位很多

158
00:09:27,440 --> 00:09:31,520
我們現在只需要部分的，這三個資訊

159
00:09:31,520 --> 00:09:35,300
所以我們先來做這樣的篩選

160
00:09:35,300 --> 00:09:38,239
首先我們先宣告一個 station

161
00:09:38,239 --> 00:09:41,339
它是一個 list, 裡面是放空的

162
00:09:41,339 --> 00:09:46,520
跑一個迴圈把 d 裡面的資料一個個叫出來

163
00:09:46,520 --> 00:09:50,660
目前我們只需要抓三個欄位

164
00:09:50,660 --> 00:09:53,640
分別是站名，位置跟緯度

165
00:09:53,640 --> 00:09:59,580
我們就分別把它存在 name, addr, lat 中

166
00:09:59,580 --> 00:10:05,180
再把這三個集合成 tuple，放在 item

167
00:10:05,180 --> 00:10:08,800
最後再用 station 去 append 這筆資料

168
00:10:09,800 --> 00:10:11,700
迴圈跑完了之後

169
00:10:12,700 --> 00:10:18,300
就會把所有的資料的這三個欄位，都放在 station 中

170
00:10:18,300 --> 00:10:21,640
我們實際的執行一下

171
00:10:21,640 --> 00:10:23,320
把它印出來

172
00:10:23,320 --> 00:10:26,040
這是印出來的結果

173
00:10:26,040 --> 00:10:32,379
第一個是站的名稱，接下來是位址，然後是緯度

174
00:10:32,379 --> 00:10:33,739
這樣我們就完成了

175
00:10:34,739 --> 00:10:37,959
接下來的工作是要做排序

176
00:10:37,959 --> 00:10:41,080
排序有一個很好用的 function

177
00:10:41,080 --> 00:10:42,200
sort

178
00:10:42,200 --> 00:10:46,300
我們直接做一個 station.sort

179
00:10:46,300 --> 00:10:49,540
我們是要依照他的緯度做排序

180
00:10:49,540 --> 00:10:51,640
這時候我們就可以用到 lambda

181
00:10:51,640 --> 00:10:56,280
x 代表進來的資料

182
00:10:56,280 --> 00:11:03,200
我們是要依據緯度排序，緯度是在第 3 個屬性

183
00:11:03,200 --> 00:11:06,160
所以這個地方我們帶 x[2] (因為 0 起算)

184
00:11:06,160 --> 00:11:10,739
reverse = True 表示它是由大而小座排序

185
00:11:10,739 --> 00:11:14,420
緯度越高這個值就會越大

186
00:11:14,420 --> 00:11:17,200
所以排序後的結果

187
00:11:17,200 --> 00:11:21,739
就是由北到南的排序

188
00:11:21,739 --> 00:11:23,999
我們執行後

189
00:11:23,999 --> 00:11:27,999
大家可以看到，這裡是立法院的中區辦公室

190
00:11:27,999 --> 00:11:28,920
是最南的

191
00:11:29,920 --> 00:11:32,920
如果這樣不太好看的話

192
00:11:32,920 --> 00:11:34,800
我們可以把它寫到檔案

193
00:11:34,800 --> 00:11:40,239
一樣是透過 open， 記得第二個參數是要帶 w

194
00:11:40,239 --> 00:11:41,759
代表是要寫入資料

195
00:11:42,759 --> 00:11:45,219
跑一個迴圈

196
00:11:45,219 --> 00:11:48,379
把 station 內的資料寫出來

197
00:11:48,379 --> 00:11:51,180
這個倒斜線 n  是做一個換行的動作

198
00:11:52,180 --> 00:11:55,359
我們也實際來做一遍

199
00:11:55,359 --> 00:11:58,759
這時候資料已經寫到檔案裡面

200
00:11:59,759 --> 00:12:02,320
我們可來這個地方看一下

201
00:12:02,320 --> 00:12:05,540
iBikeSorted 的這個資料

202
00:12:05,540 --> 00:12:06,959
就是在這個地方

203
00:12:09,959 --> 00:12:13,580
這個地方是台灣大道的一些資料

204
00:12:13,580 --> 00:12:15,479
逢甲大學等等

205
00:12:15,479 --> 00:12:21,020
越往南的話，最後是立法院中部辦公室

206
00:12:22,020 --> 00:12:24,520
接下來我們來看第二個命題

207
00:12:24,520 --> 00:12:30,280
第二個命題是計算每一區域 iBike station 的數量

208
00:12:30,280 --> 00:12:36,020
這個地方我們可以宣告一個 dict 的資料型態，叫做 area

209
00:12:36,020 --> 00:12:40,680
因為 key 可以是區域的名稱

210
00:12:40,680 --> 00:12:44,619
後面這個 value 就可以放它 (station) 的數量

211
00:12:44,619 --> 00:12:46,820
我們跑一個迴圈

212
00:12:46,820 --> 00:12:56,379
每一次都去抓取區域的名稱 sareaen

213
00:12:56,379 --> 00:12:58,640
我們把它暫存在 ar

214
00:12:58,640 --> 00:13:04,719
接下來我們去檢查這個 ar 有沒有在 area 的 key 裡面

215
00:13:05,719 --> 00:13:11,859
如果有的話就表示剛剛（前面迴圈）已經有讀過了

216
00:13:11,859 --> 00:13:14,540
這時候我要把它的數量加 1

217
00:13:14,540 --> 00:13:17,020
數量加一的方法

218
00:13:17,020 --> 00:13:24,739
就是用 area[ar] 加一

219
00:13:25,739 --> 00:13:29,320
如果沒有滿足的話，

220
00:13:29,320 --> 00:13:32,099
表示 ar 是第一次遇到

221
00:13:35,099 --> 00:13:42,959
我們就其 count 的值設為 1

222
00:13:43,959 --> 00:13:52,859
當迴圈跑完後，就會把數量做一個統計

223
00:13:53,859 --> 00:13:58,520
我們做一個執行，的確是如此

224
00:13:58,520 --> 00:14:01,200
這裡應該是霧峰區

225
00:14:01,200 --> 00:14:04,660
數量比較少一點，是三個

226
00:14:04,660 --> 00:14:08,680
再往上跑的話

227
00:14:08,680 --> 00:14:11,140
這裡應該是南區

228
00:14:11,140 --> 00:14:14,040
這裡沒有做排序，好像不太好看

229
00:14:14,040 --> 00:14:20,820
我們再依據該區域車站數量的多寡做一排序

230
00:14:23,820 --> 00:14:28,739
這個排序的方法，我們就直接呼叫 sorted 這個 function

231
00:14:29,739 --> 00:14:34,239
我要排序的對象是 area.items()

232
00:14:34,239 --> 00:14:43,759
因為 items() 所回傳的，就是 key 與 value 所形成的值（list）

233
00:14:44,759 --> 00:14:50,920
我們排序要用到的 key 是車站數量 (count)

234
00:14:51,920 --> 00:14:55,900
所以 key=lambda d: d[1], d[1]指的就是車位數量

235
00:14:55,900 --> 00:14:59,219
我們把它做一個排序來看一下

236
00:14:59,219 --> 00:15:01,940
因為我們是由小到大做排序

237
00:15:01,940 --> 00:15:03,619
我們可以看一下

238
00:15:03,619 --> 00:15:06,440
最多的果然是西屯區

239
00:15:06,440 --> 00:15:10,180
這一個應該是 ...北屯區

240
00:15:10,180 --> 00:15:12,219
北屯區有 36 個

241
00:15:12,219 --> 00:15:14,540
接下來是北區

242
00:15:14,540 --> 00:15:17,520
然後南屯區有 24 個

243
00:15:17,520 --> 00:15:21,359
這樣子的話我們解了兩個問題

244
00:15:21,359 --> 00:15:25,700
剩下這兩個問題，就讓大家動手練習看看

