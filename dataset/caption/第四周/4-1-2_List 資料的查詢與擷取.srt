1
00:00:13,160 --> 00:00:18,440
在上一節中我們介紹了List的新增刪除修改

2
00:00:18,440 --> 00:00:22,280
這一節我們來介紹他的查詢跟資料擷取

3
00:00:23,280 --> 00:00:26,020
List的擷取相當的直覺

4
00:00:26,020 --> 00:00:30,680
我們可以用[i]來取得位置i的值

5
00:00:30,680 --> 00:00:32,340
例如我們有一筆資料grade

6
00:00:32,340 --> 00:00:33,959
它裡面有5個成績

7
00:00:34,959 --> 00:00:36,939
當我們宣告一筆這樣的資料的時候

8
00:00:37,939 --> 00:00:42,080
系統就會幫我們建立一個空間來儲存這5筆資料

9
00:00:43,080 --> 00:00:47,660
並且給他們索引值從0一直到4

10
00:00:47,660 --> 00:00:50,560
所以我們要抓取第0筆資料的時候

11
00:00:50,560 --> 00:00:53,060
就用 grade[0],grade[1] 以此類推

12
00:00:54,060 --> 00:00:57,060
我們也可以用data slicing的方式

13
00:00:57,060 --> 00:00:59,380
來擷取一段資料

14
00:00:59,380 --> 00:01:02,020
例如我們要擷取22跟99

15
00:01:03,020 --> 00:01:05,095
他的位置是在1跟2

16
00:01:05,095 --> 00:01:08,305
所以我們就可以用 grade[1:3]

17
00:01:08,305 --> 00:01:14,680
各位要注意第二個參數代表要擷取的終點的下一個

18
00:01:14,680 --> 00:01:19,359
所以要擷取到2的時候參數必須要用3

19
00:01:19,359 --> 00:01:26,780
也可以不寫第二個參數代表從這個位置抓到資料最後

20
00:01:26,780 --> 00:01:29,385
如果第一個參數沒有寫

21
00:01:29,385 --> 00:01:32,960
就代表從最前面開始抓取資料

22
00:01:33,960 --> 00:01:37,219
也可以用-的方式來代表倒數的觀念

23
00:01:38,219 --> 00:01:42,480
例如我們用倒數第2個抓到倒數第1個

24
00:01:42,480 --> 00:01:45,014
就可以用[-2:-1]

25
00:01:45,014 --> 00:01:48,045
其中-1就是代表59

26
00:01:48,045 --> 00:01:51,495
這筆倒數最後一個的資料

27
00:01:51,495 --> 00:01:54,764
-2就是這筆35的資料

28
00:01:55,764 --> 00:01:58,815
for list是一個常用的技巧

29
00:01:58,815 --> 00:02:02,025
用來走訪整個資料

30
00:02:02,025 --> 00:02:06,435
這是因為list的資料型態是屬於可瀏覽的

31
00:02:07,435 --> 00:02:09,545
所以我們可以用這樣個子句

32
00:02:09,545 --> 00:02:12,320
for element in list

33
00:02:12,320 --> 00:02:13,139
舉個例子來說

34
00:02:14,139 --> 00:02:17,660
students=['nick','albert','jie']這三個人

35
00:02:17,660 --> 00:02:20,900
我們如果要印出所有學生的名字

36
00:02:20,900 --> 00:02:23,594
我們只要寫for st in student

37
00:02:23,594 --> 00:02:25,920
進入到迴圈以後

38
00:02:25,920 --> 00:02:28,340
每一次去抓取st

39
00:02:28,340 --> 00:02:31,819
代表的就是這個list中的每個元素

40
00:02:31,819 --> 00:02:37,860
第一次進到這個迴圈st指的是第0個值也就是'nick'

41
00:02:37,860 --> 00:02:40,745
第2次再進到迴圈就是'albert'

42
00:02:40,745 --> 00:02:44,640
以此類推第3次就是'jie'

43
00:02:44,640 --> 00:02:48,539
這對於我們再做整體資料的運算十分方便

44
00:02:48,539 --> 00:02:51,860
例如我們現在要加總 grade 這個list

45
00:02:51,860 --> 00:02:55,879
裡面的所有成績平均是多少

46
00:02:55,879 --> 00:02:59,925
我們就可以用for loop來走訪所有的成績

47
00:02:59,925 --> 00:03:02,640
透過sum去做加總

48
00:03:02,640 --> 00:03:07,700
加總完之後再去除以這個資料的個數

49
00:03:07,700 --> 00:03:09,564
就可以得到平均值

50
00:03:09,564 --> 00:03:12,564
前面我們看到len

51
00:03:12,564 --> 00:03:16,039
就是要檢查這個List它裡面有多少元素

52
00:03:17,039 --> 00:03:21,480
各位可以在這個程式中發現他沒有索引值i

53
00:03:21,480 --> 00:03:24,800
但有時候我們還是需要這個索引值i

54
00:03:24,800 --> 00:03:29,480
這時候我們就可以用enumerate這個涵式

55
00:03:29,480 --> 00:03:32,680
我們在list前面加上enumerate

56
00:03:32,680 --> 00:03:35,379
他就會回傳索引值

57
00:03:35,379 --> 00:03:37,520
以及這個元素

58
00:03:37,520 --> 00:03:43,599
所以我們進入迴圈以後每一次去抓取i跟元素時

59
00:03:43,599 --> 00:03:46,620
他就會依序印出索引值

60
00:03:46,620 --> 00:03:50,594
以及索引值所對應到的資料

61
00:03:50,594 --> 00:03:53,145
list內有許多的涵式

62
00:03:53,145 --> 00:03:55,835
可以幫助我們做查詢

63
00:03:55,835 --> 00:03:58,879
例如我們可以用count(e)

64
00:03:58,879 --> 00:04:04,620
來找出這筆資料有多少個元素的值是e

65
00:04:04,620 --> 00:04:06,460
使用index(e)

66
00:04:06,460 --> 00:04:11,180
可以回傳第一個e這個元素的索引值

67
00:04:11,180 --> 00:04:14,580
例如我們在這邊count(nick)

68
00:04:14,580 --> 00:04:18,780
就是要計算有多少個同學的名字是nick

69
00:04:18,780 --> 00:04:20,960
所以回傳是=2

70
00:04:21,960 --> 00:04:24,219
第一個名字是albert的

71
00:04:24,219 --> 00:04:27,065
他的位置為何

72
00:04:27,065 --> 00:04:29,424
則會回傳1

73
00:04:29,424 --> 00:04:32,060
所以下面這邊就會印出2 1

74
00:04:33,060 --> 00:04:37,120
有許多的涵式是作用在list上的

75
00:04:38,120 --> 00:04:39,900
例如一個涵式sorted

76
00:04:40,900 --> 00:04:43,099
(括號)後面帶的參數是個list

77
00:04:44,099 --> 00:04:47,460
我們可以加上參數reverse也可以不加

78
00:04:47,460 --> 00:04:50,219
如果我們加上reverse=True

79
00:04:51,219 --> 00:04:54,919
就代表需要由大而小做排序

80
00:04:55,919 --> 00:05:01,159
注意sorted跟list.sort是不一樣的

81
00:05:02,159 --> 00:05:06,900
因為sorted會回傳資料排序後的list

82
00:05:07,900 --> 00:05:12,140
他不會對原來的data做資料順序的修改

83
00:05:13,140 --> 00:05:15,940
所以這兩個方法要特別去做比較

84
00:05:16,940 --> 00:05:21,299
len可以幫我們回傳這個資料的長度

85
00:05:21,299 --> 00:05:25,039
所謂長度就是裡面有多少元素

86
00:05:25,039 --> 00:05:28,320
max就可以回傳data內最大的元素

87
00:05:29,320 --> 00:05:32,159
sum(data)

88
00:05:32,159 --> 00:05:38,520
就可以把data這個list裡面的所有數值加總並回傳

89
00:05:38,520 --> 00:05:44,039
二維的list指的是list中的資料本身也是list

90
00:05:45,039 --> 00:05:49,520
例如我們想要去紀錄一群學生的一群成績

91
00:05:49,520 --> 00:05:53,020
這時候我們就可能會使用到二維的list

92
00:05:54,020 --> 00:05:57,960
我們來看一下這筆資料 grade = 一個list

93
00:05:58,960 --> 00:06:02,060
但是這個list裡面的元素又是一個list

94
00:06:03,060 --> 00:06:06,960
第零筆資料就代表學生0的三個成績

95
00:06:06,960 --> 00:06:12,060
假設我們賦予的意義是英文數學自然

96
00:06:12,060 --> 00:06:14,340
就代表這三科的成績

97
00:06:14,340 --> 00:06:17,239
第一筆資料又是一個 list

98
00:06:17,239 --> 00:06:20,859
代表的就是學生1個這三科成績

99
00:06:20,859 --> 00:06:22,560
以此類推

100
00:06:22,560 --> 00:06:27,455
當我們今天想要獲取學生2的成績的時候

101
00:06:27,455 --> 00:06:30,539
我們就可以用 grade[2]

102
00:06:30,539 --> 00:06:33,539
這時候他的回傳是一個list

103
00:06:33,539 --> 00:06:38,780
所以是[77,88,99]的這筆資料

104
00:06:38,780 --> 00:06:44,320
如果我們要進一步的獲取學生2的英文成績

105
00:06:44,320 --> 00:06:47,340
我們就可以用 grade[2][0]

106
00:06:47,340 --> 00:06:50,140
到2個時候抓取的是這筆資料

107
00:06:51,140 --> 00:06:53,500
進一步的第0筆資料

108
00:06:53,500 --> 00:06:56,620
就可以抓取到77的這個成績

109
00:06:56,620 --> 00:07:00,940
在內部的成績中 grade 其實還是一個一維陣列

110
00:07:01,940 --> 00:07:05,719
只不過裡面儲存的是位置的參考

111
00:07:05,719 --> 00:07:10,580
這個位置參考會指向另外一個list

112
00:07:10,580 --> 00:07:16,159
當我們今天要抓取學生1的數學成績的時候

113
00:07:17,159 --> 00:07:19,200
我們會用 grade[1]

114
00:07:19,200 --> 00:07:22,020
來抓取他的成績

115
00:07:22,020 --> 00:07:29,280
所以整個二維陣列就會形成一個表格的方式做呈現

116
00:07:29,280 --> 00:07:32,344
如果我們想要走訪整個資料的話

117
00:07:32,344 --> 00:07:35,525
就可以用一個雙重迴圈

118
00:07:35,525 --> 00:07:38,565
for row in grade 進到迴圈以後

119
00:07:38,565 --> 00:07:42,340
每一個row就是代表一個學生的所有成績

120
00:07:43,340 --> 00:07:45,739
這時候在去執行一個

121
00:07:45,739 --> 00:07:47,745
for element in row

122
00:07:47,745 --> 00:07:50,840
進來後每一個element就代表

123
00:07:50,840 --> 00:07:54,099
某一個人某一個科目的成績

124
00:07:54,099 --> 00:07:59,515
所以第一次的element指的就是11

125
00:07:59,515 --> 00:08:02,765
接下來依次是22 33

126
00:08:02,765 --> 00:08:05,799
等到這個迴圈走完

127
00:08:05,799 --> 00:08:10,419
我們印出一個換行的鍵再進到下一筆資料

128
00:08:10,419 --> 00:08:13,960
第二筆資料的row

129
00:08:13,960 --> 00:08:14,960
代表的就是學生1的這群資料

130
00:08:15,960 --> 00:08:19,460
我們來看一個二維list的運算方法

131
00:08:20,460 --> 00:08:24,020
假設我們想要加總每一個學生的成績

132
00:08:24,020 --> 00:08:27,700
並且把它儲存在一個一維陣列

133
00:08:27,700 --> 00:08:30,794
我們一開始可以宣告一個一維陣列

134
00:08:30,794 --> 00:08:34,414
st_sum的一維陣列

135
00:08:34,414 --> 00:08:37,315
接下來用一個for的迴圈

136
00:08:37,315 --> 00:08:40,325
去走訪每一個學生的成績

137
00:08:40,325 --> 00:08:42,819
for st in grade

138
00:08:42,819 --> 00:08:45,559
進到這個迴圈以後

139
00:08:45,559 --> 00:08:49,400
st代表的是學生所有科目的list

140
00:08:49,400 --> 00:08:51,760
前面加上一個sum

141
00:08:51,760 --> 00:08:55,365
就可以把所有的成績加總起來

142
00:08:55,365 --> 00:08:58,034
加總後我們把它儲存在st_sum

143
00:08:59,034 --> 00:09:02,039
index為i

144
00:09:02,039 --> 00:09:04,500
第一次i的值為0

145
00:09:04,500 --> 00:09:08,834
所以第一個學生的成績就會儲存在0的位置

146
00:09:08,834 --> 00:09:11,745
接下來把i+1

147
00:09:11,745 --> 00:09:14,120
進入到下一個迴圈

148
00:09:14,120 --> 00:09:17,615
第二個學生的成績

149
00:09:17,615 --> 00:09:20,220
儲存在i為1的位置以此類推

150
00:09:21,220 --> 00:09:25,640
如果要去計算每一個科目的總合的話

151
00:09:25,640 --> 00:09:27,179
則稍微複雜了點

152
00:09:28,179 --> 00:09:31,959
因為必須變成縱向的方式來去做加總

153
00:09:32,959 --> 00:09:36,039
一樣我們先宣告一個一維陣列

154
00:09:36,039 --> 00:09:38,579
subj_sum的一維陣列

155
00:09:38,579 --> 00:09:42,520
然後來走訪整個陣列

156
00:09:42,520 --> 00:09:44,699
for st in grade

157
00:09:44,699 --> 00:09:46,939
進來st代表的是一個學生的成績

158
00:09:47,939 --> 00:09:51,980
透過enumerate去獲取索引值

159
00:09:52,980 --> 00:09:55,079
所以有i跟g

160
00:09:56,079 --> 00:10:00,715
i代表的就是目前的索引

161
00:10:00,715 --> 00:10:01,120
第一次的時候是為0

162
00:10:02,120 --> 00:10:06,240
所以subj_sum[0] += g

163
00:10:06,240 --> 00:10:10,039
g就是第一次的成績也就是11

164
00:10:11,039 --> 00:10:14,720
下一個迴圈在進來的時候是22

165
00:10:14,720 --> 00:10:16,939
這時候i的值已經變成1了

166
00:10:17,939 --> 00:10:19,934
所以就會把11儲存在這裡

167
00:10:20,934 --> 00:10:23,814
22儲存在i=1的位置

168
00:10:23,814 --> 00:10:26,079
33儲存在這個地方

169
00:10:27,079 --> 00:10:30,720
下一個外部的迴圈進來的時候

170
00:10:30,720 --> 00:10:32,659
st代表第二筆資料

171
00:10:32,659 --> 00:10:36,319
也就是[44,55,66]的這筆資料

172
00:10:36,319 --> 00:10:40,500
這時候會跟上面的這個地方做加總

173
00:10:40,500 --> 00:10:45,360
也就是44會加上11儲存在上面的這個位置

174
00:10:46,360 --> 00:10:50,720
55+22儲存在這個位置依此類推

175
00:10:50,720 --> 00:10:54,280
等到進到第三筆資料的時候

176
00:10:54,280 --> 00:10:58,579
77會被抓取出來代表g

177
00:10:58,579 --> 00:11:03,380
這時候再去跟前兩筆資料做一個加總儲存起來

178
00:11:03,380 --> 00:11:07,140
依此類推我們做四個迴圈

179
00:11:07,140 --> 00:11:11,900
就可以把所有科目的成績做加總儲存到陣列裡面

