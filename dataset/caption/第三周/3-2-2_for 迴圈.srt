1
00:00:10,400 --> 00:00:12,860


2
00:00:12,860 --> 00:00:16,520
迴圈也常常跟集合物件一起合用

3
00:00:16,520 --> 00:00:19,780
因為我們可以透過迴圈去讀取大量的資料

4
00:00:20,780 --> 00:00:22,160
我們先來看一個例子

5
00:00:22,160 --> 00:00:25,700
如果不用集合物件來儲存大量資料的話

6
00:00:25,700 --> 00:00:28,540
程式寫起來會非常的繁瑣

7
00:00:28,540 --> 00:00:30,780
比方說我們這裡有4筆資料

8
00:00:30,780 --> 00:00:33,940
我們就必須要用4個變數分別來儲存它

9
00:00:33,940 --> 00:00:37,420
x1儲存20、x2儲存30

10
00:00:37,420 --> 00:00:40,380
以此類推，如果我們的資料有100筆的話

11
00:00:40,380 --> 00:00:43,040
你就要宣告100個變數

12
00:00:43,040 --> 00:00:46,920
那在做加總運算的時候也會非常的麻煩

13
00:00:46,920 --> 00:00:49,340
反之如果我們用集合物件

14
00:00:49,340 --> 00:00:52,280
list就會變非常的簡單

15
00:00:52,280 --> 00:00:56,980
我們只要宣告一個x等於，用一個中括號刮起來

16
00:00:56,980 --> 00:00:59,900
代表說這是一個list的集合

17
00:00:59,900 --> 00:01:01,860
裡面放了4個元素

18
00:01:01,860 --> 00:01:05,860
第0個元素是20、第1個元素是30

19
00:01:05,860 --> 00:01:08,060
接下來是90、90

20
00:01:08,060 --> 00:01:11,940
那下一次我們要取得第0筆資料的時候

21
00:01:11,940 --> 00:01:14,020
我們只要用x[0]

22
00:01:14,020 --> 00:01:15,960
就可以取得第0筆資料

23
00:01:15,960 --> 00:01:16,960
以此類推

24
00:01:16,960 --> 00:01:21,260
這樣我們就可以用while迴圈來讀取這些資料

25
00:01:21,260 --> 00:01:22,820
來做一些變化

26
00:01:22,820 --> 00:01:26,700
例如在這個地方while i <len(x)

27
00:01:26,700 --> 00:01:28,880
len是length的意思

28
00:01:28,880 --> 00:01:31,325
就是這個集合物件的長度

29
00:01:31,325 --> 00:01:33,419
代表它放了幾個原素

30
00:01:34,419 --> 00:01:36,660
我們這裡放了4筆資料

31
00:01:36,660 --> 00:01:40,200
所以len(x)回傳就是等於4

32
00:01:40,200 --> 00:01:42,780
那sum=sum+x[i]

33
00:01:42,780 --> 00:01:45,219
第一次的它的值是等於0

34
00:01:45,219 --> 00:01:48,940
所以會抓到x[0]的這筆資料也就是20

35
00:01:48,940 --> 00:01:52,180
然後我們再把i做+1

36
00:01:52,180 --> 00:01:57,960
這個迴圈一直走到i<len(x)不滿足就會跳出來

37
00:01:57,960 --> 00:02:02,760
也就是i等於4的時候，已經超出它的範圍

38
00:02:02,760 --> 00:02:07,300
所以我們就會跳出來，這樣的一個程式碼就會變得非常的簡潔

39
00:02:07,300 --> 00:02:13,400
通常這一個陣列的設定是從檔案讀取以後去建構這樣一個陣列的資料

40
00:02:13,400 --> 00:02:17,300
而不會是在程式碼中一筆一筆的來填寫

41
00:02:17,300 --> 00:02:20,020
接下來我們來介紹for的迴圈

42
00:02:20,020 --> 00:02:21,960
一樣是剛剛的這個例子

43
00:02:21,960 --> 00:02:24,819
我們宣告了x裡面有放4個元素

44
00:02:24,819 --> 00:02:28,819
for的迴圈在某一些場合是更簡潔的

45
00:02:28,819 --> 00:02:31,180
我們可以用for g in x

46
00:02:31,180 --> 00:02:32,640
代表的意思是

47
00:02:32,640 --> 00:02:37,719
針對於每一個在x這個集合物件內的原素g

48
00:02:37,719 --> 00:02:40,060
我來做以下處理

49
00:02:40,060 --> 00:02:42,240
sum=sum+g

50
00:02:42,240 --> 00:02:46,420
第一次我抓到的g就是它的第0個元素

51
00:02:46,420 --> 00:02:48,620
然後再往下跑的時候

52
00:02:48,620 --> 00:02:51,700
依次就是第一個元素、第二個元素、第三個元素

53
00:02:51,700 --> 00:02:52,939
以此類推

54
00:02:52,939 --> 00:02:54,460
那這樣的好處就是

55
00:02:54,460 --> 00:02:57,240
我不需要像while迴圈一樣

56
00:02:57,240 --> 00:02:59,860
每一次去加總i的值

57
00:03:00,860 --> 00:03:03,800
我們少了一個index的變數i

58
00:03:03,800 --> 00:03:05,420
來去指向這一個陣列的元素

59
00:03:06,420 --> 00:03:08,900
集合物件除了可以放整數以外

60
00:03:08,900 --> 00:03:10,539
也可以放字串

61
00:03:10,539 --> 00:03:14,760
例如這個地方，names放的是一群學生的名子

62
00:03:14,760 --> 00:03:17,920
那grades就是他們相對的成績

63
00:03:17,920 --> 00:03:21,939
我們就可以用這個迴圈來列出所有學生的成績

64
00:03:21,939 --> 00:03:23,499
for n in names

65
00:03:23,499 --> 00:03:27,560
意思是我們要針對每一個人的姓名做處理

66
00:03:27,560 --> 00:03:31,980
我們要印出這個n學生的成績 is grade i

67
00:03:31,980 --> 00:03:35,499
因為我外面的迴圈是針對name的

68
00:03:35,499 --> 00:03:40,780
所以針對這個grade我就用索引直i把這個值提取出來

69
00:03:40,780 --> 00:03:44,280
然後我們再把i做加1的動作

70
00:03:44,280 --> 00:03:48,400
所以這一個迴圈我們可以一次走訪2個陣列

