1
00:00:13,952 --> 00:00:18,339
這一小節呢我們來介紹一些資料處理的這個方法

2
00:00:18,364 --> 00:00:21,245
比較偏向前置處理的這個部分

3
00:00:21,738 --> 00:00:23,507
常常我們這個資料

4
00:00:23,588 --> 00:00:27,309
不會一開始就太整齊

5
00:00:27,334 --> 00:00:28,833
中間那可能會

6
00:00:29,087 --> 00:00:31,333
穿插著一些 missing data

7
00:00:31,346 --> 00:00:33,499
就是資料他是有殘缺的

8
00:00:33,825 --> 00:00:37,293
例如說這一個水果的例子

9
00:00:37,341 --> 00:00:39,039
我有 A B C D E

10
00:00:39,309 --> 00:00:41,213
總共有5個水果

11
00:00:41,238 --> 00:00:42,801
但是 E 的這個水果

12
00:00:42,823 --> 00:00:44,055
他的價格

13
00:00:44,078 --> 00:00:45,576
目前是不明的

14
00:00:45,576 --> 00:00:48,324
然後 D 的數量

15
00:00:48,327 --> 00:00:49,327
也是不明的

16
00:00:49,330 --> 00:00:50,774
所以這個資料集

17
00:00:50,799 --> 00:00:53,599
他並不是一個完整的資料

18
00:00:54,051 --> 00:00:55,283
那怎麼辦呢

19
00:00:55,298 --> 00:00:57,551
我們有幾種處理的方式

20
00:00:57,553 --> 00:00:59,045
第一個就是

21
00:00:59,057 --> 00:01:01,215
因為這一筆資料他不完整

22
00:01:01,240 --> 00:01:03,303
我們就把它做一個刪除

23
00:01:03,422 --> 00:01:04,795
那當然有可能呢

24
00:01:04,809 --> 00:01:06,510
我們就把這個資料

25
00:01:06,531 --> 00:01:09,015
用另外一個資料來去做一個頂替

26
00:01:09,029 --> 00:01:11,012
那看我們怎麼來做

27
00:01:11,358 --> 00:01:12,536
所以這個地方

28
00:01:12,538 --> 00:01:15,759
已經定義的一個 function

29
00:01:15,786 --> 00:01:17,268
叫做 reset data

30
00:01:17,290 --> 00:01:19,284
我們把它做一下執行

31
00:01:19,558 --> 00:01:21,028
那執行完了以後

32
00:01:21,045 --> 00:01:22,782
我們把它印出來看一下

33
00:01:23,232 --> 00:01:25,251
那各位在這個地方

34
00:01:25,262 --> 00:01:27,013
看到的是這個 None

35
00:01:27,020 --> 00:01:28,508
因為這個是 python

36
00:01:28,516 --> 00:01:31,512
用來代表一個空值的一個符號

37
00:01:31,891 --> 00:01:33,238
可是在 pandas 呢

38
00:01:33,263 --> 00:01:38,880
它代表的空值是這個 NaN 這個符號

39
00:01:38,916 --> 00:01:40,495
所以大家要記一下

40
00:01:41,950 --> 00:01:44,227
那我們來看一下我們第一個策略

41
00:01:44,251 --> 00:01:46,235
就是把這一個資料

42
00:01:46,255 --> 00:01:51,493
它只要是有 NaN 的含有這樣的一個資料

43
00:01:51,505 --> 00:01:54,211
我就把這一筆資料把它做一個刪除

44
00:01:54,227 --> 00:01:56,227
那這個就叫 dropna

45
00:01:56,234 --> 00:01:58,965
這個 na 就代表空值的意思

46
00:01:59,329 --> 00:02:00,892
所以把那筆資料刪掉

47
00:02:01,202 --> 00:02:03,726
那我們看一下 C 的這一筆資料

48
00:02:03,751 --> 00:02:05,710
跟 E 的這一筆資料

49
00:02:05,736 --> 00:02:08,680
現在都被刪除了

50
00:02:08,998 --> 00:02:10,546
那其實這個地方

51
00:02:10,571 --> 00:02:12,944
還有另外一種策略就是說

52
00:02:13,181 --> 00:02:18,830
我是把這一個具備空值的

53
00:02:18,855 --> 00:02:22,448
這一筆資料的那個column把它刪除掉

54
00:02:22,473 --> 00:02:24,933
剛剛我們是把一筆資料刪除

55
00:02:24,941 --> 00:02:27,425
那我們有可能是刪除那個欄位

56
00:02:27,440 --> 00:02:30,433
那這樣子的話那我們就必須要去指名

57
00:02:30,446 --> 00:02:32,186
我的軸是1

58
00:02:32,211 --> 00:02:36,084
軸是1的話就代表 column 的這一個資料

59
00:02:36,919 --> 00:02:40,411
那我再把這個 df 印出來看一下

60
00:02:40,423 --> 00:02:41,423
你會發現

61
00:02:41,424 --> 00:02:43,923
雖然我剛剛這個地方的 output

62
00:02:43,929 --> 00:02:46,421
已經是刪除了兩個欄位

63
00:02:46,428 --> 00:02:49,651
可是接著我在 df 印出來的時候

64
00:02:49,684 --> 00:02:51,676
還是一樣是完整無缺的

65
00:02:51,683 --> 00:02:54,137
也就是說這一個 function

66
00:02:54,162 --> 00:02:56,400
本身並不會傷害 df

67
00:02:56,404 --> 00:02:58,400
dataframe 這一個資料

68
00:02:58,405 --> 00:02:59,881
它就會回傳

69
00:02:59,906 --> 00:03:01,847
回傳另外一個 dataframe

70
00:03:02,903 --> 00:03:05,664
那我們預設值的話這個都是用 0

71
00:03:05,689 --> 00:03:08,158
你如果不寫的話也是沒關係的

72
00:03:08,170 --> 00:03:12,114
所以如果是這個 default 的 dropna 的話

73
00:03:12,137 --> 00:03:15,620
那它會把兩筆資料把它做一個刪除

74
00:03:15,909 --> 00:03:17,637
那第二種情況就是說

75
00:03:17,645 --> 00:03:22,898
我為這一個 NaN 的這個詞填上一個特定的詞

76
00:03:22,923 --> 00:03:25,359
那我們這裡宣告了一個 dict

77
00:03:25,369 --> 00:03:28,613
price 是 10 quantily 是 40

78
00:03:28,638 --> 00:03:30,076
這個意思就是說

79
00:03:30,222 --> 00:03:32,364
如果我在價格上面

80
00:03:32,373 --> 00:03:35,134
有 NaN 的話我就用 10 來頂替

81
00:03:35,159 --> 00:03:37,888
那數量的話就用四十來做頂替

82
00:03:37,913 --> 00:03:39,349
我們執行一下

83
00:03:39,374 --> 00:03:40,842
這時候你會發現

84
00:03:40,852 --> 00:03:44,165
這時候這一筆 E 的這個資料

85
00:03:44,190 --> 00:03:45,821
它已經用 10 來頂替了

86
00:03:45,846 --> 00:03:48,131
那這筆資料它用 40 來頂替

87
00:03:48,846 --> 00:03:50,600
那下面這個地方是

88
00:03:50,614 --> 00:03:53,854
我從 10 到 20 之間

89
00:03:53,861 --> 00:03:56,590
或者是說從 20 到 90 之間

90
00:03:56,611 --> 00:04:00,333
我去取一個隨機的值來去做一個填取

91
00:04:00,335 --> 00:04:01,833
去做一個填值

92
00:04:01,944 --> 00:04:04,817
所以你可能兩次執行跑出來的結果

93
00:04:04,842 --> 00:04:06,842
其實是不太一樣的

94
00:04:07,115 --> 00:04:10,503
在一個範圍內填一個固定的值這樣子

95
00:04:12,345 --> 00:04:16,026
那接下來這個是最後一種方法

96
00:04:16,051 --> 00:04:19,796
就是我可以往前參考或者是往後參考

97
00:04:20,032 --> 00:04:21,032
這個呢

98
00:04:21,182 --> 00:04:24,304
通常是用在我這個資料

99
00:04:24,329 --> 00:04:27,273
他其實有一個連續性

100
00:04:27,298 --> 00:04:29,178
就是舉個例子來講

101
00:04:29,203 --> 00:04:31,313
他這個欄位代表是一個時間

102
00:04:31,608 --> 00:04:33,520
我雖然這個時間

103
00:04:33,623 --> 00:04:35,777
這一筆資料他是 missing data

104
00:04:35,802 --> 00:04:37,531
但是跟前一筆資料其實

105
00:04:37,556 --> 00:04:40,685
是差不了多少的 差個 5 秒還是幾秒

106
00:04:40,868 --> 00:04:43,225
所以我等於你這個秒數

107
00:04:44,613 --> 00:04:48,485
對我來講其實對整個資料的運算

108
00:04:48,510 --> 00:04:50,716
其實不會有很大的這個影響

109
00:04:50,741 --> 00:04:54,320
所以我可以讓我這個值就等於前面的這個值

110
00:04:54,555 --> 00:04:56,225
那我們來執行一下

111
00:04:57,392 --> 00:04:58,392
好所以你看

112
00:04:58,598 --> 00:05:00,804
這一筆資料呢

113
00:05:01,011 --> 00:05:02,991
他就會 follow 前面的這筆

114
00:05:03,016 --> 00:05:04,242
所以就變成 30

115
00:05:04,267 --> 00:05:07,019
這筆資料就會 follow 前面一筆

116
00:05:07,044 --> 00:05:08,463
就變成是 87

117
00:05:08,717 --> 00:05:13,074
如果把他改成是往後參考的話

118
00:05:14,311 --> 00:05:15,454
這時候呢

119
00:05:15,613 --> 00:05:18,216
這一筆就變成是後面的 45

120
00:05:18,244 --> 00:05:19,621
那這一筆呢因為

121
00:05:19,743 --> 00:05:23,565
後面沒有資料 所以就保持原來的 NaN

